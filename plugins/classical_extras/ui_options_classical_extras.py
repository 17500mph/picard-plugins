# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Mark\Documents\Mark's documents\Music\Picard20\Classical Extras development\classical_extras\options_classical_extras.ui'
#
# Created by: PyQt5 UI code generator 5.11.2
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_ClassicalExtrasOptionsPage(object):
    def setupUi(self, ClassicalExtrasOptionsPage):
        ClassicalExtrasOptionsPage.setObjectName("ClassicalExtrasOptionsPage")
        ClassicalExtrasOptionsPage.resize(1148, 918)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(ClassicalExtrasOptionsPage.sizePolicy().hasHeightForWidth())
        ClassicalExtrasOptionsPage.setSizePolicy(sizePolicy)
        ClassicalExtrasOptionsPage.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        ClassicalExtrasOptionsPage.setAcceptDrops(False)
        self.vboxlayout = QtWidgets.QVBoxLayout(ClassicalExtrasOptionsPage)
        self.vboxlayout.setContentsMargins(9, 9, 9, 9)
        self.vboxlayout.setSpacing(6)
        self.vboxlayout.setObjectName("vboxlayout")
        self.tabWidget = QtWidgets.QTabWidget(ClassicalExtrasOptionsPage)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        self.tabWidget.setMaximumSize(QtCore.QSize(1200, 1200))
        palette = QtGui.QPalette()
        self.tabWidget.setPalette(palette)
        self.tabWidget.setAutoFillBackground(False)
        self.tabWidget.setStyleSheet("")
        self.tabWidget.setObjectName("tabWidget")
        self.Artists = QtWidgets.QWidget()
        self.Artists.setObjectName("Artists")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.Artists)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.scrollArea = QtWidgets.QScrollArea(self.Artists)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scrollArea.sizePolicy().hasHeightForWidth())
        self.scrollArea.setSizePolicy(sizePolicy)
        self.scrollArea.setFocusPolicy(QtCore.Qt.WheelFocus)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1087, 1044))
        self.scrollAreaWidgetContents.setAcceptDrops(False)
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.frame_9 = QtWidgets.QFrame(self.scrollAreaWidgetContents)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(236, 255, 171))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(236, 255, 171))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(236, 255, 171))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(236, 255, 171))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.frame_9.setPalette(palette)
        self.frame_9.setAutoFillBackground(True)
        self.frame_9.setStyleSheet("")
        self.frame_9.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_9.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_9.setObjectName("frame_9")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.frame_9)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.use_cea = QtWidgets.QCheckBox(self.frame_9)
        palette = QtGui.QPalette()
        self.use_cea.setPalette(palette)
        self.use_cea.setStyleSheet("")
        self.use_cea.setObjectName("use_cea")
        self.horizontalLayout_9.addWidget(self.use_cea)
        self.label_79 = QtWidgets.QLabel(self.frame_9)
        self.label_79.setObjectName("label_79")
        self.horizontalLayout_9.addWidget(self.label_79)
        self.verticalLayout_13.addWidget(self.frame_9)
        self.line_4 = QtWidgets.QFrame(self.scrollAreaWidgetContents)
        self.line_4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.verticalLayout_13.addWidget(self.line_4)
        self.label_22 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_22.setObjectName("label_22")
        self.verticalLayout_13.addWidget(self.label_22)
        self.label_43 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_43.setObjectName("label_43")
        self.verticalLayout_13.addWidget(self.label_43)
        self.groupBox_23 = QtWidgets.QGroupBox(self.scrollAreaWidgetContents)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(19, 186, 161))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(19, 186, 161))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(19, 186, 161))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(19, 186, 161))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.groupBox_23.setPalette(palette)
        self.groupBox_23.setAutoFillBackground(True)
        self.groupBox_23.setStyleSheet("")
        self.groupBox_23.setObjectName("groupBox_23")
        self.formLayout_3 = QtWidgets.QFormLayout(self.groupBox_23)
        self.formLayout_3.setFieldGrowthPolicy(QtWidgets.QFormLayout.AllNonFixedFieldsGrow)
        self.formLayout_3.setObjectName("formLayout_3")
        self.groupBox_24 = QtWidgets.QGroupBox(self.groupBox_23)
        self.groupBox_24.setObjectName("groupBox_24")
        self.verticalLayout_24 = QtWidgets.QVBoxLayout(self.groupBox_24)
        self.verticalLayout_24.setObjectName("verticalLayout_24")
        self.cea_no_aliases = QtWidgets.QRadioButton(self.groupBox_24)
        self.cea_no_aliases.setObjectName("cea_no_aliases")
        self.verticalLayout_24.addWidget(self.cea_no_aliases)
        self.cea_aliases = QtWidgets.QRadioButton(self.groupBox_24)
        self.cea_aliases.setObjectName("cea_aliases")
        self.verticalLayout_24.addWidget(self.cea_aliases)
        self.cea_aliases_composer = QtWidgets.QRadioButton(self.groupBox_24)
        self.cea_aliases_composer.setObjectName("cea_aliases_composer")
        self.verticalLayout_24.addWidget(self.cea_aliases_composer)
        self.formLayout_3.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.groupBox_24)
        self.groupBox_25 = QtWidgets.QGroupBox(self.groupBox_23)
        self.groupBox_25.setObjectName("groupBox_25")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout(self.groupBox_25)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.cea_alias_overrides = QtWidgets.QRadioButton(self.groupBox_25)
        self.cea_alias_overrides.setObjectName("cea_alias_overrides")
        self.horizontalLayout_11.addWidget(self.cea_alias_overrides)
        self.cea_credited_overrides = QtWidgets.QRadioButton(self.groupBox_25)
        self.cea_credited_overrides.setObjectName("cea_credited_overrides")
        self.horizontalLayout_11.addWidget(self.cea_credited_overrides)
        self.cea_cyrillic = QtWidgets.QCheckBox(self.groupBox_25)
        self.cea_cyrillic.setObjectName("cea_cyrillic")
        self.horizontalLayout_11.addWidget(self.cea_cyrillic)
        self.formLayout_3.setWidget(2, QtWidgets.QFormLayout.SpanningRole, self.groupBox_25)
        self.groupBox_7 = QtWidgets.QGroupBox(self.groupBox_23)
        self.groupBox_7.setObjectName("groupBox_7")
        self.horizontalLayout_18 = QtWidgets.QHBoxLayout(self.groupBox_7)
        self.horizontalLayout_18.setObjectName("horizontalLayout_18")
        self.groupBox_26 = QtWidgets.QGroupBox(self.groupBox_7)
        self.groupBox_26.setStyleSheet("border-color: rgb(116, 116, 116);")
        self.groupBox_26.setObjectName("groupBox_26")
        self.verticalLayout_26 = QtWidgets.QVBoxLayout(self.groupBox_26)
        self.verticalLayout_26.setObjectName("verticalLayout_26")
        self.cea_recording_credited = QtWidgets.QCheckBox(self.groupBox_26)
        self.cea_recording_credited.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.cea_recording_credited.setObjectName("cea_recording_credited")
        self.verticalLayout_26.addWidget(self.cea_recording_credited)
        self.cea_group_credited = QtWidgets.QCheckBox(self.groupBox_26)
        self.cea_group_credited.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.cea_group_credited.setAutoFillBackground(False)
        self.cea_group_credited.setStyleSheet("")
        self.cea_group_credited.setObjectName("cea_group_credited")
        self.verticalLayout_26.addWidget(self.cea_group_credited)
        self.cea_credited = QtWidgets.QCheckBox(self.groupBox_26)
        self.cea_credited.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.cea_credited.setObjectName("cea_credited")
        self.verticalLayout_26.addWidget(self.cea_credited)
        self.cea_release_relationship_credited = QtWidgets.QCheckBox(self.groupBox_26)
        self.cea_release_relationship_credited.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.cea_release_relationship_credited.setObjectName("cea_release_relationship_credited")
        self.verticalLayout_26.addWidget(self.cea_release_relationship_credited)
        self.cea_recording_relationship_credited = QtWidgets.QCheckBox(self.groupBox_26)
        self.cea_recording_relationship_credited.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.cea_recording_relationship_credited.setObjectName("cea_recording_relationship_credited")
        self.verticalLayout_26.addWidget(self.cea_recording_relationship_credited)
        self.cea_track_credited = QtWidgets.QCheckBox(self.groupBox_26)
        self.cea_track_credited.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.cea_track_credited.setObjectName("cea_track_credited")
        self.verticalLayout_26.addWidget(self.cea_track_credited)
        self.label_24 = QtWidgets.QLabel(self.groupBox_26)
        self.label_24.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label_24.setObjectName("label_24")
        self.verticalLayout_26.addWidget(self.label_24)
        self.label_88 = QtWidgets.QLabel(self.groupBox_26)
        self.label_88.setObjectName("label_88")
        self.verticalLayout_26.addWidget(self.label_88)
        self.horizontalLayout_18.addWidget(self.groupBox_26)
        self.groupBox_27 = QtWidgets.QGroupBox(self.groupBox_7)
        self.groupBox_27.setObjectName("groupBox_27")
        self.verticalLayout_27 = QtWidgets.QVBoxLayout(self.groupBox_27)
        self.verticalLayout_27.setObjectName("verticalLayout_27")
        self.cea_performer_credited = QtWidgets.QCheckBox(self.groupBox_27)
        self.cea_performer_credited.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.cea_performer_credited.setObjectName("cea_performer_credited")
        self.verticalLayout_27.addWidget(self.cea_performer_credited)
        self.cea_composer_credited = QtWidgets.QCheckBox(self.groupBox_27)
        self.cea_composer_credited.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.cea_composer_credited.setObjectName("cea_composer_credited")
        self.verticalLayout_27.addWidget(self.cea_composer_credited)
        self.horizontalLayout_18.addWidget(self.groupBox_27)
        self.formLayout_3.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.groupBox_7)
        self.verticalLayout_13.addWidget(self.groupBox_23)
        self.groupBox_29 = QtWidgets.QGroupBox(self.scrollAreaWidgetContents)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 162, 116))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 162, 116))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 162, 116))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 162, 116))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.groupBox_29.setPalette(palette)
        self.groupBox_29.setAutoFillBackground(True)
        self.groupBox_29.setStyleSheet("")
        self.groupBox_29.setObjectName("groupBox_29")
        self.horizontalLayout_24 = QtWidgets.QHBoxLayout(self.groupBox_29)
        self.horizontalLayout_24.setObjectName("horizontalLayout_24")
        self.groupBox_34 = QtWidgets.QGroupBox(self.groupBox_29)
        self.groupBox_34.setObjectName("groupBox_34")
        self.verticalLayout_31 = QtWidgets.QVBoxLayout(self.groupBox_34)
        self.verticalLayout_31.setObjectName("verticalLayout_31")
        self.cea_ra_trackartist = QtWidgets.QRadioButton(self.groupBox_34)
        self.cea_ra_trackartist.setObjectName("cea_ra_trackartist")
        self.verticalLayout_31.addWidget(self.cea_ra_trackartist)
        self.cea_ra_performer = QtWidgets.QRadioButton(self.groupBox_34)
        self.cea_ra_performer.setObjectName("cea_ra_performer")
        self.verticalLayout_31.addWidget(self.cea_ra_performer)
        self.horizontalLayout_24.addWidget(self.groupBox_34)
        self.line_6 = QtWidgets.QFrame(self.groupBox_29)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.line_6.sizePolicy().hasHeightForWidth())
        self.line_6.setSizePolicy(sizePolicy)
        self.line_6.setAutoFillBackground(False)
        self.line_6.setLineWidth(1)
        self.line_6.setMidLineWidth(1)
        self.line_6.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_6.setObjectName("line_6")
        self.horizontalLayout_24.addWidget(self.line_6)
        self.line_7 = QtWidgets.QFrame(self.groupBox_29)
        self.line_7.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_7.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_7.setObjectName("line_7")
        self.horizontalLayout_24.addWidget(self.line_7)
        self.cea_ra_use = QtWidgets.QCheckBox(self.groupBox_29)
        self.cea_ra_use.setObjectName("cea_ra_use")
        self.horizontalLayout_24.addWidget(self.cea_ra_use)
        self.groupBox_30 = QtWidgets.QGroupBox(self.groupBox_29)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_30.sizePolicy().hasHeightForWidth())
        self.groupBox_30.setSizePolicy(sizePolicy)
        self.groupBox_30.setObjectName("groupBox_30")
        self.verticalLayout_29 = QtWidgets.QVBoxLayout(self.groupBox_30)
        self.verticalLayout_29.setObjectName("verticalLayout_29")
        self.cea_ra_replace_ta = QtWidgets.QRadioButton(self.groupBox_30)
        self.cea_ra_replace_ta.setObjectName("cea_ra_replace_ta")
        self.verticalLayout_29.addWidget(self.cea_ra_replace_ta)
        self.cea_ra_noblank_ta = QtWidgets.QCheckBox(self.groupBox_30)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cea_ra_noblank_ta.sizePolicy().hasHeightForWidth())
        self.cea_ra_noblank_ta.setSizePolicy(sizePolicy)
        self.cea_ra_noblank_ta.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.cea_ra_noblank_ta.setObjectName("cea_ra_noblank_ta")
        self.verticalLayout_29.addWidget(self.cea_ra_noblank_ta)
        self.cea_ra_merge_ta = QtWidgets.QRadioButton(self.groupBox_30)
        self.cea_ra_merge_ta.setObjectName("cea_ra_merge_ta")
        self.verticalLayout_29.addWidget(self.cea_ra_merge_ta)
        self.horizontalLayout_24.addWidget(self.groupBox_30)
        self.verticalLayout_13.addWidget(self.groupBox_29)
        self.groupBox_5 = QtWidgets.QGroupBox(self.scrollAreaWidgetContents)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.groupBox_5.setPalette(palette)
        self.groupBox_5.setAutoFillBackground(True)
        self.groupBox_5.setStyleSheet("")
        self.groupBox_5.setObjectName("groupBox_5")
        self.gridLayout = QtWidgets.QGridLayout(self.groupBox_5)
        self.gridLayout.setObjectName("gridLayout")
        self.groupBox_9 = QtWidgets.QGroupBox(self.groupBox_5)
        self.groupBox_9.setObjectName("groupBox_9")
        self.verticalLayout_15 = QtWidgets.QVBoxLayout(self.groupBox_9)
        self.verticalLayout_15.setObjectName("verticalLayout_15")
        self.frame_5 = QtWidgets.QFrame(self.groupBox_9)
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.frame_5)
        self.horizontalLayout_8.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.horizontalLayout_8.setContentsMargins(-1, 1, -1, 9)
        self.horizontalLayout_8.setSpacing(6)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.label_44 = QtWidgets.QLabel(self.frame_5)
        self.label_44.setObjectName("label_44")
        self.horizontalLayout_8.addWidget(self.label_44)
        self.cea_chorusmaster = QtWidgets.QLineEdit(self.frame_5)
        self.cea_chorusmaster.setStyleSheet("background-color: rgb(229, 229, 255);")
        self.cea_chorusmaster.setObjectName("cea_chorusmaster")
        self.horizontalLayout_8.addWidget(self.cea_chorusmaster)
        self.verticalLayout_15.addWidget(self.frame_5)
        self.frame_3 = QtWidgets.QFrame(self.groupBox_9)
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.frame_3)
        self.horizontalLayout_6.setContentsMargins(-1, 1, -1, -1)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.label_46 = QtWidgets.QLabel(self.frame_3)
        self.label_46.setObjectName("label_46")
        self.horizontalLayout_6.addWidget(self.label_46)
        self.cea_concertmaster = QtWidgets.QLineEdit(self.frame_3)
        self.cea_concertmaster.setStyleSheet("background-color: rgb(229, 229, 255);")
        self.cea_concertmaster.setObjectName("cea_concertmaster")
        self.horizontalLayout_6.addWidget(self.cea_concertmaster)
        self.verticalLayout_15.addWidget(self.frame_3)
        self.frame_12 = QtWidgets.QFrame(self.groupBox_9)
        self.frame_12.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_12.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_12.setObjectName("frame_12")
        self.horizontalLayout_23 = QtWidgets.QHBoxLayout(self.frame_12)
        self.horizontalLayout_23.setObjectName("horizontalLayout_23")
        self.label_34 = QtWidgets.QLabel(self.frame_12)
        self.label_34.setObjectName("label_34")
        self.horizontalLayout_23.addWidget(self.label_34)
        self.cea_lyricist = QtWidgets.QLineEdit(self.frame_12)
        self.cea_lyricist.setStyleSheet("background-color: rgb(229, 229, 255);")
        self.cea_lyricist.setObjectName("cea_lyricist")
        self.horizontalLayout_23.addWidget(self.cea_lyricist)
        self.verticalLayout_15.addWidget(self.frame_12)
        self.frame_7 = QtWidgets.QFrame(self.groupBox_9)
        self.frame_7.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_7.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_7.setObjectName("frame_7")
        self.horizontalLayout_19 = QtWidgets.QHBoxLayout(self.frame_7)
        self.horizontalLayout_19.setObjectName("horizontalLayout_19")
        self.label_26 = QtWidgets.QLabel(self.frame_7)
        self.label_26.setObjectName("label_26")
        self.horizontalLayout_19.addWidget(self.label_26)
        self.cea_librettist = QtWidgets.QLineEdit(self.frame_7)
        self.cea_librettist.setStyleSheet("background-color: rgb(229, 229, 255);")
        self.cea_librettist.setObjectName("cea_librettist")
        self.horizontalLayout_19.addWidget(self.cea_librettist)
        self.verticalLayout_15.addWidget(self.frame_7)
        self.frame_10 = QtWidgets.QFrame(self.groupBox_9)
        self.frame_10.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_10.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_10.setObjectName("frame_10")
        self.horizontalLayout_21 = QtWidgets.QHBoxLayout(self.frame_10)
        self.horizontalLayout_21.setObjectName("horizontalLayout_21")
        self.label_30 = QtWidgets.QLabel(self.frame_10)
        self.label_30.setObjectName("label_30")
        self.horizontalLayout_21.addWidget(self.label_30)
        self.cea_translator = QtWidgets.QLineEdit(self.frame_10)
        self.cea_translator.setStyleSheet("background-color: rgb(229, 229, 255);")
        self.cea_translator.setObjectName("cea_translator")
        self.horizontalLayout_21.addWidget(self.cea_translator)
        self.verticalLayout_15.addWidget(self.frame_10)
        self.gridLayout.addWidget(self.groupBox_9, 0, 1, 1, 1)
        self.groupBox_8 = QtWidgets.QGroupBox(self.groupBox_5)
        self.groupBox_8.setTitle("")
        self.groupBox_8.setObjectName("groupBox_8")
        self.verticalLayout_14 = QtWidgets.QVBoxLayout(self.groupBox_8)
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.cea_arrangers = QtWidgets.QCheckBox(self.groupBox_8)
        self.cea_arrangers.setObjectName("cea_arrangers")
        self.verticalLayout_14.addWidget(self.cea_arrangers)
        self.cea_composer_album = QtWidgets.QCheckBox(self.groupBox_8)
        self.cea_composer_album.setObjectName("cea_composer_album")
        self.verticalLayout_14.addWidget(self.cea_composer_album)
        self.cea_no_lyricists = QtWidgets.QCheckBox(self.groupBox_8)
        self.cea_no_lyricists.setObjectName("cea_no_lyricists")
        self.verticalLayout_14.addWidget(self.cea_no_lyricists)
        self.cea_inst_credit = QtWidgets.QCheckBox(self.groupBox_8)
        self.cea_inst_credit.setObjectName("cea_inst_credit")
        self.verticalLayout_14.addWidget(self.cea_inst_credit)
        self.cea_no_solo = QtWidgets.QCheckBox(self.groupBox_8)
        self.cea_no_solo.setObjectName("cea_no_solo")
        self.verticalLayout_14.addWidget(self.cea_no_solo)
        self.gridLayout.addWidget(self.groupBox_8, 0, 0, 1, 1)
        self.groupBox_28 = QtWidgets.QGroupBox(self.groupBox_5)
        self.groupBox_28.setObjectName("groupBox_28")
        self.verticalLayout_21 = QtWidgets.QVBoxLayout(self.groupBox_28)
        self.verticalLayout_21.setObjectName("verticalLayout_21")
        self.frame_17 = QtWidgets.QFrame(self.groupBox_28)
        self.frame_17.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_17.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_17.setObjectName("frame_17")
        self.horizontalLayout_30 = QtWidgets.QHBoxLayout(self.frame_17)
        self.horizontalLayout_30.setObjectName("horizontalLayout_30")
        self.label_56 = QtWidgets.QLabel(self.frame_17)
        self.label_56.setObjectName("label_56")
        self.horizontalLayout_30.addWidget(self.label_56)
        self.cea_writer = QtWidgets.QLineEdit(self.frame_17)
        self.cea_writer.setStyleSheet("background-color: rgb(229, 229, 255);")
        self.cea_writer.setObjectName("cea_writer")
        self.horizontalLayout_30.addWidget(self.cea_writer)
        self.verticalLayout_21.addWidget(self.frame_17)
        self.frame_16 = QtWidgets.QFrame(self.groupBox_28)
        self.frame_16.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_16.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_16.setObjectName("frame_16")
        self.horizontalLayout_29 = QtWidgets.QHBoxLayout(self.frame_16)
        self.horizontalLayout_29.setObjectName("horizontalLayout_29")
        self.label_54 = QtWidgets.QLabel(self.frame_16)
        self.label_54.setObjectName("label_54")
        self.horizontalLayout_29.addWidget(self.label_54)
        self.cea_arranger = QtWidgets.QLineEdit(self.frame_16)
        self.cea_arranger.setStyleSheet("background-color: rgb(229, 229, 255);")
        self.cea_arranger.setObjectName("cea_arranger")
        self.horizontalLayout_29.addWidget(self.cea_arranger)
        self.verticalLayout_21.addWidget(self.frame_16)
        self.frame_4 = QtWidgets.QFrame(self.groupBox_28)
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.frame_4)
        self.horizontalLayout_7.setContentsMargins(-1, 1, -1, -1)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.label_45 = QtWidgets.QLabel(self.frame_4)
        self.label_45.setObjectName("label_45")
        self.horizontalLayout_7.addWidget(self.label_45)
        self.cea_orchestrator = QtWidgets.QLineEdit(self.frame_4)
        self.cea_orchestrator.setStyleSheet("background-color: rgb(229, 229, 255);")
        self.cea_orchestrator.setObjectName("cea_orchestrator")
        self.horizontalLayout_7.addWidget(self.cea_orchestrator)
        self.verticalLayout_21.addWidget(self.frame_4)
        self.frame_11 = QtWidgets.QFrame(self.groupBox_28)
        self.frame_11.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_11.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_11.setObjectName("frame_11")
        self.horizontalLayout_22 = QtWidgets.QHBoxLayout(self.frame_11)
        self.horizontalLayout_22.setObjectName("horizontalLayout_22")
        self.label_32 = QtWidgets.QLabel(self.frame_11)
        self.label_32.setObjectName("label_32")
        self.horizontalLayout_22.addWidget(self.label_32)
        self.cea_reconstructed = QtWidgets.QLineEdit(self.frame_11)
        self.cea_reconstructed.setStyleSheet("background-color: rgb(229, 229, 255);")
        self.cea_reconstructed.setObjectName("cea_reconstructed")
        self.horizontalLayout_22.addWidget(self.cea_reconstructed)
        self.verticalLayout_21.addWidget(self.frame_11)
        self.frame_8 = QtWidgets.QFrame(self.groupBox_28)
        self.frame_8.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_8.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_8.setObjectName("frame_8")
        self.horizontalLayout_20 = QtWidgets.QHBoxLayout(self.frame_8)
        self.horizontalLayout_20.setObjectName("horizontalLayout_20")
        self.label_28 = QtWidgets.QLabel(self.frame_8)
        self.label_28.setObjectName("label_28")
        self.horizontalLayout_20.addWidget(self.label_28)
        self.cea_revised = QtWidgets.QLineEdit(self.frame_8)
        self.cea_revised.setStyleSheet("background-color: rgb(229, 229, 255);")
        self.cea_revised.setObjectName("cea_revised")
        self.horizontalLayout_20.addWidget(self.cea_revised)
        self.verticalLayout_21.addWidget(self.frame_8)
        self.gridLayout.addWidget(self.groupBox_28, 0, 2, 1, 1)
        self.verticalLayout_13.addWidget(self.groupBox_5)
        self.line_3 = QtWidgets.QFrame(self.scrollAreaWidgetContents)
        self.line_3.setLineWidth(1)
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.verticalLayout_13.addWidget(self.line_3)
        self.groupBox_31 = QtWidgets.QGroupBox(self.scrollAreaWidgetContents)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 110, 98))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 110, 98))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 110, 98))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 110, 98))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.groupBox_31.setPalette(palette)
        self.groupBox_31.setAutoFillBackground(True)
        self.groupBox_31.setStyleSheet("")
        self.groupBox_31.setObjectName("groupBox_31")
        self.horizontalLayout_25 = QtWidgets.QHBoxLayout(self.groupBox_31)
        self.horizontalLayout_25.setObjectName("horizontalLayout_25")
        self.cea_split_lyrics = QtWidgets.QCheckBox(self.groupBox_31)
        self.cea_split_lyrics.setObjectName("cea_split_lyrics")
        self.horizontalLayout_25.addWidget(self.cea_split_lyrics)
        self.groupBox_32 = QtWidgets.QGroupBox(self.groupBox_31)
        self.groupBox_32.setTitle("")
        self.groupBox_32.setObjectName("groupBox_32")
        self.verticalLayout_30 = QtWidgets.QVBoxLayout(self.groupBox_32)
        self.verticalLayout_30.setObjectName("verticalLayout_30")
        self.frame_13 = QtWidgets.QFrame(self.groupBox_32)
        self.frame_13.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_13.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_13.setObjectName("frame_13")
        self.horizontalLayout_26 = QtWidgets.QHBoxLayout(self.frame_13)
        self.horizontalLayout_26.setObjectName("horizontalLayout_26")
        self.label_50 = QtWidgets.QLabel(self.frame_13)
        self.label_50.setObjectName("label_50")
        self.horizontalLayout_26.addWidget(self.label_50)
        self.cea_lyrics_tag = QtWidgets.QLineEdit(self.frame_13)
        self.cea_lyrics_tag.setStyleSheet("background-color: rgb(255, 233, 181);")
        self.cea_lyrics_tag.setObjectName("cea_lyrics_tag")
        self.horizontalLayout_26.addWidget(self.cea_lyrics_tag)
        self.verticalLayout_30.addWidget(self.frame_13)
        self.frame_14 = QtWidgets.QFrame(self.groupBox_32)
        self.frame_14.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_14.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_14.setObjectName("frame_14")
        self.horizontalLayout_27 = QtWidgets.QHBoxLayout(self.frame_14)
        self.horizontalLayout_27.setObjectName("horizontalLayout_27")
        self.label_51 = QtWidgets.QLabel(self.frame_14)
        self.label_51.setObjectName("label_51")
        self.horizontalLayout_27.addWidget(self.label_51)
        self.cea_album_lyrics = QtWidgets.QLineEdit(self.frame_14)
        self.cea_album_lyrics.setStyleSheet("background-color: rgb(255, 233, 181);")
        self.cea_album_lyrics.setObjectName("cea_album_lyrics")
        self.horizontalLayout_27.addWidget(self.cea_album_lyrics)
        self.verticalLayout_30.addWidget(self.frame_14)
        self.frame_15 = QtWidgets.QFrame(self.groupBox_32)
        self.frame_15.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_15.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_15.setObjectName("frame_15")
        self.horizontalLayout_28 = QtWidgets.QHBoxLayout(self.frame_15)
        self.horizontalLayout_28.setObjectName("horizontalLayout_28")
        self.label_52 = QtWidgets.QLabel(self.frame_15)
        self.label_52.setObjectName("label_52")
        self.horizontalLayout_28.addWidget(self.label_52)
        self.cea_track_lyrics = QtWidgets.QLineEdit(self.frame_15)
        self.cea_track_lyrics.setStyleSheet("background-color: rgb(255, 233, 181);")
        self.cea_track_lyrics.setObjectName("cea_track_lyrics")
        self.horizontalLayout_28.addWidget(self.cea_track_lyrics)
        self.verticalLayout_30.addWidget(self.frame_15)
        self.horizontalLayout_25.addWidget(self.groupBox_32)
        self.verticalLayout_13.addWidget(self.groupBox_31)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_13.addItem(spacerItem)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout_10.addWidget(self.scrollArea)
        self.tabWidget.addTab(self.Artists, "")
        self.Tag_mapping = QtWidgets.QWidget()
        self.Tag_mapping.setObjectName("Tag_mapping")
        self.verticalLayout_28 = QtWidgets.QVBoxLayout(self.Tag_mapping)
        self.verticalLayout_28.setObjectName("verticalLayout_28")
        self.scrollArea_4 = QtWidgets.QScrollArea(self.Tag_mapping)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scrollArea_4.sizePolicy().hasHeightForWidth())
        self.scrollArea_4.setSizePolicy(sizePolicy)
        self.scrollArea_4.setWidgetResizable(True)
        self.scrollArea_4.setObjectName("scrollArea_4")
        self.scrollAreaWidgetContents_8 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_8.setGeometry(QtCore.QRect(0, 0, 1104, 854))
        self.scrollAreaWidgetContents_8.setObjectName("scrollAreaWidgetContents_8")
        self.verticalLayout_33 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_8)
        self.verticalLayout_33.setObjectName("verticalLayout_33")
        self.label_18 = QtWidgets.QLabel(self.scrollAreaWidgetContents_8)
        self.label_18.setStyleSheet("")
        self.label_18.setObjectName("label_18")
        self.verticalLayout_33.addWidget(self.label_18)
        self.groupBox_11 = QtWidgets.QGroupBox(self.scrollAreaWidgetContents_8)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(185, 135, 188))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(185, 135, 188))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(185, 135, 188))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(185, 135, 188))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.groupBox_11.setPalette(palette)
        self.groupBox_11.setAutoFillBackground(True)
        self.groupBox_11.setStyleSheet("")
        self.groupBox_11.setObjectName("groupBox_11")
        self.verticalLayout_17 = QtWidgets.QVBoxLayout(self.groupBox_11)
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        self.artist_tags = QtWidgets.QGroupBox(self.groupBox_11)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(205, 230, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(205, 230, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(205, 230, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(205, 230, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.artist_tags.setPalette(palette)
        self.artist_tags.setAutoFillBackground(True)
        self.artist_tags.setStyleSheet("")
        self.artist_tags.setObjectName("artist_tags")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.artist_tags)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.label_3 = QtWidgets.QLabel(self.artist_tags)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_12.addWidget(self.label_3)
        self.cea_blank_tag = QtWidgets.QLineEdit(self.artist_tags)
        self.cea_blank_tag.setStyleSheet("background-color: rgb(226, 237, 255);")
        self.cea_blank_tag.setObjectName("cea_blank_tag")
        self.verticalLayout_12.addWidget(self.cea_blank_tag)
        self.cea_blank_tag_2 = QtWidgets.QLineEdit(self.artist_tags)
        self.cea_blank_tag_2.setStyleSheet("background-color: rgb(226, 237, 255);")
        self.cea_blank_tag_2.setObjectName("cea_blank_tag_2")
        self.verticalLayout_12.addWidget(self.cea_blank_tag_2)
        self.verticalLayout_17.addWidget(self.artist_tags)
        self.label_19 = QtWidgets.QLabel(self.groupBox_11)
        self.label_19.setObjectName("label_19")
        self.verticalLayout_17.addWidget(self.label_19)
        self.cea_keep = QtWidgets.QLineEdit(self.groupBox_11)
        self.cea_keep.setStyleSheet("background-color: rgb(248, 219, 255);")
        self.cea_keep.setObjectName("cea_keep")
        self.verticalLayout_17.addWidget(self.cea_keep)
        self.cea_clear_tags = QtWidgets.QCheckBox(self.groupBox_11)
        self.cea_clear_tags.setObjectName("cea_clear_tags")
        self.verticalLayout_17.addWidget(self.cea_clear_tags)
        self.verticalLayout_33.addWidget(self.groupBox_11)
        self.artist_tags_2 = QtWidgets.QGroupBox(self.scrollAreaWidgetContents_8)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.artist_tags_2.sizePolicy().hasHeightForWidth())
        self.artist_tags_2.setSizePolicy(sizePolicy)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(236, 255, 171))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 194, 158))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(198, 198, 148))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 194, 158))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 164))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 194, 158))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 194, 158))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.artist_tags_2.setPalette(palette)
        self.artist_tags_2.setFocusPolicy(QtCore.Qt.NoFocus)
        self.artist_tags_2.setAutoFillBackground(True)
        self.artist_tags_2.setStyleSheet("font: 75 8pt \"MS Shell Dlg 2\";")
        self.artist_tags_2.setObjectName("artist_tags_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.artist_tags_2)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.textBrowser = QtWidgets.QTextBrowser(self.artist_tags_2)
        self.textBrowser.setStyleSheet("background-color: rgb(255, 232, 184);")
        self.textBrowser.setObjectName("textBrowser")
        self.verticalLayout_3.addWidget(self.textBrowser)
        self.frame = QtWidgets.QFrame(self.artist_tags_2)
        self.frame.setObjectName("frame")
        self._14 = QtWidgets.QHBoxLayout(self.frame)
        self._14.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self._14.setContentsMargins(1, 1, 1, 1)
        self._14.setSpacing(6)
        self._14.setObjectName("_14")
        self.toolButton_1 = QtWidgets.QToolButton(self.frame)
        self.toolButton_1.setStyleSheet("")
        self.toolButton_1.setCheckable(True)
        self.toolButton_1.setObjectName("toolButton_1")
        self._14.addWidget(self.toolButton_1)
        self.cea_source_1 = QtWidgets.QComboBox(self.frame)
        self.cea_source_1.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cea_source_1.sizePolicy().hasHeightForWidth())
        self.cea_source_1.setSizePolicy(sizePolicy)
        self.cea_source_1.setMouseTracking(False)
        self.cea_source_1.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.cea_source_1.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_source_1.setEditable(True)
        self.cea_source_1.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContents)
        self.cea_source_1.setObjectName("cea_source_1")
        self.cea_source_1.addItem("")
        self.cea_source_1.setItemText(0, "")
        self.cea_source_1.addItem("")
        self.cea_source_1.addItem("")
        self.cea_source_1.addItem("")
        self.cea_source_1.addItem("")
        self.cea_source_1.addItem("")
        self.cea_source_1.addItem("")
        self.cea_source_1.addItem("")
        self.cea_source_1.addItem("")
        self.cea_source_1.addItem("")
        self.cea_source_1.addItem("")
        self.cea_source_1.addItem("")
        self.cea_source_1.addItem("")
        self.cea_source_1.addItem("")
        self.cea_source_1.addItem("")
        self.cea_source_1.addItem("")
        self.cea_source_1.addItem("")
        self.cea_source_1.addItem("")
        self.cea_source_1.addItem("")
        self.cea_source_1.addItem("")
        self.cea_source_1.addItem("")
        self._14.addWidget(self.cea_source_1)
        self.label_21 = QtWidgets.QLabel(self.frame)
        self.label_21.setObjectName("label_21")
        self._14.addWidget(self.label_21)
        self.cea_tag_1 = QtWidgets.QLineEdit(self.frame)
        self.cea_tag_1.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_tag_1.setObjectName("cea_tag_1")
        self._14.addWidget(self.cea_tag_1)
        self.cea_cond_1 = QtWidgets.QCheckBox(self.frame)
        self.cea_cond_1.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.cea_cond_1.setObjectName("cea_cond_1")
        self._14.addWidget(self.cea_cond_1)
        self.verticalLayout_3.addWidget(self.frame)
        self._15 = QtWidgets.QHBoxLayout()
        self._15.setContentsMargins(0, 0, 0, 0)
        self._15.setSpacing(6)
        self._15.setObjectName("_15")
        self.toolButton_2 = QtWidgets.QToolButton(self.artist_tags_2)
        self.toolButton_2.setStyleSheet("")
        self.toolButton_2.setCheckable(True)
        self.toolButton_2.setObjectName("toolButton_2")
        self._15.addWidget(self.toolButton_2)
        self.cea_source_2 = QtWidgets.QComboBox(self.artist_tags_2)
        self.cea_source_2.setEnabled(False)
        self.cea_source_2.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_source_2.setEditable(True)
        self.cea_source_2.setObjectName("cea_source_2")
        self.cea_source_2.addItem("")
        self.cea_source_2.setItemText(0, "")
        self.cea_source_2.addItem("")
        self.cea_source_2.addItem("")
        self.cea_source_2.addItem("")
        self.cea_source_2.addItem("")
        self.cea_source_2.addItem("")
        self.cea_source_2.addItem("")
        self.cea_source_2.addItem("")
        self.cea_source_2.addItem("")
        self.cea_source_2.addItem("")
        self.cea_source_2.addItem("")
        self.cea_source_2.addItem("")
        self.cea_source_2.addItem("")
        self.cea_source_2.addItem("")
        self.cea_source_2.addItem("")
        self.cea_source_2.addItem("")
        self.cea_source_2.addItem("")
        self.cea_source_2.addItem("")
        self.cea_source_2.addItem("")
        self.cea_source_2.addItem("")
        self.cea_source_2.addItem("")
        self._15.addWidget(self.cea_source_2)
        self.label_23 = QtWidgets.QLabel(self.artist_tags_2)
        self.label_23.setObjectName("label_23")
        self._15.addWidget(self.label_23)
        self.cea_tag_2 = QtWidgets.QLineEdit(self.artist_tags_2)
        self.cea_tag_2.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_tag_2.setObjectName("cea_tag_2")
        self._15.addWidget(self.cea_tag_2)
        self.cea_cond_2 = QtWidgets.QCheckBox(self.artist_tags_2)
        self.cea_cond_2.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.cea_cond_2.setObjectName("cea_cond_2")
        self._15.addWidget(self.cea_cond_2)
        self.verticalLayout_3.addLayout(self._15)
        self._16 = QtWidgets.QHBoxLayout()
        self._16.setContentsMargins(0, 0, 0, 0)
        self._16.setSpacing(6)
        self._16.setObjectName("_16")
        self.toolButton_3 = QtWidgets.QToolButton(self.artist_tags_2)
        self.toolButton_3.setStyleSheet("")
        self.toolButton_3.setCheckable(True)
        self.toolButton_3.setObjectName("toolButton_3")
        self._16.addWidget(self.toolButton_3)
        self.cea_source_3 = QtWidgets.QComboBox(self.artist_tags_2)
        self.cea_source_3.setEnabled(False)
        self.cea_source_3.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_source_3.setEditable(True)
        self.cea_source_3.setObjectName("cea_source_3")
        self.cea_source_3.addItem("")
        self.cea_source_3.setItemText(0, "")
        self.cea_source_3.addItem("")
        self.cea_source_3.addItem("")
        self.cea_source_3.addItem("")
        self.cea_source_3.addItem("")
        self.cea_source_3.addItem("")
        self.cea_source_3.addItem("")
        self.cea_source_3.addItem("")
        self.cea_source_3.addItem("")
        self.cea_source_3.addItem("")
        self.cea_source_3.addItem("")
        self.cea_source_3.addItem("")
        self.cea_source_3.addItem("")
        self.cea_source_3.addItem("")
        self.cea_source_3.addItem("")
        self.cea_source_3.addItem("")
        self.cea_source_3.addItem("")
        self.cea_source_3.addItem("")
        self.cea_source_3.addItem("")
        self.cea_source_3.addItem("")
        self.cea_source_3.addItem("")
        self._16.addWidget(self.cea_source_3)
        self.label_25 = QtWidgets.QLabel(self.artist_tags_2)
        self.label_25.setObjectName("label_25")
        self._16.addWidget(self.label_25)
        self.cea_tag_3 = QtWidgets.QLineEdit(self.artist_tags_2)
        self.cea_tag_3.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_tag_3.setObjectName("cea_tag_3")
        self._16.addWidget(self.cea_tag_3)
        self.cea_cond_3 = QtWidgets.QCheckBox(self.artist_tags_2)
        self.cea_cond_3.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.cea_cond_3.setObjectName("cea_cond_3")
        self._16.addWidget(self.cea_cond_3)
        self.verticalLayout_3.addLayout(self._16)
        self._17 = QtWidgets.QHBoxLayout()
        self._17.setContentsMargins(0, 0, 0, 0)
        self._17.setSpacing(6)
        self._17.setObjectName("_17")
        self.toolButton_4 = QtWidgets.QToolButton(self.artist_tags_2)
        self.toolButton_4.setStyleSheet("")
        self.toolButton_4.setCheckable(True)
        self.toolButton_4.setObjectName("toolButton_4")
        self._17.addWidget(self.toolButton_4)
        self.cea_source_4 = QtWidgets.QComboBox(self.artist_tags_2)
        self.cea_source_4.setEnabled(False)
        self.cea_source_4.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_source_4.setEditable(True)
        self.cea_source_4.setObjectName("cea_source_4")
        self.cea_source_4.addItem("")
        self.cea_source_4.setItemText(0, "")
        self.cea_source_4.addItem("")
        self.cea_source_4.addItem("")
        self.cea_source_4.addItem("")
        self.cea_source_4.addItem("")
        self.cea_source_4.addItem("")
        self.cea_source_4.addItem("")
        self.cea_source_4.addItem("")
        self.cea_source_4.addItem("")
        self.cea_source_4.addItem("")
        self.cea_source_4.addItem("")
        self.cea_source_4.addItem("")
        self.cea_source_4.addItem("")
        self.cea_source_4.addItem("")
        self.cea_source_4.addItem("")
        self.cea_source_4.addItem("")
        self.cea_source_4.addItem("")
        self.cea_source_4.addItem("")
        self.cea_source_4.addItem("")
        self.cea_source_4.addItem("")
        self.cea_source_4.addItem("")
        self._17.addWidget(self.cea_source_4)
        self.label_27 = QtWidgets.QLabel(self.artist_tags_2)
        self.label_27.setObjectName("label_27")
        self._17.addWidget(self.label_27)
        self.cea_tag_4 = QtWidgets.QLineEdit(self.artist_tags_2)
        self.cea_tag_4.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_tag_4.setObjectName("cea_tag_4")
        self._17.addWidget(self.cea_tag_4)
        self.cea_cond_4 = QtWidgets.QCheckBox(self.artist_tags_2)
        self.cea_cond_4.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.cea_cond_4.setObjectName("cea_cond_4")
        self._17.addWidget(self.cea_cond_4)
        self.verticalLayout_3.addLayout(self._17)
        self._18 = QtWidgets.QHBoxLayout()
        self._18.setContentsMargins(0, 0, 0, 0)
        self._18.setSpacing(6)
        self._18.setObjectName("_18")
        self.toolButton_5 = QtWidgets.QToolButton(self.artist_tags_2)
        self.toolButton_5.setStyleSheet("")
        self.toolButton_5.setCheckable(True)
        self.toolButton_5.setObjectName("toolButton_5")
        self._18.addWidget(self.toolButton_5)
        self.cea_source_5 = QtWidgets.QComboBox(self.artist_tags_2)
        self.cea_source_5.setEnabled(False)
        self.cea_source_5.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_source_5.setEditable(True)
        self.cea_source_5.setObjectName("cea_source_5")
        self.cea_source_5.addItem("")
        self.cea_source_5.setItemText(0, "")
        self.cea_source_5.addItem("")
        self.cea_source_5.addItem("")
        self.cea_source_5.addItem("")
        self.cea_source_5.addItem("")
        self.cea_source_5.addItem("")
        self.cea_source_5.addItem("")
        self.cea_source_5.addItem("")
        self.cea_source_5.addItem("")
        self.cea_source_5.addItem("")
        self.cea_source_5.addItem("")
        self.cea_source_5.addItem("")
        self.cea_source_5.addItem("")
        self.cea_source_5.addItem("")
        self.cea_source_5.addItem("")
        self.cea_source_5.addItem("")
        self.cea_source_5.addItem("")
        self.cea_source_5.addItem("")
        self.cea_source_5.addItem("")
        self.cea_source_5.addItem("")
        self.cea_source_5.addItem("")
        self._18.addWidget(self.cea_source_5)
        self.label_29 = QtWidgets.QLabel(self.artist_tags_2)
        self.label_29.setObjectName("label_29")
        self._18.addWidget(self.label_29)
        self.cea_tag_5 = QtWidgets.QLineEdit(self.artist_tags_2)
        self.cea_tag_5.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_tag_5.setObjectName("cea_tag_5")
        self._18.addWidget(self.cea_tag_5)
        self.cea_cond_5 = QtWidgets.QCheckBox(self.artist_tags_2)
        self.cea_cond_5.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.cea_cond_5.setObjectName("cea_cond_5")
        self._18.addWidget(self.cea_cond_5)
        self.verticalLayout_3.addLayout(self._18)
        self._19 = QtWidgets.QHBoxLayout()
        self._19.setContentsMargins(0, 0, 0, 0)
        self._19.setSpacing(6)
        self._19.setObjectName("_19")
        self.toolButton_6 = QtWidgets.QToolButton(self.artist_tags_2)
        self.toolButton_6.setStyleSheet("")
        self.toolButton_6.setCheckable(True)
        self.toolButton_6.setObjectName("toolButton_6")
        self._19.addWidget(self.toolButton_6)
        self.cea_source_6 = QtWidgets.QComboBox(self.artist_tags_2)
        self.cea_source_6.setEnabled(False)
        self.cea_source_6.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_source_6.setEditable(True)
        self.cea_source_6.setObjectName("cea_source_6")
        self.cea_source_6.addItem("")
        self.cea_source_6.setItemText(0, "")
        self.cea_source_6.addItem("")
        self.cea_source_6.addItem("")
        self.cea_source_6.addItem("")
        self.cea_source_6.addItem("")
        self.cea_source_6.addItem("")
        self.cea_source_6.addItem("")
        self.cea_source_6.addItem("")
        self.cea_source_6.addItem("")
        self.cea_source_6.addItem("")
        self.cea_source_6.addItem("")
        self.cea_source_6.addItem("")
        self.cea_source_6.addItem("")
        self.cea_source_6.addItem("")
        self.cea_source_6.addItem("")
        self.cea_source_6.addItem("")
        self.cea_source_6.addItem("")
        self.cea_source_6.addItem("")
        self.cea_source_6.addItem("")
        self.cea_source_6.addItem("")
        self.cea_source_6.addItem("")
        self._19.addWidget(self.cea_source_6)
        self.label_31 = QtWidgets.QLabel(self.artist_tags_2)
        self.label_31.setObjectName("label_31")
        self._19.addWidget(self.label_31)
        self.cea_tag_6 = QtWidgets.QLineEdit(self.artist_tags_2)
        self.cea_tag_6.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_tag_6.setObjectName("cea_tag_6")
        self._19.addWidget(self.cea_tag_6)
        self.cea_cond_6 = QtWidgets.QCheckBox(self.artist_tags_2)
        self.cea_cond_6.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.cea_cond_6.setObjectName("cea_cond_6")
        self._19.addWidget(self.cea_cond_6)
        self.verticalLayout_3.addLayout(self._19)
        self._20 = QtWidgets.QHBoxLayout()
        self._20.setContentsMargins(0, 0, 0, 0)
        self._20.setSpacing(6)
        self._20.setObjectName("_20")
        self.toolButton_7 = QtWidgets.QToolButton(self.artist_tags_2)
        self.toolButton_7.setStyleSheet("")
        self.toolButton_7.setCheckable(True)
        self.toolButton_7.setObjectName("toolButton_7")
        self._20.addWidget(self.toolButton_7)
        self.cea_source_7 = QtWidgets.QComboBox(self.artist_tags_2)
        self.cea_source_7.setEnabled(False)
        self.cea_source_7.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_source_7.setEditable(True)
        self.cea_source_7.setObjectName("cea_source_7")
        self.cea_source_7.addItem("")
        self.cea_source_7.setItemText(0, "")
        self.cea_source_7.addItem("")
        self.cea_source_7.addItem("")
        self.cea_source_7.addItem("")
        self.cea_source_7.addItem("")
        self.cea_source_7.addItem("")
        self.cea_source_7.addItem("")
        self.cea_source_7.addItem("")
        self.cea_source_7.addItem("")
        self.cea_source_7.addItem("")
        self.cea_source_7.addItem("")
        self.cea_source_7.addItem("")
        self.cea_source_7.addItem("")
        self.cea_source_7.addItem("")
        self.cea_source_7.addItem("")
        self.cea_source_7.addItem("")
        self.cea_source_7.addItem("")
        self.cea_source_7.addItem("")
        self.cea_source_7.addItem("")
        self.cea_source_7.addItem("")
        self.cea_source_7.addItem("")
        self._20.addWidget(self.cea_source_7)
        self.label_33 = QtWidgets.QLabel(self.artist_tags_2)
        self.label_33.setObjectName("label_33")
        self._20.addWidget(self.label_33)
        self.cea_tag_7 = QtWidgets.QLineEdit(self.artist_tags_2)
        self.cea_tag_7.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_tag_7.setObjectName("cea_tag_7")
        self._20.addWidget(self.cea_tag_7)
        self.cea_cond_7 = QtWidgets.QCheckBox(self.artist_tags_2)
        self.cea_cond_7.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.cea_cond_7.setObjectName("cea_cond_7")
        self._20.addWidget(self.cea_cond_7)
        self.verticalLayout_3.addLayout(self._20)
        self._21 = QtWidgets.QHBoxLayout()
        self._21.setContentsMargins(0, 0, 0, 0)
        self._21.setSpacing(6)
        self._21.setObjectName("_21")
        self.toolButton_8 = QtWidgets.QToolButton(self.artist_tags_2)
        self.toolButton_8.setStyleSheet("")
        self.toolButton_8.setCheckable(True)
        self.toolButton_8.setObjectName("toolButton_8")
        self._21.addWidget(self.toolButton_8)
        self.cea_source_8 = QtWidgets.QComboBox(self.artist_tags_2)
        self.cea_source_8.setEnabled(False)
        self.cea_source_8.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_source_8.setEditable(True)
        self.cea_source_8.setObjectName("cea_source_8")
        self.cea_source_8.addItem("")
        self.cea_source_8.setItemText(0, "")
        self.cea_source_8.addItem("")
        self.cea_source_8.addItem("")
        self.cea_source_8.addItem("")
        self.cea_source_8.addItem("")
        self.cea_source_8.addItem("")
        self.cea_source_8.addItem("")
        self.cea_source_8.addItem("")
        self.cea_source_8.addItem("")
        self.cea_source_8.addItem("")
        self.cea_source_8.addItem("")
        self.cea_source_8.addItem("")
        self.cea_source_8.addItem("")
        self.cea_source_8.addItem("")
        self.cea_source_8.addItem("")
        self.cea_source_8.addItem("")
        self.cea_source_8.addItem("")
        self.cea_source_8.addItem("")
        self.cea_source_8.addItem("")
        self.cea_source_8.addItem("")
        self.cea_source_8.addItem("")
        self._21.addWidget(self.cea_source_8)
        self.label_35 = QtWidgets.QLabel(self.artist_tags_2)
        self.label_35.setObjectName("label_35")
        self._21.addWidget(self.label_35)
        self.cea_tag_8 = QtWidgets.QLineEdit(self.artist_tags_2)
        self.cea_tag_8.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_tag_8.setObjectName("cea_tag_8")
        self._21.addWidget(self.cea_tag_8)
        self.cea_cond_8 = QtWidgets.QCheckBox(self.artist_tags_2)
        self.cea_cond_8.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.cea_cond_8.setObjectName("cea_cond_8")
        self._21.addWidget(self.cea_cond_8)
        self.verticalLayout_3.addLayout(self._21)
        self._30 = QtWidgets.QHBoxLayout()
        self._30.setContentsMargins(0, 0, 0, 0)
        self._30.setSpacing(6)
        self._30.setObjectName("_30")
        self.toolButton_9 = QtWidgets.QToolButton(self.artist_tags_2)
        self.toolButton_9.setStyleSheet("")
        self.toolButton_9.setCheckable(True)
        self.toolButton_9.setObjectName("toolButton_9")
        self._30.addWidget(self.toolButton_9)
        self.cea_source_9 = QtWidgets.QComboBox(self.artist_tags_2)
        self.cea_source_9.setEnabled(False)
        self.cea_source_9.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_source_9.setEditable(True)
        self.cea_source_9.setObjectName("cea_source_9")
        self.cea_source_9.addItem("")
        self.cea_source_9.setItemText(0, "")
        self.cea_source_9.addItem("")
        self.cea_source_9.addItem("")
        self.cea_source_9.addItem("")
        self.cea_source_9.addItem("")
        self.cea_source_9.addItem("")
        self.cea_source_9.addItem("")
        self.cea_source_9.addItem("")
        self.cea_source_9.addItem("")
        self.cea_source_9.addItem("")
        self.cea_source_9.addItem("")
        self.cea_source_9.addItem("")
        self.cea_source_9.addItem("")
        self.cea_source_9.addItem("")
        self.cea_source_9.addItem("")
        self.cea_source_9.addItem("")
        self.cea_source_9.addItem("")
        self.cea_source_9.addItem("")
        self.cea_source_9.addItem("")
        self.cea_source_9.addItem("")
        self.cea_source_9.addItem("")
        self._30.addWidget(self.cea_source_9)
        self.label_53 = QtWidgets.QLabel(self.artist_tags_2)
        self.label_53.setObjectName("label_53")
        self._30.addWidget(self.label_53)
        self.cea_tag_9 = QtWidgets.QLineEdit(self.artist_tags_2)
        self.cea_tag_9.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_tag_9.setObjectName("cea_tag_9")
        self._30.addWidget(self.cea_tag_9)
        self.cea_cond_9 = QtWidgets.QCheckBox(self.artist_tags_2)
        self.cea_cond_9.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.cea_cond_9.setObjectName("cea_cond_9")
        self._30.addWidget(self.cea_cond_9)
        self.verticalLayout_3.addLayout(self._30)
        self._31 = QtWidgets.QHBoxLayout()
        self._31.setContentsMargins(0, 0, 0, 0)
        self._31.setSpacing(6)
        self._31.setObjectName("_31")
        self.toolButton_10 = QtWidgets.QToolButton(self.artist_tags_2)
        self.toolButton_10.setStyleSheet("")
        self.toolButton_10.setCheckable(True)
        self.toolButton_10.setObjectName("toolButton_10")
        self._31.addWidget(self.toolButton_10)
        self.cea_source_10 = QtWidgets.QComboBox(self.artist_tags_2)
        self.cea_source_10.setEnabled(False)
        self.cea_source_10.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_source_10.setEditable(True)
        self.cea_source_10.setObjectName("cea_source_10")
        self.cea_source_10.addItem("")
        self.cea_source_10.setItemText(0, "")
        self.cea_source_10.addItem("")
        self.cea_source_10.addItem("")
        self.cea_source_10.addItem("")
        self.cea_source_10.addItem("")
        self.cea_source_10.addItem("")
        self.cea_source_10.addItem("")
        self.cea_source_10.addItem("")
        self.cea_source_10.addItem("")
        self.cea_source_10.addItem("")
        self.cea_source_10.addItem("")
        self.cea_source_10.addItem("")
        self.cea_source_10.addItem("")
        self.cea_source_10.addItem("")
        self.cea_source_10.addItem("")
        self.cea_source_10.addItem("")
        self.cea_source_10.addItem("")
        self.cea_source_10.addItem("")
        self.cea_source_10.addItem("")
        self.cea_source_10.addItem("")
        self.cea_source_10.addItem("")
        self._31.addWidget(self.cea_source_10)
        self.label_55 = QtWidgets.QLabel(self.artist_tags_2)
        self.label_55.setObjectName("label_55")
        self._31.addWidget(self.label_55)
        self.cea_tag_10 = QtWidgets.QLineEdit(self.artist_tags_2)
        self.cea_tag_10.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_tag_10.setObjectName("cea_tag_10")
        self._31.addWidget(self.cea_tag_10)
        self.cea_cond_10 = QtWidgets.QCheckBox(self.artist_tags_2)
        self.cea_cond_10.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.cea_cond_10.setObjectName("cea_cond_10")
        self._31.addWidget(self.cea_cond_10)
        self.verticalLayout_3.addLayout(self._31)
        self._32 = QtWidgets.QHBoxLayout()
        self._32.setContentsMargins(0, 0, 0, 0)
        self._32.setSpacing(6)
        self._32.setObjectName("_32")
        self.toolButton_11 = QtWidgets.QToolButton(self.artist_tags_2)
        self.toolButton_11.setStyleSheet("")
        self.toolButton_11.setCheckable(True)
        self.toolButton_11.setObjectName("toolButton_11")
        self._32.addWidget(self.toolButton_11)
        self.cea_source_11 = QtWidgets.QComboBox(self.artist_tags_2)
        self.cea_source_11.setEnabled(False)
        self.cea_source_11.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_source_11.setEditable(True)
        self.cea_source_11.setObjectName("cea_source_11")
        self.cea_source_11.addItem("")
        self.cea_source_11.setItemText(0, "")
        self.cea_source_11.addItem("")
        self.cea_source_11.addItem("")
        self.cea_source_11.addItem("")
        self.cea_source_11.addItem("")
        self.cea_source_11.addItem("")
        self.cea_source_11.addItem("")
        self.cea_source_11.addItem("")
        self.cea_source_11.addItem("")
        self.cea_source_11.addItem("")
        self.cea_source_11.addItem("")
        self.cea_source_11.addItem("")
        self.cea_source_11.addItem("")
        self.cea_source_11.addItem("")
        self.cea_source_11.addItem("")
        self.cea_source_11.addItem("")
        self.cea_source_11.addItem("")
        self.cea_source_11.addItem("")
        self.cea_source_11.addItem("")
        self.cea_source_11.addItem("")
        self.cea_source_11.addItem("")
        self._32.addWidget(self.cea_source_11)
        self.label_57 = QtWidgets.QLabel(self.artist_tags_2)
        self.label_57.setObjectName("label_57")
        self._32.addWidget(self.label_57)
        self.cea_tag_11 = QtWidgets.QLineEdit(self.artist_tags_2)
        self.cea_tag_11.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_tag_11.setObjectName("cea_tag_11")
        self._32.addWidget(self.cea_tag_11)
        self.cea_cond_11 = QtWidgets.QCheckBox(self.artist_tags_2)
        self.cea_cond_11.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.cea_cond_11.setObjectName("cea_cond_11")
        self._32.addWidget(self.cea_cond_11)
        self.verticalLayout_3.addLayout(self._32)
        self._33 = QtWidgets.QHBoxLayout()
        self._33.setContentsMargins(0, 0, 0, 0)
        self._33.setSpacing(6)
        self._33.setObjectName("_33")
        self.toolButton_12 = QtWidgets.QToolButton(self.artist_tags_2)
        self.toolButton_12.setStyleSheet("")
        self.toolButton_12.setCheckable(True)
        self.toolButton_12.setObjectName("toolButton_12")
        self._33.addWidget(self.toolButton_12)
        self.cea_source_12 = QtWidgets.QComboBox(self.artist_tags_2)
        self.cea_source_12.setEnabled(False)
        self.cea_source_12.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_source_12.setEditable(True)
        self.cea_source_12.setObjectName("cea_source_12")
        self.cea_source_12.addItem("")
        self.cea_source_12.setItemText(0, "")
        self.cea_source_12.addItem("")
        self.cea_source_12.addItem("")
        self.cea_source_12.addItem("")
        self.cea_source_12.addItem("")
        self.cea_source_12.addItem("")
        self.cea_source_12.addItem("")
        self.cea_source_12.addItem("")
        self.cea_source_12.addItem("")
        self.cea_source_12.addItem("")
        self.cea_source_12.addItem("")
        self.cea_source_12.addItem("")
        self.cea_source_12.addItem("")
        self.cea_source_12.addItem("")
        self.cea_source_12.addItem("")
        self.cea_source_12.addItem("")
        self.cea_source_12.addItem("")
        self.cea_source_12.addItem("")
        self.cea_source_12.addItem("")
        self.cea_source_12.addItem("")
        self.cea_source_12.addItem("")
        self._33.addWidget(self.cea_source_12)
        self.label_59 = QtWidgets.QLabel(self.artist_tags_2)
        self.label_59.setObjectName("label_59")
        self._33.addWidget(self.label_59)
        self.cea_tag_12 = QtWidgets.QLineEdit(self.artist_tags_2)
        self.cea_tag_12.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_tag_12.setObjectName("cea_tag_12")
        self._33.addWidget(self.cea_tag_12)
        self.cea_cond_12 = QtWidgets.QCheckBox(self.artist_tags_2)
        self.cea_cond_12.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.cea_cond_12.setObjectName("cea_cond_12")
        self._33.addWidget(self.cea_cond_12)
        self.verticalLayout_3.addLayout(self._33)
        self._34 = QtWidgets.QHBoxLayout()
        self._34.setContentsMargins(0, 0, 0, 0)
        self._34.setSpacing(6)
        self._34.setObjectName("_34")
        self.toolButton_13 = QtWidgets.QToolButton(self.artist_tags_2)
        self.toolButton_13.setStyleSheet("")
        self.toolButton_13.setCheckable(True)
        self.toolButton_13.setObjectName("toolButton_13")
        self._34.addWidget(self.toolButton_13)
        self.cea_source_13 = QtWidgets.QComboBox(self.artist_tags_2)
        self.cea_source_13.setEnabled(False)
        self.cea_source_13.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_source_13.setEditable(True)
        self.cea_source_13.setObjectName("cea_source_13")
        self.cea_source_13.addItem("")
        self.cea_source_13.setItemText(0, "")
        self.cea_source_13.addItem("")
        self.cea_source_13.addItem("")
        self.cea_source_13.addItem("")
        self.cea_source_13.addItem("")
        self.cea_source_13.addItem("")
        self.cea_source_13.addItem("")
        self.cea_source_13.addItem("")
        self.cea_source_13.addItem("")
        self.cea_source_13.addItem("")
        self.cea_source_13.addItem("")
        self.cea_source_13.addItem("")
        self.cea_source_13.addItem("")
        self.cea_source_13.addItem("")
        self.cea_source_13.addItem("")
        self.cea_source_13.addItem("")
        self.cea_source_13.addItem("")
        self.cea_source_13.addItem("")
        self.cea_source_13.addItem("")
        self.cea_source_13.addItem("")
        self.cea_source_13.addItem("")
        self._34.addWidget(self.cea_source_13)
        self.label_61 = QtWidgets.QLabel(self.artist_tags_2)
        self.label_61.setObjectName("label_61")
        self._34.addWidget(self.label_61)
        self.cea_tag_13 = QtWidgets.QLineEdit(self.artist_tags_2)
        self.cea_tag_13.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_tag_13.setObjectName("cea_tag_13")
        self._34.addWidget(self.cea_tag_13)
        self.cea_cond_13 = QtWidgets.QCheckBox(self.artist_tags_2)
        self.cea_cond_13.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.cea_cond_13.setObjectName("cea_cond_13")
        self._34.addWidget(self.cea_cond_13)
        self.verticalLayout_3.addLayout(self._34)
        self._35 = QtWidgets.QHBoxLayout()
        self._35.setContentsMargins(0, 0, 0, 0)
        self._35.setSpacing(6)
        self._35.setObjectName("_35")
        self.toolButton_14 = QtWidgets.QToolButton(self.artist_tags_2)
        self.toolButton_14.setStyleSheet("")
        self.toolButton_14.setCheckable(True)
        self.toolButton_14.setObjectName("toolButton_14")
        self._35.addWidget(self.toolButton_14)
        self.cea_source_14 = QtWidgets.QComboBox(self.artist_tags_2)
        self.cea_source_14.setEnabled(False)
        self.cea_source_14.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_source_14.setEditable(True)
        self.cea_source_14.setObjectName("cea_source_14")
        self.cea_source_14.addItem("")
        self.cea_source_14.setItemText(0, "")
        self.cea_source_14.addItem("")
        self.cea_source_14.addItem("")
        self.cea_source_14.addItem("")
        self.cea_source_14.addItem("")
        self.cea_source_14.addItem("")
        self.cea_source_14.addItem("")
        self.cea_source_14.addItem("")
        self.cea_source_14.addItem("")
        self.cea_source_14.addItem("")
        self.cea_source_14.addItem("")
        self.cea_source_14.addItem("")
        self.cea_source_14.addItem("")
        self.cea_source_14.addItem("")
        self.cea_source_14.addItem("")
        self.cea_source_14.addItem("")
        self.cea_source_14.addItem("")
        self.cea_source_14.addItem("")
        self.cea_source_14.addItem("")
        self.cea_source_14.addItem("")
        self.cea_source_14.addItem("")
        self._35.addWidget(self.cea_source_14)
        self.label_63 = QtWidgets.QLabel(self.artist_tags_2)
        self.label_63.setObjectName("label_63")
        self._35.addWidget(self.label_63)
        self.cea_tag_14 = QtWidgets.QLineEdit(self.artist_tags_2)
        self.cea_tag_14.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_tag_14.setObjectName("cea_tag_14")
        self._35.addWidget(self.cea_tag_14)
        self.cea_cond_14 = QtWidgets.QCheckBox(self.artist_tags_2)
        self.cea_cond_14.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.cea_cond_14.setObjectName("cea_cond_14")
        self._35.addWidget(self.cea_cond_14)
        self.verticalLayout_3.addLayout(self._35)
        self._36 = QtWidgets.QHBoxLayout()
        self._36.setContentsMargins(0, 0, 0, 0)
        self._36.setSpacing(6)
        self._36.setObjectName("_36")
        self.toolButton_15 = QtWidgets.QToolButton(self.artist_tags_2)
        self.toolButton_15.setStyleSheet("")
        self.toolButton_15.setCheckable(True)
        self.toolButton_15.setObjectName("toolButton_15")
        self._36.addWidget(self.toolButton_15)
        self.cea_source_15 = QtWidgets.QComboBox(self.artist_tags_2)
        self.cea_source_15.setEnabled(False)
        self.cea_source_15.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_source_15.setEditable(True)
        self.cea_source_15.setObjectName("cea_source_15")
        self.cea_source_15.addItem("")
        self.cea_source_15.setItemText(0, "")
        self.cea_source_15.addItem("")
        self.cea_source_15.addItem("")
        self.cea_source_15.addItem("")
        self.cea_source_15.addItem("")
        self.cea_source_15.addItem("")
        self.cea_source_15.addItem("")
        self.cea_source_15.addItem("")
        self.cea_source_15.addItem("")
        self.cea_source_15.addItem("")
        self.cea_source_15.addItem("")
        self.cea_source_15.addItem("")
        self.cea_source_15.addItem("")
        self.cea_source_15.addItem("")
        self.cea_source_15.addItem("")
        self.cea_source_15.addItem("")
        self.cea_source_15.addItem("")
        self.cea_source_15.addItem("")
        self.cea_source_15.addItem("")
        self.cea_source_15.addItem("")
        self.cea_source_15.addItem("")
        self._36.addWidget(self.cea_source_15)
        self.label_65 = QtWidgets.QLabel(self.artist_tags_2)
        self.label_65.setObjectName("label_65")
        self._36.addWidget(self.label_65)
        self.cea_tag_15 = QtWidgets.QLineEdit(self.artist_tags_2)
        self.cea_tag_15.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_tag_15.setObjectName("cea_tag_15")
        self._36.addWidget(self.cea_tag_15)
        self.cea_cond_15 = QtWidgets.QCheckBox(self.artist_tags_2)
        self.cea_cond_15.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.cea_cond_15.setObjectName("cea_cond_15")
        self._36.addWidget(self.cea_cond_15)
        self.verticalLayout_3.addLayout(self._36)
        self._37 = QtWidgets.QHBoxLayout()
        self._37.setContentsMargins(0, 0, 0, 0)
        self._37.setSpacing(6)
        self._37.setObjectName("_37")
        self.toolButton_16 = QtWidgets.QToolButton(self.artist_tags_2)
        self.toolButton_16.setStyleSheet("")
        self.toolButton_16.setCheckable(True)
        self.toolButton_16.setObjectName("toolButton_16")
        self._37.addWidget(self.toolButton_16)
        self.cea_source_16 = QtWidgets.QComboBox(self.artist_tags_2)
        self.cea_source_16.setEnabled(False)
        self.cea_source_16.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_source_16.setEditable(True)
        self.cea_source_16.setObjectName("cea_source_16")
        self.cea_source_16.addItem("")
        self.cea_source_16.setItemText(0, "")
        self.cea_source_16.addItem("")
        self.cea_source_16.addItem("")
        self.cea_source_16.addItem("")
        self.cea_source_16.addItem("")
        self.cea_source_16.addItem("")
        self.cea_source_16.addItem("")
        self.cea_source_16.addItem("")
        self.cea_source_16.addItem("")
        self.cea_source_16.addItem("")
        self.cea_source_16.addItem("")
        self.cea_source_16.addItem("")
        self.cea_source_16.addItem("")
        self.cea_source_16.addItem("")
        self.cea_source_16.addItem("")
        self.cea_source_16.addItem("")
        self.cea_source_16.addItem("")
        self.cea_source_16.addItem("")
        self.cea_source_16.addItem("")
        self.cea_source_16.addItem("")
        self.cea_source_16.addItem("")
        self._37.addWidget(self.cea_source_16)
        self.label_67 = QtWidgets.QLabel(self.artist_tags_2)
        self.label_67.setObjectName("label_67")
        self._37.addWidget(self.label_67)
        self.cea_tag_16 = QtWidgets.QLineEdit(self.artist_tags_2)
        self.cea_tag_16.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cea_tag_16.setObjectName("cea_tag_16")
        self._37.addWidget(self.cea_tag_16)
        self.cea_cond_16 = QtWidgets.QCheckBox(self.artist_tags_2)
        self.cea_cond_16.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.cea_cond_16.setObjectName("cea_cond_16")
        self._37.addWidget(self.cea_cond_16)
        self.verticalLayout_3.addLayout(self._37)
        self._38 = QtWidgets.QHBoxLayout()
        self._38.setContentsMargins(0, 0, 0, 0)
        self._38.setSpacing(6)
        self._38.setObjectName("_38")
        self.label_42 = QtWidgets.QLabel(self.artist_tags_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_42.sizePolicy().hasHeightForWidth())
        self.label_42.setSizePolicy(sizePolicy)
        self.label_42.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_42.setLineWidth(1)
        self.label_42.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_42.setObjectName("label_42")
        self._38.addWidget(self.label_42)
        self.label_17 = QtWidgets.QLabel(self.artist_tags_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_17.sizePolicy().hasHeightForWidth())
        self.label_17.setSizePolicy(sizePolicy)
        self.label_17.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label_17.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_17.setObjectName("label_17")
        self._38.addWidget(self.label_17)
        self.verticalLayout_3.addLayout(self._38)
        self.cea_tag_sort = QtWidgets.QCheckBox(self.artist_tags_2)
        self.cea_tag_sort.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.cea_tag_sort.setObjectName("cea_tag_sort")
        self.verticalLayout_3.addWidget(self.cea_tag_sort)
        self.verticalLayout_33.addWidget(self.artist_tags_2)
        self.scrollArea_4.setWidget(self.scrollAreaWidgetContents_8)
        self.verticalLayout_28.addWidget(self.scrollArea_4)
        self.tabWidget.addTab(self.Tag_mapping, "")
        self.Works = QtWidgets.QWidget()
        self.Works.setObjectName("Works")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.Works)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.scrollArea_3 = QtWidgets.QScrollArea(self.Works)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scrollArea_3.sizePolicy().hasHeightForWidth())
        self.scrollArea_3.setSizePolicy(sizePolicy)
        self.scrollArea_3.setWidgetResizable(True)
        self.scrollArea_3.setObjectName("scrollArea_3")
        self.scrollAreaWidgetContents_3 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_3.setGeometry(QtCore.QRect(0, 0, 1087, 1012))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scrollAreaWidgetContents_3.sizePolicy().hasHeightForWidth())
        self.scrollAreaWidgetContents_3.setSizePolicy(sizePolicy)
        self.scrollAreaWidgetContents_3.setObjectName("scrollAreaWidgetContents_3")
        self.verticalLayout_25 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_3)
        self.verticalLayout_25.setObjectName("verticalLayout_25")
        self.frame_2 = QtWidgets.QFrame(self.scrollAreaWidgetContents_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_2.sizePolicy().hasHeightForWidth())
        self.frame_2.setSizePolicy(sizePolicy)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(236, 255, 171))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(236, 255, 171))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(236, 255, 171))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(236, 255, 171))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.frame_2.setPalette(palette)
        self.frame_2.setAutoFillBackground(True)
        self.frame_2.setStyleSheet("")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_2)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.use_cwp = QtWidgets.QCheckBox(self.frame_2)
        self.use_cwp.setObjectName("use_cwp")
        self.horizontalLayout_3.addWidget(self.use_cwp)
        self.cwp_collections = QtWidgets.QCheckBox(self.frame_2)
        self.cwp_collections.setObjectName("cwp_collections")
        self.horizontalLayout_3.addWidget(self.cwp_collections)
        self.use_cache = QtWidgets.QCheckBox(self.frame_2)
        self.use_cache.setObjectName("use_cache")
        self.horizontalLayout_3.addWidget(self.use_cache)
        self.verticalLayout_25.addWidget(self.frame_2)
        self.Style = QtWidgets.QGroupBox(self.scrollAreaWidgetContents_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Style.sizePolicy().hasHeightForWidth())
        self.Style.setSizePolicy(sizePolicy)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(205, 230, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(205, 230, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(205, 230, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(205, 230, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.Style.setPalette(palette)
        self.Style.setAutoFillBackground(True)
        self.Style.setStyleSheet("")
        self.Style.setObjectName("Style")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.Style)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.groupBox_4 = QtWidgets.QGroupBox(self.Style)
        self.groupBox_4.setObjectName("groupBox_4")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.groupBox_4)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.cwp_titles = QtWidgets.QRadioButton(self.groupBox_4)
        self.cwp_titles.setObjectName("cwp_titles")
        self.verticalLayout_11.addWidget(self.cwp_titles)
        self.cwp_works = QtWidgets.QRadioButton(self.groupBox_4)
        self.cwp_works.setObjectName("cwp_works")
        self.verticalLayout_11.addWidget(self.cwp_works)
        self.cwp_extended = QtWidgets.QRadioButton(self.groupBox_4)
        self.cwp_extended.setObjectName("cwp_extended")
        self.verticalLayout_11.addWidget(self.cwp_extended)
        self.horizontalLayout.addWidget(self.groupBox_4)
        self.groupBox_16 = QtWidgets.QGroupBox(self.Style)
        self.groupBox_16.setEnabled(True)
        self.groupBox_16.setObjectName("groupBox_16")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.groupBox_16)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.cwp_hierarchical_works = QtWidgets.QRadioButton(self.groupBox_16)
        self.cwp_hierarchical_works.setObjectName("cwp_hierarchical_works")
        self.verticalLayout_6.addWidget(self.cwp_hierarchical_works)
        self.cwp_level0_works = QtWidgets.QRadioButton(self.groupBox_16)
        self.cwp_level0_works.setObjectName("cwp_level0_works")
        self.verticalLayout_6.addWidget(self.cwp_level0_works)
        self.horizontalLayout.addWidget(self.groupBox_16)
        self.verticalLayout_25.addWidget(self.Style)
        self.groupBox_18 = QtWidgets.QGroupBox(self.scrollAreaWidgetContents_3)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 161, 163))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 161, 163))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 161, 163))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 161, 163))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.groupBox_18.setPalette(palette)
        self.groupBox_18.setAutoFillBackground(True)
        self.groupBox_18.setStyleSheet("")
        self.groupBox_18.setObjectName("groupBox_18")
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout(self.groupBox_18)
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.groupBox_19 = QtWidgets.QGroupBox(self.groupBox_18)
        self.groupBox_19.setObjectName("groupBox_19")
        self.verticalLayout_22 = QtWidgets.QVBoxLayout(self.groupBox_19)
        self.verticalLayout_22.setObjectName("verticalLayout_22")
        self.cwp_aliases = QtWidgets.QRadioButton(self.groupBox_19)
        self.cwp_aliases.setObjectName("cwp_aliases")
        self.verticalLayout_22.addWidget(self.cwp_aliases)
        self.cwp_no_aliases = QtWidgets.QRadioButton(self.groupBox_19)
        self.cwp_no_aliases.setObjectName("cwp_no_aliases")
        self.verticalLayout_22.addWidget(self.cwp_no_aliases)
        self.horizontalLayout_16.addWidget(self.groupBox_19)
        self.groupBox_20 = QtWidgets.QGroupBox(self.groupBox_18)
        self.groupBox_20.setStyleSheet("")
        self.groupBox_20.setObjectName("groupBox_20")
        self.horizontalLayout_17 = QtWidgets.QHBoxLayout(self.groupBox_20)
        self.horizontalLayout_17.setObjectName("horizontalLayout_17")
        self.groupBox_22 = QtWidgets.QGroupBox(self.groupBox_20)
        self.groupBox_22.setTitle("")
        self.groupBox_22.setObjectName("groupBox_22")
        self.verticalLayout_23 = QtWidgets.QVBoxLayout(self.groupBox_22)
        self.verticalLayout_23.setObjectName("verticalLayout_23")
        self.cwp_aliases_all = QtWidgets.QRadioButton(self.groupBox_22)
        self.cwp_aliases_all.setObjectName("cwp_aliases_all")
        self.verticalLayout_23.addWidget(self.cwp_aliases_all)
        self.cwp_aliases_greek = QtWidgets.QRadioButton(self.groupBox_22)
        self.cwp_aliases_greek.setObjectName("cwp_aliases_greek")
        self.verticalLayout_23.addWidget(self.cwp_aliases_greek)
        self.cwp_aliases_tagged = QtWidgets.QRadioButton(self.groupBox_22)
        self.cwp_aliases_tagged.setObjectName("cwp_aliases_tagged")
        self.verticalLayout_23.addWidget(self.cwp_aliases_tagged)
        self.horizontalLayout_17.addWidget(self.groupBox_22)
        self.groupBox_21 = QtWidgets.QGroupBox(self.groupBox_20)
        self.groupBox_21.setObjectName("groupBox_21")
        self.formLayout = QtWidgets.QFormLayout(self.groupBox_21)
        self.formLayout.setObjectName("formLayout")
        self.cwp_aliases_tags_all = QtWidgets.QRadioButton(self.groupBox_21)
        self.cwp_aliases_tags_all.setObjectName("cwp_aliases_tags_all")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.cwp_aliases_tags_all)
        self.cwp_aliases_tags_user = QtWidgets.QRadioButton(self.groupBox_21)
        self.cwp_aliases_tags_user.setObjectName("cwp_aliases_tags_user")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.cwp_aliases_tags_user)
        self.cwp_aliases_tag_text = QtWidgets.QLineEdit(self.groupBox_21)
        self.cwp_aliases_tag_text.setStyleSheet("background-color: rgb(255, 206, 207);")
        self.cwp_aliases_tag_text.setObjectName("cwp_aliases_tag_text")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.SpanningRole, self.cwp_aliases_tag_text)
        self.horizontalLayout_17.addWidget(self.groupBox_21)
        self.horizontalLayout_16.addWidget(self.groupBox_20)
        self.verticalLayout_25.addWidget(self.groupBox_18)
        self.Tags = QtWidgets.QGroupBox(self.scrollAreaWidgetContents_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Tags.sizePolicy().hasHeightForWidth())
        self.Tags.setSizePolicy(sizePolicy)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 194, 158))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 194, 158))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 194, 158))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 194, 158))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.Tags.setPalette(palette)
        self.Tags.setAutoFillBackground(True)
        self.Tags.setStyleSheet("")
        self.Tags.setObjectName("Tags")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.Tags)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.groupBox_2 = QtWidgets.QGroupBox(self.Tags)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 162, 116))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 162, 116))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 162, 116))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 162, 116))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.groupBox_2.setPalette(palette)
        self.groupBox_2.setAutoFillBackground(True)
        self.groupBox_2.setStyleSheet("")
        self.groupBox_2.setObjectName("groupBox_2")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.groupBox_2)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.label_40 = QtWidgets.QLabel(self.groupBox_2)
        self.label_40.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_40.setObjectName("label_40")
        self.verticalLayout_8.addWidget(self.label_40)
        self._8 = QtWidgets.QHBoxLayout()
        self._8.setContentsMargins(0, 0, 0, 0)
        self._8.setSpacing(6)
        self._8.setObjectName("_8")
        self.label_11 = QtWidgets.QLabel(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_11.sizePolicy().hasHeightForWidth())
        self.label_11.setSizePolicy(sizePolicy)
        self.label_11.setObjectName("label_11")
        self._8.addWidget(self.label_11)
        self.cwp_work_tag_multi = QtWidgets.QLineEdit(self.groupBox_2)
        self.cwp_work_tag_multi.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cwp_work_tag_multi.setObjectName("cwp_work_tag_multi")
        self._8.addWidget(self.cwp_work_tag_multi)
        self.cwp_multi_work_sep = QtWidgets.QComboBox(self.groupBox_2)
        self.cwp_multi_work_sep.setEditable(True)
        self.cwp_multi_work_sep.setObjectName("cwp_multi_work_sep")
        self.cwp_multi_work_sep.addItem("")
        self.cwp_multi_work_sep.setItemText(0, "")
        self.cwp_multi_work_sep.addItem("")
        self.cwp_multi_work_sep.addItem("")
        self.cwp_multi_work_sep.addItem("")
        self.cwp_multi_work_sep.addItem("")
        self.cwp_multi_work_sep.addItem("")
        self._8.addWidget(self.cwp_multi_work_sep)
        self.verticalLayout_8.addLayout(self._8)
        self.label = QtWidgets.QLabel(self.groupBox_2)
        self.label.setObjectName("label")
        self.verticalLayout_8.addWidget(self.label)
        self._12 = QtWidgets.QHBoxLayout()
        self._12.setContentsMargins(0, 0, 0, 0)
        self._12.setSpacing(6)
        self._12.setObjectName("_12")
        self.label_15 = QtWidgets.QLabel(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_15.sizePolicy().hasHeightForWidth())
        self.label_15.setSizePolicy(sizePolicy)
        self.label_15.setObjectName("label_15")
        self._12.addWidget(self.label_15)
        self.cwp_work_tag_single = QtWidgets.QLineEdit(self.groupBox_2)
        self.cwp_work_tag_single.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cwp_work_tag_single.setObjectName("cwp_work_tag_single")
        self._12.addWidget(self.cwp_work_tag_single)
        self.cwp_single_work_sep = QtWidgets.QComboBox(self.groupBox_2)
        self.cwp_single_work_sep.setEditable(True)
        self.cwp_single_work_sep.setObjectName("cwp_single_work_sep")
        self.cwp_single_work_sep.addItem("")
        self.cwp_single_work_sep.setItemText(0, "")
        self.cwp_single_work_sep.addItem("")
        self.cwp_single_work_sep.addItem("")
        self.cwp_single_work_sep.addItem("")
        self.cwp_single_work_sep.addItem("")
        self.cwp_single_work_sep.addItem("")
        self._12.addWidget(self.cwp_single_work_sep)
        self.verticalLayout_8.addLayout(self._12)
        self.label_2 = QtWidgets.QLabel(self.groupBox_2)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_8.addWidget(self.label_2)
        self._9 = QtWidgets.QHBoxLayout()
        self._9.setContentsMargins(0, 0, 0, 0)
        self._9.setSpacing(6)
        self._9.setObjectName("_9")
        self.label_12 = QtWidgets.QLabel(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_12.sizePolicy().hasHeightForWidth())
        self.label_12.setSizePolicy(sizePolicy)
        self.label_12.setObjectName("label_12")
        self._9.addWidget(self.label_12)
        self.cwp_top_tag = QtWidgets.QLineEdit(self.groupBox_2)
        self.cwp_top_tag.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cwp_top_tag.setObjectName("cwp_top_tag")
        self._9.addWidget(self.cwp_top_tag)
        self.label_10 = QtWidgets.QLabel(self.groupBox_2)
        self.label_10.setObjectName("label_10")
        self._9.addWidget(self.label_10)
        self.verticalLayout_8.addLayout(self._9)
        self.verticalLayout_9.addWidget(self.groupBox_2)
        self.groupBox = QtWidgets.QGroupBox(self.Tags)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 162, 116))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 162, 116))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 162, 116))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 162, 116))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.groupBox.setPalette(palette)
        self.groupBox.setAutoFillBackground(True)
        self.groupBox.setStyleSheet("")
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self._10 = QtWidgets.QHBoxLayout()
        self._10.setContentsMargins(0, 0, 0, 0)
        self._10.setSpacing(6)
        self._10.setObjectName("_10")
        self.label_13 = QtWidgets.QLabel(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_13.sizePolicy().hasHeightForWidth())
        self.label_13.setSizePolicy(sizePolicy)
        self.label_13.setObjectName("label_13")
        self._10.addWidget(self.label_13)
        self.cwp_movt_no_tag = QtWidgets.QLineEdit(self.groupBox)
        self.cwp_movt_no_tag.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cwp_movt_no_tag.setObjectName("cwp_movt_no_tag")
        self._10.addWidget(self.cwp_movt_no_tag)
        self.cwp_movt_no_sep = QtWidgets.QComboBox(self.groupBox)
        self.cwp_movt_no_sep.setEditable(True)
        self.cwp_movt_no_sep.setObjectName("cwp_movt_no_sep")
        self.cwp_movt_no_sep.addItem("")
        self.cwp_movt_no_sep.setItemText(0, "")
        self.cwp_movt_no_sep.addItem("")
        self.cwp_movt_no_sep.addItem("")
        self.cwp_movt_no_sep.addItem("")
        self.cwp_movt_no_sep.addItem("")
        self.cwp_movt_no_sep.addItem("")
        self._10.addWidget(self.cwp_movt_no_sep)
        self.verticalLayout_7.addLayout(self._10)
        self.frame1 = QtWidgets.QFrame(self.groupBox)
        self.frame1.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame1.setObjectName("frame1")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.frame1)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_49 = QtWidgets.QLabel(self.frame1)
        self.label_49.setObjectName("label_49")
        self.horizontalLayout_5.addWidget(self.label_49)
        self.label_47 = QtWidgets.QLabel(self.frame1)
        self.label_47.setObjectName("label_47")
        self.horizontalLayout_5.addWidget(self.label_47)
        self.label_48 = QtWidgets.QLabel(self.frame1)
        self.label_48.setObjectName("label_48")
        self.horizontalLayout_5.addWidget(self.label_48)
        self.verticalLayout_7.addWidget(self.frame1)
        self._11 = QtWidgets.QHBoxLayout()
        self._11.setContentsMargins(0, 0, 0, 0)
        self._11.setSpacing(6)
        self._11.setObjectName("_11")
        self.label_14 = QtWidgets.QLabel(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_14.sizePolicy().hasHeightForWidth())
        self.label_14.setSizePolicy(sizePolicy)
        self.label_14.setObjectName("label_14")
        self._11.addWidget(self.label_14)
        self.cwp_movt_tag_exc = QtWidgets.QLineEdit(self.groupBox)
        self.cwp_movt_tag_exc.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cwp_movt_tag_exc.setObjectName("cwp_movt_tag_exc")
        self._11.addWidget(self.cwp_movt_tag_exc)
        self.cwp_movt_tag_exc1 = QtWidgets.QLineEdit(self.groupBox)
        self.cwp_movt_tag_exc1.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cwp_movt_tag_exc1.setObjectName("cwp_movt_tag_exc1")
        self._11.addWidget(self.cwp_movt_tag_exc1)
        self.label_39 = QtWidgets.QLabel(self.groupBox)
        self.label_39.setObjectName("label_39")
        self._11.addWidget(self.label_39)
        self.verticalLayout_7.addLayout(self._11)
        self._6 = QtWidgets.QHBoxLayout()
        self._6.setContentsMargins(0, 0, 0, 0)
        self._6.setSpacing(6)
        self._6.setObjectName("_6")
        self.label_9 = QtWidgets.QLabel(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_9.sizePolicy().hasHeightForWidth())
        self.label_9.setSizePolicy(sizePolicy)
        self.label_9.setObjectName("label_9")
        self._6.addWidget(self.label_9)
        self.cwp_movt_tag_inc = QtWidgets.QLineEdit(self.groupBox)
        self.cwp_movt_tag_inc.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cwp_movt_tag_inc.setObjectName("cwp_movt_tag_inc")
        self._6.addWidget(self.cwp_movt_tag_inc)
        self.cwp_movt_tag_inc1 = QtWidgets.QLineEdit(self.groupBox)
        self.cwp_movt_tag_inc1.setStyleSheet("background-color: rgb(255, 221, 116);")
        self.cwp_movt_tag_inc1.setObjectName("cwp_movt_tag_inc1")
        self._6.addWidget(self.cwp_movt_tag_inc1)
        self.label_37 = QtWidgets.QLabel(self.groupBox)
        self.label_37.setObjectName("label_37")
        self._6.addWidget(self.label_37)
        self.verticalLayout_7.addLayout(self._6)
        self.verticalLayout_9.addWidget(self.groupBox)
        self.verticalLayout_25.addWidget(self.Tags)
        self.groupBox_12 = QtWidgets.QGroupBox(self.scrollAreaWidgetContents_3)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(195, 168, 179))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(195, 168, 179))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(195, 168, 179))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(195, 168, 179))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.groupBox_12.setPalette(palette)
        self.groupBox_12.setAutoFillBackground(True)
        self.groupBox_12.setStyleSheet("")
        self.groupBox_12.setObjectName("groupBox_12")
        self.verticalLayout_19 = QtWidgets.QVBoxLayout(self.groupBox_12)
        self.verticalLayout_19.setObjectName("verticalLayout_19")
        self.label_20 = QtWidgets.QLabel(self.groupBox_12)
        self.label_20.setStyleSheet("font: 75 8pt \"MS Shell Dlg 2\";\n"
"text-decoration: underline;")
        self.label_20.setObjectName("label_20")
        self.verticalLayout_19.addWidget(self.label_20)
        self.groupBox_13 = QtWidgets.QGroupBox(self.groupBox_12)
        self.groupBox_13.setObjectName("groupBox_13")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout(self.groupBox_13)
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.cwp_partial = QtWidgets.QCheckBox(self.groupBox_13)
        self.cwp_partial.setObjectName("cwp_partial")
        self.horizontalLayout_13.addWidget(self.cwp_partial)
        self.cwp_partial_text = QtWidgets.QLineEdit(self.groupBox_13)
        self.cwp_partial_text.setEnabled(False)
        self.cwp_partial_text.setStyleSheet("background-color: rgb(225, 225, 169);")
        self.cwp_partial_text.setObjectName("cwp_partial_text")
        self.horizontalLayout_13.addWidget(self.cwp_partial_text)
        self.verticalLayout_19.addWidget(self.groupBox_13)
        self.groupBox_14 = QtWidgets.QGroupBox(self.groupBox_12)
        self.groupBox_14.setObjectName("groupBox_14")
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout(self.groupBox_14)
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.cwp_arrangements = QtWidgets.QCheckBox(self.groupBox_14)
        self.cwp_arrangements.setObjectName("cwp_arrangements")
        self.horizontalLayout_15.addWidget(self.cwp_arrangements)
        self.cwp_arrangements_text = QtWidgets.QLineEdit(self.groupBox_14)
        self.cwp_arrangements_text.setEnabled(False)
        self.cwp_arrangements_text.setStyleSheet("background-color: rgb(225, 225, 169);")
        self.cwp_arrangements_text.setObjectName("cwp_arrangements_text")
        self.horizontalLayout_15.addWidget(self.cwp_arrangements_text)
        self.verticalLayout_19.addWidget(self.groupBox_14)
        self.groupBox_15 = QtWidgets.QGroupBox(self.groupBox_12)
        self.groupBox_15.setObjectName("groupBox_15")
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout(self.groupBox_15)
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.cwp_medley = QtWidgets.QCheckBox(self.groupBox_15)
        self.cwp_medley.setObjectName("cwp_medley")
        self.horizontalLayout_12.addWidget(self.cwp_medley)
        self.cwp_medley_text = QtWidgets.QLineEdit(self.groupBox_15)
        self.cwp_medley_text.setEnabled(False)
        self.cwp_medley_text.setStyleSheet("background-color: rgb(225, 225, 169);")
        self.cwp_medley_text.setObjectName("cwp_medley_text")
        self.horizontalLayout_12.addWidget(self.cwp_medley_text)
        self.verticalLayout_19.addWidget(self.groupBox_15)
        self.verticalLayout_25.addWidget(self.groupBox_12)
        self.groupBox_17 = QtWidgets.QGroupBox(self.scrollAreaWidgetContents_3)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.groupBox_17.setPalette(palette)
        self.groupBox_17.setAutoFillBackground(True)
        self.groupBox_17.setStyleSheet("")
        self.groupBox_17.setObjectName("groupBox_17")
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout(self.groupBox_17)
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.cwp_use_sk = QtWidgets.QCheckBox(self.groupBox_17)
        self.cwp_use_sk.setObjectName("cwp_use_sk")
        self.horizontalLayout_14.addWidget(self.cwp_use_sk)
        self.cwp_write_sk = QtWidgets.QCheckBox(self.groupBox_17)
        self.cwp_write_sk.setObjectName("cwp_write_sk")
        self.horizontalLayout_14.addWidget(self.cwp_write_sk)
        self.verticalLayout_25.addWidget(self.groupBox_17)
        self.label_82 = QtWidgets.QLabel(self.scrollAreaWidgetContents_3)
        self.label_82.setObjectName("label_82")
        self.verticalLayout_25.addWidget(self.label_82)
        self.scrollArea_3.setWidget(self.scrollAreaWidgetContents_3)
        self.verticalLayout_4.addWidget(self.scrollArea_3)
        self.tabWidget.addTab(self.Works, "")
        self.Genres = QtWidgets.QWidget()
        self.Genres.setObjectName("Genres")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.Genres)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.scrollArea_6 = QtWidgets.QScrollArea(self.Genres)
        self.scrollArea_6.setWidgetResizable(True)
        self.scrollArea_6.setObjectName("scrollArea_6")
        self.scrollAreaWidgetContents_5 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_5.setGeometry(QtCore.QRect(0, 0, 1087, 1248))
        self.scrollAreaWidgetContents_5.setObjectName("scrollAreaWidgetContents_5")
        self.gridLayout_13 = QtWidgets.QGridLayout(self.scrollAreaWidgetContents_5)
        self.gridLayout_13.setObjectName("gridLayout_13")
        self.groupBox_41 = QtWidgets.QGroupBox(self.scrollAreaWidgetContents_5)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(185, 135, 188))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(185, 135, 188))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(185, 135, 188))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(185, 135, 188))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.groupBox_41.setPalette(palette)
        self.groupBox_41.setAutoFillBackground(True)
        self.groupBox_41.setStyleSheet("")
        self.groupBox_41.setObjectName("groupBox_41")
        self.verticalLayout_32 = QtWidgets.QVBoxLayout(self.groupBox_41)
        self.verticalLayout_32.setObjectName("verticalLayout_32")
        self.groupBox_48 = QtWidgets.QGroupBox(self.groupBox_41)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(195, 168, 179))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(195, 168, 179))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(195, 168, 179))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(195, 168, 179))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.groupBox_48.setPalette(palette)
        self.groupBox_48.setAutoFillBackground(True)
        self.groupBox_48.setStyleSheet("")
        self.groupBox_48.setObjectName("groupBox_48")
        self.gridLayout_10 = QtWidgets.QGridLayout(self.groupBox_48)
        self.gridLayout_10.setObjectName("gridLayout_10")
        self.groupBox_42 = QtWidgets.QGroupBox(self.groupBox_48)
        self.groupBox_42.setObjectName("groupBox_42")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.groupBox_42)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.cwp_workdate_source_composed = QtWidgets.QCheckBox(self.groupBox_42)
        self.cwp_workdate_source_composed.setObjectName("cwp_workdate_source_composed")
        self.gridLayout_7.addWidget(self.cwp_workdate_source_composed, 0, 0, 1, 1)
        self.cwp_workdate_source_published = QtWidgets.QCheckBox(self.groupBox_42)
        self.cwp_workdate_source_published.setObjectName("cwp_workdate_source_published")
        self.gridLayout_7.addWidget(self.cwp_workdate_source_published, 0, 1, 1, 1)
        self.cwp_workdate_source_premiered = QtWidgets.QCheckBox(self.groupBox_42)
        self.cwp_workdate_source_premiered.setObjectName("cwp_workdate_source_premiered")
        self.gridLayout_7.addWidget(self.cwp_workdate_source_premiered, 0, 2, 1, 1)
        self.line_9 = QtWidgets.QFrame(self.groupBox_42)
        self.line_9.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_9.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_9.setObjectName("line_9")
        self.gridLayout_7.addWidget(self.line_9, 1, 0, 1, 3)
        self.cwp_workdate_use_first = QtWidgets.QRadioButton(self.groupBox_42)
        self.cwp_workdate_use_first.setObjectName("cwp_workdate_use_first")
        self.gridLayout_7.addWidget(self.cwp_workdate_use_first, 2, 0, 1, 1)
        self.cwp_workdate_use_all = QtWidgets.QRadioButton(self.groupBox_42)
        self.cwp_workdate_use_all.setObjectName("cwp_workdate_use_all")
        self.gridLayout_7.addWidget(self.cwp_workdate_use_all, 2, 1, 1, 1)
        self.cwp_workdate_annotate = QtWidgets.QCheckBox(self.groupBox_42)
        self.cwp_workdate_annotate.setObjectName("cwp_workdate_annotate")
        self.gridLayout_7.addWidget(self.cwp_workdate_annotate, 2, 2, 1, 1)
        self.gridLayout_10.addWidget(self.groupBox_42, 1, 0, 1, 3)
        self.label_68 = QtWidgets.QLabel(self.groupBox_48)
        self.label_68.setObjectName("label_68")
        self.gridLayout_10.addWidget(self.label_68, 0, 0, 1, 1)
        self.cwp_workdate_include = QtWidgets.QCheckBox(self.groupBox_48)
        self.cwp_workdate_include.setObjectName("cwp_workdate_include")
        self.gridLayout_10.addWidget(self.cwp_workdate_include, 2, 0, 1, 2)
        self.cwp_workdate_tag = QtWidgets.QLineEdit(self.groupBox_48)
        self.cwp_workdate_tag.setStyleSheet("background-color: rgb(183, 174, 225);")
        self.cwp_workdate_tag.setObjectName("cwp_workdate_tag")
        self.gridLayout_10.addWidget(self.cwp_workdate_tag, 0, 1, 1, 2)
        self.verticalLayout_32.addWidget(self.groupBox_48)
        self.line_5 = QtWidgets.QFrame(self.groupBox_41)
        self.line_5.setMidLineWidth(0)
        self.line_5.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_5.setObjectName("line_5")
        self.verticalLayout_32.addWidget(self.line_5)
        self.groupBox_49 = QtWidgets.QGroupBox(self.groupBox_41)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(195, 168, 179))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(195, 168, 179))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(195, 168, 179))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(195, 168, 179))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.groupBox_49.setPalette(palette)
        self.groupBox_49.setAutoFillBackground(True)
        self.groupBox_49.setStyleSheet("")
        self.groupBox_49.setObjectName("groupBox_49")
        self.gridLayout_12 = QtWidgets.QGridLayout(self.groupBox_49)
        self.gridLayout_12.setObjectName("gridLayout_12")
        self.label_69 = QtWidgets.QLabel(self.groupBox_49)
        self.label_69.setObjectName("label_69")
        self.gridLayout_12.addWidget(self.label_69, 0, 0, 1, 1)
        self.cwp_muso_periods = QtWidgets.QCheckBox(self.groupBox_49)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.cwp_muso_periods.setFont(font)
        self.cwp_muso_periods.setObjectName("cwp_muso_periods")
        self.gridLayout_12.addWidget(self.cwp_muso_periods, 4, 0, 1, 2)
        self.cwp_muso_dates = QtWidgets.QCheckBox(self.groupBox_49)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.cwp_muso_dates.setFont(font)
        self.cwp_muso_dates.setObjectName("cwp_muso_dates")
        self.gridLayout_12.addWidget(self.cwp_muso_dates, 1, 0, 1, 3)
        self.cwp_period_tag = QtWidgets.QLineEdit(self.groupBox_49)
        self.cwp_period_tag.setStyleSheet("background-color: rgb(183, 174, 225);")
        self.cwp_period_tag.setObjectName("cwp_period_tag")
        self.gridLayout_12.addWidget(self.cwp_period_tag, 0, 1, 1, 2)
        self.label_70 = QtWidgets.QLabel(self.groupBox_49)
        self.label_70.setObjectName("label_70")
        self.gridLayout_12.addWidget(self.label_70, 3, 0, 1, 1)
        self.cwp_period_map = QtWidgets.QPlainTextEdit(self.groupBox_49)
        self.cwp_period_map.setStyleSheet("background-color: rgb(183, 174, 225);")
        self.cwp_period_map.setObjectName("cwp_period_map")
        self.gridLayout_12.addWidget(self.cwp_period_map, 3, 2, 2, 1)
        self.label_87 = QtWidgets.QLabel(self.groupBox_49)
        self.label_87.setObjectName("label_87")
        self.gridLayout_12.addWidget(self.label_87, 5, 2, 1, 1)
        self.cwp_periods_arranger_as_composer = QtWidgets.QCheckBox(self.groupBox_49)
        self.cwp_periods_arranger_as_composer.setObjectName("cwp_periods_arranger_as_composer")
        self.gridLayout_12.addWidget(self.cwp_periods_arranger_as_composer, 2, 0, 1, 1)
        self.verticalLayout_32.addWidget(self.groupBox_49)
        self.gridLayout_13.addWidget(self.groupBox_41, 3, 0, 1, 2)
        self.cwp_use_muso_refdb = QtWidgets.QCheckBox(self.scrollAreaWidgetContents_5)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.cwp_use_muso_refdb.setFont(font)
        self.cwp_use_muso_refdb.setObjectName("cwp_use_muso_refdb")
        self.gridLayout_13.addWidget(self.cwp_use_muso_refdb, 0, 0, 1, 1)
        self.label_81 = QtWidgets.QLabel(self.scrollAreaWidgetContents_5)
        self.label_81.setObjectName("label_81")
        self.gridLayout_13.addWidget(self.label_81, 4, 0, 1, 1)
        self.groupBox_35 = QtWidgets.QGroupBox(self.scrollAreaWidgetContents_5)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(19, 186, 161))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(19, 186, 161))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(19, 186, 161))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(19, 186, 161))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.groupBox_35.setPalette(palette)
        self.groupBox_35.setAutoFillBackground(True)
        self.groupBox_35.setStyleSheet("")
        self.groupBox_35.setObjectName("groupBox_35")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.groupBox_35)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.groupBox_38 = QtWidgets.QGroupBox(self.groupBox_35)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(138, 222, 187))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(138, 222, 187))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(138, 222, 187))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(138, 222, 187))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.groupBox_38.setPalette(palette)
        self.groupBox_38.setAutoFillBackground(True)
        self.groupBox_38.setStyleSheet("")
        self.groupBox_38.setObjectName("groupBox_38")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.groupBox_38)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.cwp_genres_classical_exclude = QtWidgets.QCheckBox(self.groupBox_38)
        self.cwp_genres_classical_exclude.setObjectName("cwp_genres_classical_exclude")
        self.gridLayout_3.addWidget(self.cwp_genres_classical_exclude, 1, 3, 1, 2)
        self.cwp_genres_classical_selective = QtWidgets.QRadioButton(self.groupBox_38)
        self.cwp_genres_classical_selective.setObjectName("cwp_genres_classical_selective")
        self.gridLayout_3.addWidget(self.cwp_genres_classical_selective, 0, 2, 1, 2)
        self.cwp_muso_classical = QtWidgets.QCheckBox(self.groupBox_38)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.cwp_muso_classical.setFont(font)
        self.cwp_muso_classical.setObjectName("cwp_muso_classical")
        self.gridLayout_3.addWidget(self.cwp_muso_classical, 1, 0, 1, 3)
        self.cwp_genres_classical_all = QtWidgets.QRadioButton(self.groupBox_38)
        self.cwp_genres_classical_all.setObjectName("cwp_genres_classical_all")
        self.gridLayout_3.addWidget(self.cwp_genres_classical_all, 0, 0, 1, 2)
        self.label_64 = QtWidgets.QLabel(self.groupBox_38)
        self.label_64.setObjectName("label_64")
        self.gridLayout_3.addWidget(self.label_64, 3, 0, 1, 1)
        self.cwp_genres_flag_text = QtWidgets.QLineEdit(self.groupBox_38)
        self.cwp_genres_flag_text.setStyleSheet("background-color: rgb(156, 250, 211);")
        self.cwp_genres_flag_text.setObjectName("cwp_genres_flag_text")
        self.gridLayout_3.addWidget(self.cwp_genres_flag_text, 3, 1, 1, 3)
        self.label_71 = QtWidgets.QLabel(self.groupBox_38)
        self.label_71.setObjectName("label_71")
        self.gridLayout_3.addWidget(self.label_71, 3, 4, 1, 1)
        self.cwp_genres_flag_tag = QtWidgets.QLineEdit(self.groupBox_38)
        self.cwp_genres_flag_tag.setStyleSheet("background-color: rgb(156, 250, 211);")
        self.cwp_genres_flag_tag.setObjectName("cwp_genres_flag_tag")
        self.gridLayout_3.addWidget(self.cwp_genres_flag_tag, 3, 5, 1, 1)
        self.cwp_genres_arranger_as_composer = QtWidgets.QCheckBox(self.groupBox_38)
        self.cwp_genres_arranger_as_composer.setObjectName("cwp_genres_arranger_as_composer")
        self.gridLayout_3.addWidget(self.cwp_genres_arranger_as_composer, 2, 0, 1, 1)
        self.gridLayout_5.addWidget(self.groupBox_38, 3, 0, 1, 4)
        self.label_73 = QtWidgets.QLabel(self.groupBox_35)
        self.label_73.setObjectName("label_73")
        self.gridLayout_5.addWidget(self.label_73, 0, 0, 1, 1)
        self.cwp_genre_tag = QtWidgets.QLineEdit(self.groupBox_35)
        self.cwp_genre_tag.setStyleSheet("background-color: rgb(0, 236, 173);")
        self.cwp_genre_tag.setObjectName("cwp_genre_tag")
        self.gridLayout_5.addWidget(self.cwp_genre_tag, 0, 1, 1, 1)
        self.cwp_subgenre_tag = QtWidgets.QLineEdit(self.groupBox_35)
        self.cwp_subgenre_tag.setStyleSheet("background-color: rgb(0, 236, 173);")
        self.cwp_subgenre_tag.setObjectName("cwp_subgenre_tag")
        self.gridLayout_5.addWidget(self.cwp_subgenre_tag, 0, 3, 1, 1)
        self.label_74 = QtWidgets.QLabel(self.groupBox_35)
        self.label_74.setObjectName("label_74")
        self.gridLayout_5.addWidget(self.label_74, 0, 2, 1, 1)
        self.groupBox_36 = QtWidgets.QGroupBox(self.groupBox_35)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(138, 222, 187))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(138, 222, 187))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(138, 222, 187))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(138, 222, 187))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.groupBox_36.setPalette(palette)
        self.groupBox_36.setAutoFillBackground(True)
        self.groupBox_36.setStyleSheet("")
        self.groupBox_36.setObjectName("groupBox_36")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.groupBox_36)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.groupBox_43 = QtWidgets.QGroupBox(self.groupBox_36)
        self.groupBox_43.setObjectName("groupBox_43")
        self.gridLayout_9 = QtWidgets.QGridLayout(self.groupBox_43)
        self.gridLayout_9.setObjectName("gridLayout_9")
        self.label_60 = QtWidgets.QLabel(self.groupBox_43)
        self.label_60.setObjectName("label_60")
        self.gridLayout_9.addWidget(self.label_60, 0, 0, 1, 1)
        self.cwp_genres_classical_main = QtWidgets.QPlainTextEdit(self.groupBox_43)
        self.cwp_genres_classical_main.setMaximumSize(QtCore.QSize(16777215, 50))
        self.cwp_genres_classical_main.setStyleSheet("background-color: rgb(156, 250, 211);")
        self.cwp_genres_classical_main.setObjectName("cwp_genres_classical_main")
        self.gridLayout_9.addWidget(self.cwp_genres_classical_main, 0, 1, 3, 1)
        self.label_75 = QtWidgets.QLabel(self.groupBox_43)
        self.label_75.setObjectName("label_75")
        self.gridLayout_9.addWidget(self.label_75, 0, 2, 1, 1)
        self.cwp_genres_classical_sub = QtWidgets.QPlainTextEdit(self.groupBox_43)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cwp_genres_classical_sub.sizePolicy().hasHeightForWidth())
        self.cwp_genres_classical_sub.setSizePolicy(sizePolicy)
        self.cwp_genres_classical_sub.setMaximumSize(QtCore.QSize(16777215, 50))
        self.cwp_genres_classical_sub.setStyleSheet("background-color: rgb(156, 250, 211);")
        self.cwp_genres_classical_sub.setObjectName("cwp_genres_classical_sub")
        self.gridLayout_9.addWidget(self.cwp_genres_classical_sub, 0, 3, 3, 1)
        self.cwp_muso_genres = QtWidgets.QCheckBox(self.groupBox_43)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.cwp_muso_genres.setFont(font)
        self.cwp_muso_genres.setObjectName("cwp_muso_genres")
        self.gridLayout_9.addWidget(self.cwp_muso_genres, 1, 0, 1, 1)
        self.gridLayout_6.addWidget(self.groupBox_43, 2, 0, 1, 2)
        self.groupBox_44 = QtWidgets.QGroupBox(self.groupBox_36)
        self.groupBox_44.setObjectName("groupBox_44")
        self.horizontalLayout_36 = QtWidgets.QHBoxLayout(self.groupBox_44)
        self.horizontalLayout_36.setObjectName("horizontalLayout_36")
        self.label_62 = QtWidgets.QLabel(self.groupBox_44)
        self.label_62.setObjectName("label_62")
        self.horizontalLayout_36.addWidget(self.label_62)
        self.cwp_genres_other_main = QtWidgets.QPlainTextEdit(self.groupBox_44)
        self.cwp_genres_other_main.setMaximumSize(QtCore.QSize(16777215, 50))
        self.cwp_genres_other_main.setStyleSheet("background-color: rgb(156, 250, 211);")
        self.cwp_genres_other_main.setObjectName("cwp_genres_other_main")
        self.horizontalLayout_36.addWidget(self.cwp_genres_other_main)
        self.label_76 = QtWidgets.QLabel(self.groupBox_44)
        self.label_76.setObjectName("label_76")
        self.horizontalLayout_36.addWidget(self.label_76)
        self.cwp_genres_other_sub = QtWidgets.QPlainTextEdit(self.groupBox_44)
        self.cwp_genres_other_sub.setMaximumSize(QtCore.QSize(16777215, 50))
        self.cwp_genres_other_sub.setStyleSheet("background-color: rgb(156, 250, 211);")
        self.cwp_genres_other_sub.setObjectName("cwp_genres_other_sub")
        self.horizontalLayout_36.addWidget(self.cwp_genres_other_sub)
        self.cwp_genres_other_main.raise_()
        self.cwp_genres_other_sub.raise_()
        self.label_62.raise_()
        self.label_76.raise_()
        self.gridLayout_6.addWidget(self.groupBox_44, 3, 0, 1, 2)
        self.label_80 = QtWidgets.QLabel(self.groupBox_36)
        self.label_80.setObjectName("label_80")
        self.gridLayout_6.addWidget(self.label_80, 4, 0, 1, 1)
        self.cwp_genres_default = QtWidgets.QLineEdit(self.groupBox_36)
        self.cwp_genres_default.setStyleSheet("background-color: rgb(156, 250, 211);")
        self.cwp_genres_default.setObjectName("cwp_genres_default")
        self.gridLayout_6.addWidget(self.cwp_genres_default, 4, 1, 1, 1)
        self.label_77 = QtWidgets.QLabel(self.groupBox_36)
        self.label_77.setObjectName("label_77")
        self.gridLayout_6.addWidget(self.label_77, 0, 0, 1, 2)
        self.label_78 = QtWidgets.QLabel(self.groupBox_36)
        self.label_78.setObjectName("label_78")
        self.gridLayout_6.addWidget(self.label_78, 1, 0, 1, 1)
        self.gridLayout_5.addWidget(self.groupBox_36, 2, 0, 1, 4)
        self.groupBox_37 = QtWidgets.QGroupBox(self.groupBox_35)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(138, 222, 187))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(138, 222, 187))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(138, 222, 187))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(138, 222, 187))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.groupBox_37.setPalette(palette)
        self.groupBox_37.setAutoFillBackground(True)
        self.groupBox_37.setStyleSheet("")
        self.groupBox_37.setObjectName("groupBox_37")
        self.horizontalLayout_32 = QtWidgets.QHBoxLayout(self.groupBox_37)
        self.horizontalLayout_32.setObjectName("horizontalLayout_32")
        self.cwp_genres_use_file = QtWidgets.QCheckBox(self.groupBox_37)
        self.cwp_genres_use_file.setObjectName("cwp_genres_use_file")
        self.horizontalLayout_32.addWidget(self.cwp_genres_use_file)
        self.cwp_genres_use_folks = QtWidgets.QCheckBox(self.groupBox_37)
        self.cwp_genres_use_folks.setObjectName("cwp_genres_use_folks")
        self.horizontalLayout_32.addWidget(self.cwp_genres_use_folks)
        self.cwp_genres_use_worktype = QtWidgets.QCheckBox(self.groupBox_37)
        self.cwp_genres_use_worktype.setObjectName("cwp_genres_use_worktype")
        self.horizontalLayout_32.addWidget(self.cwp_genres_use_worktype)
        self.cwp_genres_infer = QtWidgets.QCheckBox(self.groupBox_37)
        self.cwp_genres_infer.setObjectName("cwp_genres_infer")
        self.horizontalLayout_32.addWidget(self.cwp_genres_infer)
        self.gridLayout_5.addWidget(self.groupBox_37, 1, 0, 1, 4)
        self.gridLayout_13.addWidget(self.groupBox_35, 1, 0, 1, 2)
        self.groupBox_39 = QtWidgets.QGroupBox(self.scrollAreaWidgetContents_5)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(199, 93, 95))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(199, 93, 95))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(199, 93, 95))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(199, 93, 95))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.groupBox_39.setPalette(palette)
        self.groupBox_39.setAutoFillBackground(True)
        self.groupBox_39.setStyleSheet("")
        self.groupBox_39.setObjectName("groupBox_39")
        self.verticalLayout_34 = QtWidgets.QVBoxLayout(self.groupBox_39)
        self.verticalLayout_34.setObjectName("verticalLayout_34")
        self.groupBox_45 = QtWidgets.QGroupBox(self.groupBox_39)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 161, 163))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 161, 163))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 161, 163))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 161, 163))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.groupBox_45.setPalette(palette)
        self.groupBox_45.setAutoFillBackground(True)
        self.groupBox_45.setStyleSheet("")
        self.groupBox_45.setObjectName("groupBox_45")
        self.gridLayout_11 = QtWidgets.QGridLayout(self.groupBox_45)
        self.gridLayout_11.setObjectName("gridLayout_11")
        self.label_66 = QtWidgets.QLabel(self.groupBox_45)
        self.label_66.setObjectName("label_66")
        self.gridLayout_11.addWidget(self.label_66, 0, 0, 1, 1)
        self.cwp_instruments_tag = QtWidgets.QLineEdit(self.groupBox_45)
        self.cwp_instruments_tag.setStyleSheet("background-color: rgb(248, 116, 120);")
        self.cwp_instruments_tag.setObjectName("cwp_instruments_tag")
        self.gridLayout_11.addWidget(self.cwp_instruments_tag, 0, 1, 1, 1)
        self.groupBox_40 = QtWidgets.QGroupBox(self.groupBox_45)
        self.groupBox_40.setObjectName("groupBox_40")
        self.horizontalLayout_33 = QtWidgets.QHBoxLayout(self.groupBox_40)
        self.horizontalLayout_33.setObjectName("horizontalLayout_33")
        self.cwp_instruments_MB_names = QtWidgets.QCheckBox(self.groupBox_40)
        self.cwp_instruments_MB_names.setObjectName("cwp_instruments_MB_names")
        self.horizontalLayout_33.addWidget(self.cwp_instruments_MB_names)
        self.cwp_instruments_credited_names = QtWidgets.QCheckBox(self.groupBox_40)
        self.cwp_instruments_credited_names.setObjectName("cwp_instruments_credited_names")
        self.horizontalLayout_33.addWidget(self.cwp_instruments_credited_names)
        self.gridLayout_11.addWidget(self.groupBox_40, 1, 0, 1, 2)
        self.verticalLayout_34.addWidget(self.groupBox_45)
        self.groupBox_47 = QtWidgets.QGroupBox(self.groupBox_39)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 161, 163))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 161, 163))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 161, 163))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 161, 163))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.groupBox_47.setPalette(palette)
        self.groupBox_47.setAutoFillBackground(True)
        self.groupBox_47.setStyleSheet("")
        self.groupBox_47.setObjectName("groupBox_47")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.groupBox_47)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.label_72 = QtWidgets.QLabel(self.groupBox_47)
        self.label_72.setObjectName("label_72")
        self.gridLayout_4.addWidget(self.label_72, 0, 0, 1, 1)
        self.cwp_key_tag = QtWidgets.QLineEdit(self.groupBox_47)
        self.cwp_key_tag.setStyleSheet("background-color: rgb(248, 116, 120);")
        self.cwp_key_tag.setObjectName("cwp_key_tag")
        self.gridLayout_4.addWidget(self.cwp_key_tag, 0, 2, 1, 1)
        self.groupBox_52 = QtWidgets.QGroupBox(self.groupBox_47)
        self.groupBox_52.setObjectName("groupBox_52")
        self.horizontalLayout_35 = QtWidgets.QHBoxLayout(self.groupBox_52)
        self.horizontalLayout_35.setObjectName("horizontalLayout_35")
        self.cwp_key_never_include = QtWidgets.QRadioButton(self.groupBox_52)
        self.cwp_key_never_include.setObjectName("cwp_key_never_include")
        self.horizontalLayout_35.addWidget(self.cwp_key_never_include)
        self.cwp_key_contingent_include = QtWidgets.QRadioButton(self.groupBox_52)
        self.cwp_key_contingent_include.setObjectName("cwp_key_contingent_include")
        self.horizontalLayout_35.addWidget(self.cwp_key_contingent_include)
        self.cwp_key_include = QtWidgets.QRadioButton(self.groupBox_52)
        self.cwp_key_include.setObjectName("cwp_key_include")
        self.horizontalLayout_35.addWidget(self.cwp_key_include)
        self.gridLayout_4.addWidget(self.groupBox_52, 1, 0, 1, 2)
        self.verticalLayout_34.addWidget(self.groupBox_47)
        self.gridLayout_13.addWidget(self.groupBox_39, 2, 0, 1, 2)
        self.scrollArea_6.setWidget(self.scrollAreaWidgetContents_5)
        self.gridLayout_2.addWidget(self.scrollArea_6, 1, 0, 1, 1)
        self.tabWidget.addTab(self.Genres, "")
        self.Advanced = QtWidgets.QWidget()
        self.Advanced.setObjectName("Advanced")
        self.horizontalLayout_31 = QtWidgets.QHBoxLayout(self.Advanced)
        self.horizontalLayout_31.setObjectName("horizontalLayout_31")
        self.scrollArea_2 = QtWidgets.QScrollArea(self.Advanced)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scrollArea_2.sizePolicy().hasHeightForWidth())
        self.scrollArea_2.setSizePolicy(sizePolicy)
        self.scrollArea_2.setWidgetResizable(True)
        self.scrollArea_2.setObjectName("scrollArea_2")
        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 1087, 1128))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
        self.verticalLayout_18 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_2)
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.groupBox_3 = QtWidgets.QGroupBox(self.scrollAreaWidgetContents_2)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.groupBox_3.setPalette(palette)
        self.groupBox_3.setAutoFillBackground(True)
        self.groupBox_3.setStyleSheet("")
        self.groupBox_3.setObjectName("groupBox_3")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.groupBox_3)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.ce_no_run = QtWidgets.QCheckBox(self.groupBox_3)
        self.ce_no_run.setObjectName("ce_no_run")
        self.verticalLayout_5.addWidget(self.ce_no_run)
        self.verticalLayout_18.addWidget(self.groupBox_3)
        self.advanced_artists = QtWidgets.QGroupBox(self.scrollAreaWidgetContents_2)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.advanced_artists.setPalette(palette)
        self.advanced_artists.setAutoFillBackground(True)
        self.advanced_artists.setStyleSheet("")
        self.advanced_artists.setObjectName("advanced_artists")
        self.verticalLayout_20 = QtWidgets.QVBoxLayout(self.advanced_artists)
        self.verticalLayout_20.setObjectName("verticalLayout_20")
        self.run_options_2 = QtWidgets.QGroupBox(self.advanced_artists)
        self.run_options_2.setObjectName("run_options_2")
        self._13 = QtWidgets.QVBoxLayout(self.run_options_2)
        self._13.setContentsMargins(9, 9, 9, 9)
        self._13.setSpacing(2)
        self._13.setObjectName("_13")
        self.cea_orchestras_2 = QtWidgets.QLabel(self.run_options_2)
        self.cea_orchestras_2.setObjectName("cea_orchestras_2")
        self._13.addWidget(self.cea_orchestras_2)
        self.cea_orchestras = QtWidgets.QLineEdit(self.run_options_2)
        self.cea_orchestras.setStyleSheet("background-color: rgb(203, 182, 175);")
        self.cea_orchestras.setObjectName("cea_orchestras")
        self._13.addWidget(self.cea_orchestras)
        self.cea_choirs_2 = QtWidgets.QLabel(self.run_options_2)
        self.cea_choirs_2.setObjectName("cea_choirs_2")
        self._13.addWidget(self.cea_choirs_2)
        self.cea_choirs = QtWidgets.QLineEdit(self.run_options_2)
        self.cea_choirs.setStyleSheet("background-color: rgb(203, 182, 175);")
        self.cea_choirs.setObjectName("cea_choirs")
        self._13.addWidget(self.cea_choirs)
        self.cea_groups_2 = QtWidgets.QLabel(self.run_options_2)
        self.cea_groups_2.setObjectName("cea_groups_2")
        self._13.addWidget(self.cea_groups_2)
        self.cea_groups = QtWidgets.QLineEdit(self.run_options_2)
        self.cea_groups.setStyleSheet("background-color: rgb(203, 182, 175);")
        self.cea_groups.setObjectName("cea_groups")
        self._13.addWidget(self.cea_groups)
        self.verticalLayout_20.addWidget(self.run_options_2)
        self.verticalLayout_18.addWidget(self.advanced_artists)
        self.advanced_works = QtWidgets.QGroupBox(self.scrollAreaWidgetContents_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.advanced_works.sizePolicy().hasHeightForWidth())
        self.advanced_works.setSizePolicy(sizePolicy)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.advanced_works.setPalette(palette)
        self.advanced_works.setAutoFillBackground(True)
        self.advanced_works.setStyleSheet("")
        self.advanced_works.setObjectName("advanced_works")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.advanced_works)
        self.verticalLayout.setObjectName("verticalLayout")
        self._2 = QtWidgets.QHBoxLayout()
        self._2.setContentsMargins(0, 0, 0, 0)
        self._2.setSpacing(6)
        self._2.setObjectName("_2")
        self.label_4 = QtWidgets.QLabel(self.advanced_works)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        self.label_4.setObjectName("label_4")
        self._2.addWidget(self.label_4)
        self.cwp_retries = QtWidgets.QSpinBox(self.advanced_works)
        self.cwp_retries.setStyleSheet("background-color: rgb(203, 182, 175);")
        self.cwp_retries.setSuffix("")
        self.cwp_retries.setMinimum(0)
        self.cwp_retries.setMaximum(20)
        self.cwp_retries.setObjectName("cwp_retries")
        self._2.addWidget(self.cwp_retries)
        self.verticalLayout.addLayout(self._2)
        self.groupBox_51 = QtWidgets.QGroupBox(self.advanced_works)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(198, 198, 148))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(198, 198, 148))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(198, 198, 148))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(198, 198, 148))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.groupBox_51.setPalette(palette)
        self.groupBox_51.setAutoFillBackground(True)
        self.groupBox_51.setObjectName("groupBox_51")
        self.verticalLayout_35 = QtWidgets.QVBoxLayout(self.groupBox_51)
        self.verticalLayout_35.setObjectName("verticalLayout_35")
        self._22 = QtWidgets.QHBoxLayout()
        self._22.setContentsMargins(0, 0, 0, 0)
        self._22.setSpacing(6)
        self._22.setObjectName("_22")
        self.label_90 = QtWidgets.QLabel(self.groupBox_51)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_90.sizePolicy().hasHeightForWidth())
        self.label_90.setSizePolicy(sizePolicy)
        self.label_90.setObjectName("label_90")
        self._22.addWidget(self.label_90)
        self.cwp_common_chars = QtWidgets.QSpinBox(self.groupBox_51)
        self.cwp_common_chars.setStyleSheet("background-color: rgb(203, 182, 175);")
        self.cwp_common_chars.setSuffix("")
        self.cwp_common_chars.setMinimum(0)
        self.cwp_common_chars.setMaximum(99)
        self.cwp_common_chars.setObjectName("cwp_common_chars")
        self._22.addWidget(self.cwp_common_chars)
        self.verticalLayout_35.addLayout(self._22)
        self.label_89 = QtWidgets.QLabel(self.groupBox_51)
        self.label_89.setObjectName("label_89")
        self.verticalLayout_35.addWidget(self.label_89)
        self.verticalLayout.addWidget(self.groupBox_51)
        self.run_options_3a = QtWidgets.QGroupBox(self.advanced_works)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(198, 198, 148))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(198, 198, 148))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(198, 198, 148))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(198, 198, 148))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.run_options_3a.setPalette(palette)
        self.run_options_3a.setAutoFillBackground(True)
        self.run_options_3a.setObjectName("run_options_3a")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.run_options_3a)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self._3 = QtWidgets.QHBoxLayout()
        self._3.setContentsMargins(0, 0, 0, 0)
        self._3.setSpacing(6)
        self._3.setObjectName("_3")
        self.label_6 = QtWidgets.QLabel(self.run_options_3a)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_6.sizePolicy().hasHeightForWidth())
        self.label_6.setSizePolicy(sizePolicy)
        self.label_6.setObjectName("label_6")
        self._3.addWidget(self.label_6)
        self.cwp_proximity = QtWidgets.QSpinBox(self.run_options_3a)
        self.cwp_proximity.setStyleSheet("background-color: rgb(203, 182, 175);")
        self.cwp_proximity.setSuffix("")
        self.cwp_proximity.setMaximum(20)
        self.cwp_proximity.setObjectName("cwp_proximity")
        self._3.addWidget(self.cwp_proximity)
        self.verticalLayout_2.addLayout(self._3)
        self._4 = QtWidgets.QHBoxLayout()
        self._4.setContentsMargins(0, 0, 0, 0)
        self._4.setSpacing(6)
        self._4.setObjectName("_4")
        self.label_7 = QtWidgets.QLabel(self.run_options_3a)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_7.sizePolicy().hasHeightForWidth())
        self.label_7.setSizePolicy(sizePolicy)
        self.label_7.setObjectName("label_7")
        self._4.addWidget(self.label_7)
        self.cwp_end_proximity = QtWidgets.QSpinBox(self.run_options_3a)
        self.cwp_end_proximity.setStyleSheet("background-color: rgb(203, 182, 175);")
        self.cwp_end_proximity.setSuffix("")
        self.cwp_end_proximity.setMaximum(20)
        self.cwp_end_proximity.setObjectName("cwp_end_proximity")
        self._4.addWidget(self.cwp_end_proximity)
        self.verticalLayout_2.addLayout(self._4)
        self._5 = QtWidgets.QHBoxLayout()
        self._5.setContentsMargins(0, 0, 0, 0)
        self._5.setSpacing(6)
        self._5.setObjectName("_5")
        self.label_5 = QtWidgets.QLabel(self.run_options_3a)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_5.sizePolicy().hasHeightForWidth())
        self.label_5.setSizePolicy(sizePolicy)
        self.label_5.setObjectName("label_5")
        self._5.addWidget(self.label_5)
        self.cwp_split_hyphenated = QtWidgets.QCheckBox(self.run_options_3a)
        self.cwp_split_hyphenated.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.cwp_split_hyphenated.setText("")
        self.cwp_split_hyphenated.setObjectName("cwp_split_hyphenated")
        self._5.addWidget(self.cwp_split_hyphenated)
        self.verticalLayout_2.addLayout(self._5)
        self._7 = QtWidgets.QHBoxLayout()
        self._7.setContentsMargins(0, 0, 0, 0)
        self._7.setSpacing(6)
        self._7.setObjectName("_7")
        self.label_8 = QtWidgets.QLabel(self.run_options_3a)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_8.sizePolicy().hasHeightForWidth())
        self.label_8.setSizePolicy(sizePolicy)
        self.label_8.setObjectName("label_8")
        self._7.addWidget(self.label_8)
        self.cwp_substring_match = QtWidgets.QSpinBox(self.run_options_3a)
        self.cwp_substring_match.setStyleSheet("background-color: rgb(203, 182, 175);")
        self.cwp_substring_match.setMaximum(100)
        self.cwp_substring_match.setObjectName("cwp_substring_match")
        self._7.addWidget(self.cwp_substring_match)
        self.verticalLayout_2.addLayout(self._7)
        self.line_2 = QtWidgets.QFrame(self.run_options_3a)
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.verticalLayout_2.addWidget(self.line_2)
        self.cwp_removewords_2 = QtWidgets.QLabel(self.run_options_3a)
        self.cwp_removewords_2.setObjectName("cwp_removewords_2")
        self.verticalLayout_2.addWidget(self.cwp_removewords_2)
        self.cwp_removewords = QtWidgets.QLineEdit(self.run_options_3a)
        self.cwp_removewords.setStyleSheet("background-color: rgb(203, 182, 175);")
        self.cwp_removewords.setObjectName("cwp_removewords")
        self.verticalLayout_2.addWidget(self.cwp_removewords)
        self.line = QtWidgets.QFrame(self.run_options_3a)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout_2.addWidget(self.line)
        self.cwp_synonyms_2 = QtWidgets.QLabel(self.run_options_3a)
        self.cwp_synonyms_2.setObjectName("cwp_synonyms_2")
        self.verticalLayout_2.addWidget(self.cwp_synonyms_2)
        self.cwp_synonyms = QtWidgets.QLineEdit(self.run_options_3a)
        self.cwp_synonyms.setStyleSheet("background-color: rgb(203, 182, 175);")
        self.cwp_synonyms.setObjectName("cwp_synonyms")
        self.verticalLayout_2.addWidget(self.cwp_synonyms)
        self.label_16 = QtWidgets.QLabel(self.run_options_3a)
        self.label_16.setObjectName("label_16")
        self.verticalLayout_2.addWidget(self.label_16)
        self.cwp_replacements = QtWidgets.QLineEdit(self.run_options_3a)
        self.cwp_replacements.setStyleSheet("background-color: rgb(203, 182, 175);")
        self.cwp_replacements.setObjectName("cwp_replacements")
        self.verticalLayout_2.addWidget(self.cwp_replacements)
        self.verticalLayout.addWidget(self.run_options_3a)
        self.verticalLayout_18.addWidget(self.advanced_works)
        self.groupBox_46 = QtWidgets.QGroupBox(self.scrollAreaWidgetContents_2)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.groupBox_46.setPalette(palette)
        self.groupBox_46.setAutoFillBackground(True)
        self.groupBox_46.setStyleSheet("")
        self.groupBox_46.setObjectName("groupBox_46")
        self.gridLayout_8 = QtWidgets.QGridLayout(self.groupBox_46)
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.label_85 = QtWidgets.QLabel(self.groupBox_46)
        self.label_85.setObjectName("label_85")
        self.gridLayout_8.addWidget(self.label_85, 1, 0, 1, 1)
        self.cwp_muso_refdb = QtWidgets.QLineEdit(self.groupBox_46)
        self.cwp_muso_refdb.setStyleSheet("background-color: rgb(203, 182, 175);")
        self.cwp_muso_refdb.setObjectName("cwp_muso_refdb")
        self.gridLayout_8.addWidget(self.cwp_muso_refdb, 1, 3, 1, 1)
        self.label_84 = QtWidgets.QLabel(self.groupBox_46)
        self.label_84.setObjectName("label_84")
        self.gridLayout_8.addWidget(self.label_84, 1, 2, 1, 1)
        self.cwp_muso_path = QtWidgets.QLineEdit(self.groupBox_46)
        self.cwp_muso_path.setStyleSheet("background-color: rgb(203, 182, 175);")
        self.cwp_muso_path.setObjectName("cwp_muso_path")
        self.gridLayout_8.addWidget(self.cwp_muso_path, 1, 1, 1, 1)
        self.label_86 = QtWidgets.QLabel(self.groupBox_46)
        self.label_86.setObjectName("label_86")
        self.gridLayout_8.addWidget(self.label_86, 0, 0, 1, 2)
        self.verticalLayout_18.addWidget(self.groupBox_46)
        self.groupBox_6 = QtWidgets.QGroupBox(self.scrollAreaWidgetContents_2)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.groupBox_6.setPalette(palette)
        self.groupBox_6.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.groupBox_6.setAutoFillBackground(True)
        self.groupBox_6.setStyleSheet("")
        self.groupBox_6.setObjectName("groupBox_6")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.groupBox_6)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.log_error = QtWidgets.QCheckBox(self.groupBox_6)
        self.log_error.setObjectName("log_error")
        self.horizontalLayout_2.addWidget(self.log_error)
        self.log_warning = QtWidgets.QCheckBox(self.groupBox_6)
        self.log_warning.setObjectName("log_warning")
        self.horizontalLayout_2.addWidget(self.log_warning)
        self.log_debug = QtWidgets.QCheckBox(self.groupBox_6)
        self.log_debug.setObjectName("log_debug")
        self.horizontalLayout_2.addWidget(self.log_debug)
        self.groupBox_50 = QtWidgets.QGroupBox(self.groupBox_6)
        self.groupBox_50.setObjectName("groupBox_50")
        self.horizontalLayout_34 = QtWidgets.QHBoxLayout(self.groupBox_50)
        self.horizontalLayout_34.setObjectName("horizontalLayout_34")
        self.log_basic = QtWidgets.QRadioButton(self.groupBox_50)
        self.log_basic.setObjectName("log_basic")
        self.horizontalLayout_34.addWidget(self.log_basic)
        self.log_info = QtWidgets.QRadioButton(self.groupBox_50)
        self.log_info.setObjectName("log_info")
        self.horizontalLayout_34.addWidget(self.log_info)
        self.horizontalLayout_2.addWidget(self.groupBox_50)
        self.verticalLayout_18.addWidget(self.groupBox_6)
        self.frame_6 = QtWidgets.QFrame(self.scrollAreaWidgetContents_2)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.frame_6.setPalette(palette)
        self.frame_6.setAutoFillBackground(True)
        self.frame_6.setStyleSheet("")
        self.frame_6.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6.setObjectName("frame_6")
        self.verticalLayout_16 = QtWidgets.QVBoxLayout(self.frame_6)
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.groupBox_33 = QtWidgets.QGroupBox(self.frame_6)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 164))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 164))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 164))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 164))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.groupBox_33.setPalette(palette)
        self.groupBox_33.setAutoFillBackground(True)
        self.groupBox_33.setStyleSheet("")
        self.groupBox_33.setObjectName("groupBox_33")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.groupBox_33)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_41 = QtWidgets.QLabel(self.groupBox_33)
        self.label_41.setObjectName("label_41")
        self.horizontalLayout_4.addWidget(self.label_41)
        self.ce_version_tag = QtWidgets.QLineEdit(self.groupBox_33)
        self.ce_version_tag.setObjectName("ce_version_tag")
        self.horizontalLayout_4.addWidget(self.ce_version_tag)
        self.label_36 = QtWidgets.QLabel(self.groupBox_33)
        self.label_36.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label_36.setObjectName("label_36")
        self.horizontalLayout_4.addWidget(self.label_36)
        self.cea_options_tag = QtWidgets.QLineEdit(self.groupBox_33)
        self.cea_options_tag.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.cea_options_tag.setObjectName("cea_options_tag")
        self.horizontalLayout_4.addWidget(self.cea_options_tag)
        self.label_38 = QtWidgets.QLabel(self.groupBox_33)
        self.label_38.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label_38.setObjectName("label_38")
        self.horizontalLayout_4.addWidget(self.label_38)
        self.cwp_options_tag = QtWidgets.QLineEdit(self.groupBox_33)
        self.cwp_options_tag.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.cwp_options_tag.setObjectName("cwp_options_tag")
        self.horizontalLayout_4.addWidget(self.cwp_options_tag)
        self.verticalLayout_16.addWidget(self.groupBox_33)
        self.groupBox_10 = QtWidgets.QGroupBox(self.frame_6)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 164))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 164))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 164))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 164))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.groupBox_10.setPalette(palette)
        self.groupBox_10.setAutoFillBackground(True)
        self.groupBox_10.setObjectName("groupBox_10")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.groupBox_10)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.cea_override = QtWidgets.QCheckBox(self.groupBox_10)
        self.cea_override.setObjectName("cea_override")
        self.horizontalLayout_10.addWidget(self.cea_override)
        self.ce_tagmap_override = QtWidgets.QCheckBox(self.groupBox_10)
        self.ce_tagmap_override.setEnabled(False)
        self.ce_tagmap_override.setObjectName("ce_tagmap_override")
        self.horizontalLayout_10.addWidget(self.ce_tagmap_override)
        self.line_10 = QtWidgets.QFrame(self.groupBox_10)
        self.line_10.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_10.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_10.setObjectName("line_10")
        self.horizontalLayout_10.addWidget(self.line_10)
        self.cwp_override = QtWidgets.QCheckBox(self.groupBox_10)
        self.cwp_override.setObjectName("cwp_override")
        self.horizontalLayout_10.addWidget(self.cwp_override)
        self.ce_genres_override = QtWidgets.QCheckBox(self.groupBox_10)
        self.ce_genres_override.setEnabled(False)
        self.ce_genres_override.setObjectName("ce_genres_override")
        self.horizontalLayout_10.addWidget(self.ce_genres_override)
        self.line_11 = QtWidgets.QFrame(self.groupBox_10)
        self.line_11.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_11.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_11.setObjectName("line_11")
        self.horizontalLayout_10.addWidget(self.line_11)
        self.ce_options_overwrite = QtWidgets.QCheckBox(self.groupBox_10)
        self.ce_options_overwrite.setStyleSheet("background-color: rgb(255, 0, 0);")
        self.ce_options_overwrite.setObjectName("ce_options_overwrite")
        self.horizontalLayout_10.addWidget(self.ce_options_overwrite)
        self.verticalLayout_16.addWidget(self.groupBox_10)
        self.verticalLayout_18.addWidget(self.frame_6)
        self.label_83 = QtWidgets.QLabel(self.scrollAreaWidgetContents_2)
        self.label_83.setObjectName("label_83")
        self.verticalLayout_18.addWidget(self.label_83)
        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents_2)
        self.horizontalLayout_31.addWidget(self.scrollArea_2)
        self.tabWidget.addTab(self.Advanced, "")
        self.Help = QtWidgets.QWidget()
        self.Help.setObjectName("Help")
        self.scrollArea_5 = QtWidgets.QScrollArea(self.Help)
        self.scrollArea_5.setGeometry(QtCore.QRect(0, -10, 671, 561))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scrollArea_5.sizePolicy().hasHeightForWidth())
        self.scrollArea_5.setSizePolicy(sizePolicy)
        self.scrollArea_5.setWidgetResizable(True)
        self.scrollArea_5.setObjectName("scrollArea_5")
        self.scrollAreaWidgetContents_4 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_4.setGeometry(QtCore.QRect(0, 0, 669, 559))
        self.scrollAreaWidgetContents_4.setObjectName("scrollAreaWidgetContents_4")
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.scrollAreaWidgetContents_4)
        self.textBrowser_2.setGeometry(QtCore.QRect(9, 109, 641, 421))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textBrowser_2.sizePolicy().hasHeightForWidth())
        self.textBrowser_2.setSizePolicy(sizePolicy)
        self.textBrowser_2.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.textBrowser_2.setOpenExternalLinks(True)
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.label_58 = QtWidgets.QLabel(self.scrollAreaWidgetContents_4)
        self.label_58.setGeometry(QtCore.QRect(9, 9, 471, 16))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_58.sizePolicy().hasHeightForWidth())
        self.label_58.setSizePolicy(sizePolicy)
        self.label_58.setText("")
        self.label_58.setObjectName("label_58")
        self.textBrowser_3 = QtWidgets.QTextBrowser(self.scrollAreaWidgetContents_4)
        self.textBrowser_3.setGeometry(QtCore.QRect(9, 28, 641, 71))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textBrowser_3.sizePolicy().hasHeightForWidth())
        self.textBrowser_3.setSizePolicy(sizePolicy)
        self.textBrowser_3.setOpenExternalLinks(True)
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.scrollArea_5.setWidget(self.scrollAreaWidgetContents_4)
        self.tabWidget.addTab(self.Help, "")
        self.vboxlayout.addWidget(self.tabWidget)
        self.label_4.setBuddy(self.cwp_retries)
        self.label_90.setBuddy(self.cwp_retries)
        self.label_6.setBuddy(self.cwp_retries)
        self.label_7.setBuddy(self.cwp_retries)
        self.label_5.setBuddy(self.cwp_retries)
        self.label_8.setBuddy(self.cwp_retries)

        self.retranslateUi(ClassicalExtrasOptionsPage)
        self.tabWidget.setCurrentIndex(3)
        self.cwp_titles.clicked['bool'].connect(self.groupBox_16.setDisabled)
        self.cea_no_aliases.toggled['bool'].connect(self.cea_credited_overrides.toggle)
        self.cea_aliases_composer.clicked['bool'].connect(self.cea_alias_overrides.setEnabled)
        self.cea_aliases.clicked['bool'].connect(self.cea_alias_overrides.setEnabled)
        self.cwp_works.clicked['bool'].connect(self.groupBox_16.setEnabled)
        self.cwp_aliases.clicked['bool'].connect(self.groupBox_20.setEnabled)
        self.cwp_extended.clicked['bool'].connect(self.groupBox_16.setEnabled)
        self.cea_ra_use.toggled['bool'].connect(self.groupBox_30.setEnabled)
        self.cwp_no_aliases.clicked['bool'].connect(self.groupBox_20.setDisabled)
        self.cea_no_aliases.clicked['bool'].connect(self.cea_alias_overrides.setDisabled)
        self.use_cea.toggled['bool'].connect(self.groupBox_23.setEnabled)
        self.use_cea.toggled['bool'].connect(self.groupBox_29.setEnabled)
        self.cea_ra_replace_ta.toggled['bool'].connect(self.cea_ra_noblank_ta.setEnabled)
        self.use_cea.toggled['bool'].connect(self.groupBox_31.setEnabled)
        self.use_cwp.toggled['bool'].connect(self.cwp_collections.setEnabled)
        self.cea_split_lyrics.toggled['bool'].connect(self.groupBox_32.setEnabled)
        self.use_cwp.toggled['bool'].connect(self.use_cache.setEnabled)
        self.use_cea.toggled['bool'].connect(self.groupBox_5.setEnabled)
        self.cea_override.toggled['bool'].connect(self.ce_tagmap_override.setEnabled)
        self.toolButton_3.toggled['bool'].connect(self.cea_source_3.setEnabled)
        self.toolButton_11.toggled['bool'].connect(self.cea_source_11.setEnabled)
        self.toolButton_6.toggled['bool'].connect(self.cea_source_6.setEnabled)
        self.use_cea.toggled['bool'].connect(self.artist_tags.setEnabled)
        self.toolButton_8.toggled['bool'].connect(self.cea_source_8.setEnabled)
        self.toolButton_12.toggled['bool'].connect(self.cea_source_12.setEnabled)
        self.toolButton_1.toggled['bool'].connect(self.cea_source_1.setEnabled)
        self.use_cea.toggled['bool'].connect(self.groupBox_11.setEnabled)
        self.toolButton_2.toggled['bool'].connect(self.cea_source_2.setEnabled)
        self.toolButton_10.toggled['bool'].connect(self.cea_source_10.setEnabled)
        self.toolButton_15.toggled['bool'].connect(self.cea_source_15.setEnabled)
        self.toolButton_14.toggled['bool'].connect(self.cea_source_14.setEnabled)
        self.toolButton_13.toggled['bool'].connect(self.cea_source_13.setEnabled)
        self.toolButton_4.toggled['bool'].connect(self.cea_source_4.setEnabled)
        self.toolButton_7.toggled['bool'].connect(self.cea_source_7.setEnabled)
        self.toolButton_9.toggled['bool'].connect(self.cea_source_9.setEnabled)
        self.toolButton_5.toggled['bool'].connect(self.cea_source_5.setEnabled)
        self.toolButton_16.toggled['bool'].connect(self.cea_source_16.setEnabled)
        self.cwp_partial.toggled['bool'].connect(self.cwp_partial_text.setEnabled)
        self.cea_arrangers.toggled['bool'].connect(self.groupBox_9.setEnabled)
        self.use_cwp.toggled['bool'].connect(self.Style.setEnabled)
        self.use_cwp.toggled['bool'].connect(self.advanced_works.setEnabled)
        self.use_cwp.toggled['bool'].connect(self.groupBox_18.setEnabled)
        self.cea_arrangers.toggled['bool'].connect(self.groupBox_28.setEnabled)
        self.use_cwp.toggled['bool'].connect(self.Tags.setEnabled)
        self.use_cea.toggled['bool'].connect(self.advanced_artists.setEnabled)
        self.use_cwp.toggled['bool'].connect(self.groupBox_12.setEnabled)
        self.use_cwp.toggled['bool'].connect(self.groupBox_17.setEnabled)
        self.cwp_use_muso_refdb.toggled['bool'].connect(self.cwp_muso_genres.setVisible)
        self.cwp_medley.toggled['bool'].connect(self.cwp_medley_text.setEnabled)
        self.cwp_use_muso_refdb.toggled['bool'].connect(self.cwp_muso_classical.setVisible)
        self.cwp_use_muso_refdb.toggled['bool'].connect(self.cwp_muso_dates.setVisible)
        self.cwp_arrangements.toggled['bool'].connect(self.cwp_arrangements_text.setEnabled)
        self.cwp_muso_genres.toggled['bool'].connect(self.cwp_genres_classical_main.setHidden)
        self.cwp_muso_periods.toggled['bool'].connect(self.cwp_period_map.setHidden)
        self.cwp_use_muso_refdb.toggled['bool'].connect(self.cwp_muso_periods.setVisible)
        self.cwp_use_muso_refdb.toggled['bool'].connect(self.cwp_muso_genres.setChecked)
        self.cwp_use_muso_refdb.toggled['bool'].connect(self.cwp_muso_classical.setChecked)
        self.cwp_use_muso_refdb.toggled['bool'].connect(self.cwp_muso_dates.setChecked)
        self.cwp_muso_periods.toggled['bool'].connect(self.label_87.setHidden)
        self.cwp_override.toggled['bool'].connect(self.ce_genres_override.setEnabled)
        self.cwp_use_muso_refdb.toggled['bool'].connect(self.cwp_muso_periods.setChecked)
        self.cwp_muso_classical.toggled['bool'].connect(self.cwp_genres_arranger_as_composer.setVisible)
        self.cwp_muso_dates.toggled['bool'].connect(self.cwp_periods_arranger_as_composer.setVisible)
        QtCore.QMetaObject.connectSlotsByName(ClassicalExtrasOptionsPage)

    def retranslateUi(self, ClassicalExtrasOptionsPage):
        _translate = QtCore.QCoreApplication.translate
        self.Artists.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p><br/></p></body></html>"))
        self.use_cea.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>should be selected otherwise this section will not run</p></body></html>"))
        self.use_cea.setText(_translate("ClassicalExtrasOptionsPage", "Create extra artist metadata (MUST BE TICKED FOR THIS SECTION TO RUN)"))
        self.label_79.setText(_translate("ClassicalExtrasOptionsPage", "(Note that the \"infer work-types option has moved to the \"genres\" tab)"))
        self.label_22.setText(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>The next section does not change the contents of &quot;artist&quot; or &quot;album artist&quot; tags - it only affects writer (composer etc.) and peformer tags, by using as-credited/alias names from the artist data for the release.</p></body></html>"))
        self.label_43.setText(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p><span style=\" font-weight:600; font-style:italic;\">The naming style for \'artist\' tags is set in the main Picard Options-&gt;Metadata section</span></p></body></html>"))
        self.groupBox_23.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>&quot;Work-artists&quot; are types such as composer, writer, arranger and lyricist who belong to the MusicBrainz Work-Artist relationship</p><p>&quot;Performers&quot; are types such as performer and conductor who belong to the MusicBrainz Recording-Artist relationship</p></body></html>"))
        self.groupBox_23.setTitle(_translate("ClassicalExtrasOptionsPage", "Work-artist/performer naming options"))
        self.groupBox_24.setTitle(_translate("ClassicalExtrasOptionsPage", "MusicBrainz standard names and Aliases"))
        self.cea_no_aliases.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Do not use aliases (but may be replaced by as-credited name)</p></body></html>"))
        self.cea_no_aliases.setText(_translate("ClassicalExtrasOptionsPage", "Use MB standard names"))
        self.cea_aliases.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Alias will only be available for use if the work-artist/performer is also a release artist, recording artist or track artist.</p></body></html>"))
        self.cea_aliases.setText(_translate("ClassicalExtrasOptionsPage", "Use alias for all work-artists/performers"))
        self.cea_aliases_composer.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Only use alias (if available) for work-artists (writers, composers, arrangers, lyricists etc.)</p></body></html>"))
        self.cea_aliases_composer.setText(_translate("ClassicalExtrasOptionsPage", "Use alias for work-artists only"))
        self.groupBox_25.setTitle(_translate("ClassicalExtrasOptionsPage", "Sub-options"))
        self.cea_alias_overrides.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Alias (if it exists) will over-ride as-credited</p></body></html>"))
        self.cea_alias_overrides.setText(_translate("ClassicalExtrasOptionsPage", "Alias over-rides credited-as"))
        self.cea_credited_overrides.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>As-credited (if it exists) will over-ride alias</p></body></html>"))
        self.cea_credited_overrides.setText(_translate("ClassicalExtrasOptionsPage", "Credited-as over-rides MB/Alias"))
        self.cea_cyrillic.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Will be based on sort names. For cyrillic script names, patronyms will be removed.</p></body></html>"))
        self.cea_cyrillic.setText(_translate("ClassicalExtrasOptionsPage", "Fix non-Latin text in names (where possible and if not fixed by other naming options)"))
        self.groupBox_7.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p><br/></p></body></html>"))
        self.groupBox_7.setTitle(_translate("ClassicalExtrasOptionsPage", "Credited-as options:-"))
        self.groupBox_26.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Select the source for \'as-credited\' names - whether these are applied depends on the sub-options choices.</p></body></html>"))
        self.groupBox_26.setTitle(_translate("ClassicalExtrasOptionsPage", "Names to use..."))
        self.cea_recording_credited.setText(_translate("ClassicalExtrasOptionsPage", "Use \"credited as\" name for work-artists/performers who are recording artists"))
        self.cea_group_credited.setText(_translate("ClassicalExtrasOptionsPage", "and/or release group artists"))
        self.cea_credited.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p><br/></p></body></html>"))
        self.cea_credited.setText(_translate("ClassicalExtrasOptionsPage", "and/or release artists"))
        self.cea_release_relationship_credited.setText(_translate("ClassicalExtrasOptionsPage", "and/or release relationship artists"))
        self.cea_recording_relationship_credited.setText(_translate("ClassicalExtrasOptionsPage", "and/or recording relationship artists"))
        self.cea_track_credited.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p><br/></p></body></html>"))
        self.cea_track_credited.setText(_translate("ClassicalExtrasOptionsPage", "and/or track artists"))
        self.label_24.setText(_translate("ClassicalExtrasOptionsPage", "The above are applied in sequence - e.g. track artist credit will over-ride release artist credit."))
        self.label_88.setText(_translate("ClassicalExtrasOptionsPage", "Names are cached. A restart is necessary if any of the above name sources are removed."))
        self.groupBox_27.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Select the tag types where any \'as-credited\' names will be applied - whether these are applied depends on the sub-options choices.</p></body></html>"))
        self.groupBox_27.setTitle(_translate("ClassicalExtrasOptionsPage", "Places to use them ..."))
        self.cea_performer_credited.setText(_translate("ClassicalExtrasOptionsPage", "Use for performing artists"))
        self.cea_composer_credited.setText(_translate("ClassicalExtrasOptionsPage", "Use for work-artists"))
        self.groupBox_29.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Select recording artist options (see &quot;What\'s this&quot;)</p></body></html>"))
        self.groupBox_29.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>In MusicBrainz, the recording artist may be different from the track artist. For classical music, the MusicBrainz guidelines state that the track artist should be the composer; however the recording artist(s) is/are usually the principal performer(s).</p><p>Classical Extras puts the recording artists into \'hidden variables\' (as a minimum) using the chosen naming convention.</p><p>There is also option to allow you to replace the track artist by the recording artist (or to merge them). The chosen action will be applied to the \'artist\', \'artists\', \'artistsort\' and \'artists_sort\' tags. Note that \'artist\' is a single-valued string whereas \'artists\' is a list and may be multi-valued. Lists are properly merged, but because the \'artist\' string may have different join-phrases etc, a merged tag may have the recording artist(s) in brackets after the track artist(s).</p></body></html>"))
        self.groupBox_29.setTitle(_translate("ClassicalExtrasOptionsPage", "Recording artist options"))
        self.groupBox_34.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>In classical music (in MusicBrainz), recording artists will usually be performers whereas track artists are composers. By default, the naming convention for performers (set in the previous section) will be used (although only the as-credited name set for the recording artist will be applied). Alternatively, the naming convention for track artists can be used - which is determined by the main Picard metadat options.</p></body></html>"))
        self.groupBox_34.setTitle(_translate("ClassicalExtrasOptionsPage", "Naming convention as for ..."))
        self.cea_ra_trackartist.setText(_translate("ClassicalExtrasOptionsPage", "...track artist (set in Picard options)"))
        self.cea_ra_performer.setText(_translate("ClassicalExtrasOptionsPage", "... perfomers (set above)"))
        self.cea_ra_use.setText(_translate("ClassicalExtrasOptionsPage", "Use recording artists to update track artists ->"))
        self.groupBox_30.setTitle(_translate("ClassicalExtrasOptionsPage", "Replace/merge options"))
        self.cea_ra_replace_ta.setText(_translate("ClassicalExtrasOptionsPage", "Replace track artist by recording artist"))
        self.cea_ra_noblank_ta.setText(_translate("ClassicalExtrasOptionsPage", "Only replace if rec. artist exists"))
        self.cea_ra_merge_ta.setText(_translate("ClassicalExtrasOptionsPage", "Merge track artist and recording artist"))
        self.groupBox_5.setTitle(_translate("ClassicalExtrasOptionsPage", "Other artist options"))
        self.groupBox_9.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Enter text to appear in annotations. Do not use any quotation marks.</p></body></html>"))
        self.groupBox_9.setTitle(_translate("ClassicalExtrasOptionsPage", "Annotations - performers and lyricists"))
        self.label_44.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Annotation to include with &quot;chorus master&quot; in conductor tag.</p></body></html>"))
        self.label_44.setText(_translate("ClassicalExtrasOptionsPage", "Chorus Master"))
        self.label_46.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Annotation to include for &quot;concert master&quot; in performer tag.</p></body></html>"))
        self.label_46.setText(_translate("ClassicalExtrasOptionsPage", "Concert Master"))
        self.label_34.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Annotation for lyricist, to include in lyricist tag</p></body></html>"))
        self.label_34.setText(_translate("ClassicalExtrasOptionsPage", "Lyricist"))
        self.label_26.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Annotation for librettist, to include in lyricist tag</p></body></html>"))
        self.label_26.setText(_translate("ClassicalExtrasOptionsPage", "Librettist"))
        self.label_30.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Annotation for translator, to include in lyricist tag</p></body></html>"))
        self.label_30.setText(_translate("ClassicalExtrasOptionsPage", "Translator"))
        self.groupBox_8.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Select as required. See &quot;What\'s this&quot; for details.</p></body></html>"))
        self.cea_arrangers.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p><br/></p></body></html>"))
        self.cea_arrangers.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>This will gather together, for example, any arranger-type information from the recording, work or parent works and place it in the &quot;arranger&quot; tag (\'host\' tag), with the annotation (see details to right of this box) in brackets. All arranger types will also be put in a hidden variable, e.g. _cwp_orchestrators. The table below shows the artist types, host tag and hidden variable for each artist type.</p><p>| Artist type | Host tag | Hidden variable |</p><p>| ----------------- | ------------------| -------------------------------------- |</p><p>| writer | composer | writers |</p><p>| lyricist | lyricist | lyricists |</p><p>| librettist | lyricist | librettists |</p><p>| revised by | arranger | revisors |</p><p>| translator | lyricist | translators |</p><p>| arranger | arranger | arrangers |</p><p>| reconstructed by | arranger | reconstructors |</p><p>| orchestrator | arranger | orchestrators |</p><p>| instrument arranger | arranger | arrangers (with instrument type in brackets) |</p><p>| vocal arranger | arranger | arrangers (with voice type in brackets) |</p><p>| chorus master | conductor | chorusmasters |</p><p>| concertmaster | performer (with annotation as a sub-key) | leaders |</p></body></html>"))
        self.cea_arrangers.setText(_translate("ClassicalExtrasOptionsPage", "Modify host tags and include annotations (see =>)"))
        self.cea_composer_album.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p><br/></p></body></html>"))
        self.cea_composer_album.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>This will add the composer(s) last name(s) before the album name, if they are listed as album artists. If there is more than one composer, they will be listed in the descending order of the length of their music on the release.</p></body></html>"))
        self.cea_composer_album.setText(_translate("ClassicalExtrasOptionsPage", "Name album as \"Composer Last Name(s): Album Name\""))
        self.cea_no_lyricists.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>This applies to both the Picard \'lyricist\' tag and the related internal plugin hidden variables \'_cwp_lyricists\' etc.</p></body></html>"))
        self.cea_no_lyricists.setText(_translate("ClassicalExtrasOptionsPage", "Do not write \'lyricist\' tag if no vocal performers"))
        self.cea_inst_credit.setText(_translate("ClassicalExtrasOptionsPage", "Use \"credited-as\" name for instrument"))
        self.cea_no_solo.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Select to eliminate &quot;additional&quot;, &quot;solo&quot; or &quot;guest&quot; from instrument description</p></body></html>"))
        self.cea_no_solo.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>MusicBrainz permits the use of &quot;solo&quot;, &quot;guest&quot; and &quot;additional&quot; as instrument attributes although, for classical music, its use should be fairly rare - usually only if explicitly stated as a &quot;solo&quot; on the the sleevenotes. Classical Extras provides the option to exclude these attributes (the default), but you may wish to enable them for certain releases or non-Classical / cross-over releases.</p></body></html>"))
        self.cea_no_solo.setText(_translate("ClassicalExtrasOptionsPage", "Do not include attributes (e.g. \'solo\') in an instrument type"))
        self.groupBox_28.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Enter text to appear in annotations. Do not use any quotation marks.</p></body></html>"))
        self.groupBox_28.setTitle(_translate("ClassicalExtrasOptionsPage", "Annotations - writers and arrangers"))
        self.label_56.setText(_translate("ClassicalExtrasOptionsPage", "Writer"))
        self.label_54.setText(_translate("ClassicalExtrasOptionsPage", "Arranger"))
        self.label_45.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Text with which to annotate orchestrator in the arranger tag.</p></body></html>"))
        self.label_45.setText(_translate("ClassicalExtrasOptionsPage", "Orchestrator"))
        self.label_32.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Annotation for &quot;reconstructed by&quot;, to include in arranger tag</p></body></html>"))
        self.label_32.setText(_translate("ClassicalExtrasOptionsPage", "Reconstructed by"))
        self.label_28.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Annotation for &quot;revised by&quot;, to include in arranger tag tag</p></body></html>"))
        self.label_28.setText(_translate("ClassicalExtrasOptionsPage", "Revised by"))
        self.groupBox_31.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p><span style=\" font-weight:600;\">Please note that this section operates on the underlying input file tags, not the Picard-generated tags (MusicBrainz does not have lyrics)</span></p><p>  Sometimes &quot;lyrics&quot; tags can contain album notes (repeated for every track in an album) as well as track notes and lyrics. This section will filter out the common text and place it in a different tag from the text which is unique to each track.</p></body></html>"))
        self.groupBox_31.setTitle(_translate("ClassicalExtrasOptionsPage", "Lyrics"))
        self.cea_split_lyrics.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>enables this section</p></body></html>"))
        self.cea_split_lyrics.setText(_translate("ClassicalExtrasOptionsPage", "Split lyrics tag into track and album levels"))
        self.groupBox_32.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Enter a valid tag name (no spaces, punctuation or special charcaters other than underline; use lower case)</p></body></html>"))
        self.label_50.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>The name of the lyrics file tag in the input file (normally just \'lyrics\')</p></body></html>"))
        self.label_50.setText(_translate("ClassicalExtrasOptionsPage", "Incoming lyrics tag (i.e. file tag)"))
        self.label_51.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>The name of the tag where common text should be placed</p></body></html>"))
        self.label_51.setText(_translate("ClassicalExtrasOptionsPage", "Tag for album notes / lyrics"))
        self.label_52.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>The name of the tag where notes/lyrics unique to a track should be placed</p></body></html>"))
        self.label_52.setText(_translate("ClassicalExtrasOptionsPage", "Tag for track notes / lyrics"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Artists), _translate("ClassicalExtrasOptionsPage", "Artists"))
        self.label_18.setText(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p><span style=\" font-size:9pt; font-weight:600;\">N.B. Artist options (1st tab) need to be enabled for this section to run</span></p></body></html>"))
        self.groupBox_11.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p><br/></p></body></html>"))
        self.groupBox_11.setTitle(_translate("ClassicalExtrasOptionsPage", "Initial tag processing"))
        self.artist_tags.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Any tags specified in the next two rows will be blanked before applying the tag sources described in the following section. NB this applies only to Picard-generated tags, not to other tags which might pre-exist on the file: to blank those, use the main Options-&gt;Tags page. Comma-separate the tag names within the rows and note that these names are case-sensitive.</p></body></html>"))
        self.artist_tags.setTitle(_translate("ClassicalExtrasOptionsPage", "Remove Picard-generated tags before applying subsequent actions? (NB existing LOCAL FILE tags will remain unless cleared using standard Picard options - to remove these, overwrite them in the next section)"))
        self.label_3.setText(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p><span style=\" text-decoration: underline;\">Picard-generated</span> tags to blank (comma-separated, case-sensitive):</p></body></html>"))
        self.cea_blank_tag.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Enter file tag names, separated by commas</p></body></html>"))
        self.cea_blank_tag_2.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Enter file tag names, separated by commas</p></body></html>"))
        self.label_19.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p><br/></p></body></html>"))
        self.label_19.setText(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>List <span style=\" text-decoration: underline;\">existing file tags</span> which will be appended to rather than over-written by tag mapping (NB this will keep tags even if &quot;Clear existing tags&quot; is selected on main options):-</p></body></html>"))
        self.cea_keep.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Enter file tag names, separated by commas</p></body></html>"))
        self.cea_keep.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>This refers to the tags which already exist on files which have been matched to MusicBrainz in the right-hand panel, not the tags generated by Picard from the MusicBrainz database. Normally, Picard cannot process these tags - either it will overwrite them (if it creates a similarly named tag), clear them (if \'Clear existing tags\' is specified in the main Options-&gt;Tags screen) or keep them (if \'Preserve these tags...\' is specified after the \'Clear existing tags\' option). Classical Extras allows a further option - for the tags to be appended to in the tag mapping section (see below). List file tags which will be appended to rather than over-written by tag mapping (NB this will keep tags even if &quot;Clear existing tags&quot; is selected on main options). In addition, certain existing tags may be used by Classical Extras - in particular genre-related tags (see the Genres etc. options tab for more).</p><p>Note that if &quot;Split lyrics tag&quot; is specified (see the Artists tab), then the tag named there will be included in the \'Keep file tags\' list and does not need to be added in this section.</p></body></html>"))
        self.cea_clear_tags.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Note that the main Picard option &quot;Clear existing tags&quot; should be <span style=\" text-decoration: underline;\">unchecked</span> for this option to operate in preference to that Picard option. The difference is that this option <span style=\" text-decoration: underline;\">will not intefere with cover art</span>, whereas the main Picard option will remove previous cover art.</p></body></html>"))
        self.cea_clear_tags.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>If selected: the bottom pane of Picard will only show tags which have been generated from the MusicBrainz lookups plus any existing file tags which are listed above or in the main options &quot;Preserve tags...&quot;.</p><p>This does not mean that the file tags will be removed when saving the file. For that to happen, &quot;Clear existing tags&quot; needs to be selected in the main options.</p></body></html>"))
        self.cea_clear_tags.setText(_translate("ClassicalExtrasOptionsPage", "Do not show any file tags that are NOT listed above AND NOT listed in the main Picard \"Preserve tags...\" option (Options->Tags), even if \"Clear existing tags\" is not selected."))
        self.artist_tags_2.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Enter tags, separated by commas.</p></body></html>"))
        self.artist_tags_2.setTitle(_translate("ClassicalExtrasOptionsPage", "Tag map details"))
        self.textBrowser.setHtml(_translate("ClassicalExtrasOptionsPage", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8pt; font-weight:72; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600; text-decoration: underline;\">Notes: </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Click &quot;Source from:&quot; button to edit source tags.</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Any valid Picard-generated tag can be entered in the &quot;source&quot; box, as well as Classical Extras sources, and mapped into other tags - not just restricted to artists.</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">To put a constant in a tag, type it into the source box preceded by a backslash \\.</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">In all cases, the source will be APPENDED to the Picard tag. To replace the standard tag, first blank it in the section above - add it back later in the list below if required (e.g. artist -&gt; artist).</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">BUT note that any existing LOCAL FILE tag will be replaced by (not appended with) any Picard/Classical Extras tag UNLESS specified in the list box above.</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">These tag-mapping options may be omitted from the over-riding of artist options - see advanced tab</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">For more help seethe readme.</p></body></html>"))
        self.toolButton_1.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click to edit sources"))
        self.toolButton_1.setText(_translate("ClassicalExtrasOptionsPage", "Source from:"))
        self.cea_source_1.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click button to edit. See notes above."))
        self.cea_source_1.setItemText(1, _translate("ClassicalExtrasOptionsPage", "album_soloists, album_conductors, album_ensembles"))
        self.cea_source_1.setItemText(2, _translate("ClassicalExtrasOptionsPage", "soloists, conductors, ensembles, album_composers, composers"))
        self.cea_source_1.setItemText(3, _translate("ClassicalExtrasOptionsPage", "album_soloists"))
        self.cea_source_1.setItemText(4, _translate("ClassicalExtrasOptionsPage", "album_conductors"))
        self.cea_source_1.setItemText(5, _translate("ClassicalExtrasOptionsPage", "album_ensembles"))
        self.cea_source_1.setItemText(6, _translate("ClassicalExtrasOptionsPage", "album_composers"))
        self.cea_source_1.setItemText(7, _translate("ClassicalExtrasOptionsPage", "album_composer_lastnames"))
        self.cea_source_1.setItemText(8, _translate("ClassicalExtrasOptionsPage", "soloists"))
        self.cea_source_1.setItemText(9, _translate("ClassicalExtrasOptionsPage", "soloist_names"))
        self.cea_source_1.setItemText(10, _translate("ClassicalExtrasOptionsPage", "ensembles"))
        self.cea_source_1.setItemText(11, _translate("ClassicalExtrasOptionsPage", "ensemble_names"))
        self.cea_source_1.setItemText(12, _translate("ClassicalExtrasOptionsPage", "composers"))
        self.cea_source_1.setItemText(13, _translate("ClassicalExtrasOptionsPage", "arrangers"))
        self.cea_source_1.setItemText(14, _translate("ClassicalExtrasOptionsPage", "orchestrators"))
        self.cea_source_1.setItemText(15, _translate("ClassicalExtrasOptionsPage", "conductors"))
        self.cea_source_1.setItemText(16, _translate("ClassicalExtrasOptionsPage", "chorusmasters"))
        self.cea_source_1.setItemText(17, _translate("ClassicalExtrasOptionsPage", "leaders"))
        self.cea_source_1.setItemText(18, _translate("ClassicalExtrasOptionsPage", "support_performers"))
        self.cea_source_1.setItemText(19, _translate("ClassicalExtrasOptionsPage", "work_type"))
        self.cea_source_1.setItemText(20, _translate("ClassicalExtrasOptionsPage", "release"))
        self.label_21.setText(_translate("ClassicalExtrasOptionsPage", "into tags:"))
        self.cea_tag_1.setToolTip(_translate("ClassicalExtrasOptionsPage", "Enter comma-separated list of tags"))
        self.cea_cond_1.setText(_translate("ClassicalExtrasOptionsPage", "Conditional?"))
        self.toolButton_2.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click to edit sources"))
        self.toolButton_2.setText(_translate("ClassicalExtrasOptionsPage", "Source from:"))
        self.cea_source_2.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click button to edit. See notes above."))
        self.cea_source_2.setItemText(1, _translate("ClassicalExtrasOptionsPage", "album_soloists, album_conductors, album_ensembles"))
        self.cea_source_2.setItemText(2, _translate("ClassicalExtrasOptionsPage", "soloists, conductors, ensembles, album_composers, composers"))
        self.cea_source_2.setItemText(3, _translate("ClassicalExtrasOptionsPage", "album_soloists"))
        self.cea_source_2.setItemText(4, _translate("ClassicalExtrasOptionsPage", "album_conductors"))
        self.cea_source_2.setItemText(5, _translate("ClassicalExtrasOptionsPage", "album_ensembles"))
        self.cea_source_2.setItemText(6, _translate("ClassicalExtrasOptionsPage", "album_composers"))
        self.cea_source_2.setItemText(7, _translate("ClassicalExtrasOptionsPage", "album_composer_lastnames"))
        self.cea_source_2.setItemText(8, _translate("ClassicalExtrasOptionsPage", "soloists"))
        self.cea_source_2.setItemText(9, _translate("ClassicalExtrasOptionsPage", "soloist_names"))
        self.cea_source_2.setItemText(10, _translate("ClassicalExtrasOptionsPage", "ensembles"))
        self.cea_source_2.setItemText(11, _translate("ClassicalExtrasOptionsPage", "ensemble_names"))
        self.cea_source_2.setItemText(12, _translate("ClassicalExtrasOptionsPage", "composers"))
        self.cea_source_2.setItemText(13, _translate("ClassicalExtrasOptionsPage", "arrangers"))
        self.cea_source_2.setItemText(14, _translate("ClassicalExtrasOptionsPage", "orchestrators"))
        self.cea_source_2.setItemText(15, _translate("ClassicalExtrasOptionsPage", "conductors"))
        self.cea_source_2.setItemText(16, _translate("ClassicalExtrasOptionsPage", "chorusmasters"))
        self.cea_source_2.setItemText(17, _translate("ClassicalExtrasOptionsPage", "leaders"))
        self.cea_source_2.setItemText(18, _translate("ClassicalExtrasOptionsPage", "support_performers"))
        self.cea_source_2.setItemText(19, _translate("ClassicalExtrasOptionsPage", "work_type"))
        self.cea_source_2.setItemText(20, _translate("ClassicalExtrasOptionsPage", "release"))
        self.label_23.setText(_translate("ClassicalExtrasOptionsPage", "into tags:"))
        self.cea_tag_2.setToolTip(_translate("ClassicalExtrasOptionsPage", "Enter comma-separated list of tags"))
        self.cea_cond_2.setText(_translate("ClassicalExtrasOptionsPage", "Conditional?"))
        self.toolButton_3.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click to edit sources"))
        self.toolButton_3.setText(_translate("ClassicalExtrasOptionsPage", "Source from:"))
        self.cea_source_3.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click button to edit. See notes above."))
        self.cea_source_3.setItemText(1, _translate("ClassicalExtrasOptionsPage", "album_soloists, album_conductors, album_ensembles"))
        self.cea_source_3.setItemText(2, _translate("ClassicalExtrasOptionsPage", "soloists, conductors, ensembles, album_composers, composers"))
        self.cea_source_3.setItemText(3, _translate("ClassicalExtrasOptionsPage", "album_soloists"))
        self.cea_source_3.setItemText(4, _translate("ClassicalExtrasOptionsPage", "album_conductors"))
        self.cea_source_3.setItemText(5, _translate("ClassicalExtrasOptionsPage", "album_ensembles"))
        self.cea_source_3.setItemText(6, _translate("ClassicalExtrasOptionsPage", "album_composers"))
        self.cea_source_3.setItemText(7, _translate("ClassicalExtrasOptionsPage", "album_composer_lastnames"))
        self.cea_source_3.setItemText(8, _translate("ClassicalExtrasOptionsPage", "soloists"))
        self.cea_source_3.setItemText(9, _translate("ClassicalExtrasOptionsPage", "soloist_names"))
        self.cea_source_3.setItemText(10, _translate("ClassicalExtrasOptionsPage", "ensembles"))
        self.cea_source_3.setItemText(11, _translate("ClassicalExtrasOptionsPage", "ensemble_names"))
        self.cea_source_3.setItemText(12, _translate("ClassicalExtrasOptionsPage", "composers"))
        self.cea_source_3.setItemText(13, _translate("ClassicalExtrasOptionsPage", "arrangers"))
        self.cea_source_3.setItemText(14, _translate("ClassicalExtrasOptionsPage", "orchestrators"))
        self.cea_source_3.setItemText(15, _translate("ClassicalExtrasOptionsPage", "conductors"))
        self.cea_source_3.setItemText(16, _translate("ClassicalExtrasOptionsPage", "chorusmasters"))
        self.cea_source_3.setItemText(17, _translate("ClassicalExtrasOptionsPage", "leaders"))
        self.cea_source_3.setItemText(18, _translate("ClassicalExtrasOptionsPage", "support_performers"))
        self.cea_source_3.setItemText(19, _translate("ClassicalExtrasOptionsPage", "work_type"))
        self.cea_source_3.setItemText(20, _translate("ClassicalExtrasOptionsPage", "release"))
        self.label_25.setText(_translate("ClassicalExtrasOptionsPage", "into tags:"))
        self.cea_tag_3.setToolTip(_translate("ClassicalExtrasOptionsPage", "Enter comma-separated list of tags"))
        self.cea_cond_3.setText(_translate("ClassicalExtrasOptionsPage", "Conditional?"))
        self.toolButton_4.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click to edit sources"))
        self.toolButton_4.setText(_translate("ClassicalExtrasOptionsPage", "Source from:"))
        self.cea_source_4.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click button to edit. See notes above."))
        self.cea_source_4.setItemText(1, _translate("ClassicalExtrasOptionsPage", "album_soloists, album_conductors, album_ensembles"))
        self.cea_source_4.setItemText(2, _translate("ClassicalExtrasOptionsPage", "soloists, conductors, ensembles, album_composers, composers"))
        self.cea_source_4.setItemText(3, _translate("ClassicalExtrasOptionsPage", "album_soloists"))
        self.cea_source_4.setItemText(4, _translate("ClassicalExtrasOptionsPage", "album_conductors"))
        self.cea_source_4.setItemText(5, _translate("ClassicalExtrasOptionsPage", "album_ensembles"))
        self.cea_source_4.setItemText(6, _translate("ClassicalExtrasOptionsPage", "album_composers"))
        self.cea_source_4.setItemText(7, _translate("ClassicalExtrasOptionsPage", "album_composer_lastnames"))
        self.cea_source_4.setItemText(8, _translate("ClassicalExtrasOptionsPage", "soloists"))
        self.cea_source_4.setItemText(9, _translate("ClassicalExtrasOptionsPage", "soloist_names"))
        self.cea_source_4.setItemText(10, _translate("ClassicalExtrasOptionsPage", "ensembles"))
        self.cea_source_4.setItemText(11, _translate("ClassicalExtrasOptionsPage", "ensemble_names"))
        self.cea_source_4.setItemText(12, _translate("ClassicalExtrasOptionsPage", "composers"))
        self.cea_source_4.setItemText(13, _translate("ClassicalExtrasOptionsPage", "arrangers"))
        self.cea_source_4.setItemText(14, _translate("ClassicalExtrasOptionsPage", "orchestrators"))
        self.cea_source_4.setItemText(15, _translate("ClassicalExtrasOptionsPage", "conductors"))
        self.cea_source_4.setItemText(16, _translate("ClassicalExtrasOptionsPage", "chorusmasters"))
        self.cea_source_4.setItemText(17, _translate("ClassicalExtrasOptionsPage", "leaders"))
        self.cea_source_4.setItemText(18, _translate("ClassicalExtrasOptionsPage", "support_performers"))
        self.cea_source_4.setItemText(19, _translate("ClassicalExtrasOptionsPage", "work_type"))
        self.cea_source_4.setItemText(20, _translate("ClassicalExtrasOptionsPage", "release"))
        self.label_27.setText(_translate("ClassicalExtrasOptionsPage", "into tags:"))
        self.cea_tag_4.setToolTip(_translate("ClassicalExtrasOptionsPage", "Enter comma-separated list of tags"))
        self.cea_cond_4.setText(_translate("ClassicalExtrasOptionsPage", "Conditional?"))
        self.toolButton_5.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click to edit sources"))
        self.toolButton_5.setText(_translate("ClassicalExtrasOptionsPage", "Source from:"))
        self.cea_source_5.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click button to edit. See notes above."))
        self.cea_source_5.setItemText(1, _translate("ClassicalExtrasOptionsPage", "album_soloists, album_conductors, album_ensembles"))
        self.cea_source_5.setItemText(2, _translate("ClassicalExtrasOptionsPage", "soloists, conductors, ensembles, album_composers, composers"))
        self.cea_source_5.setItemText(3, _translate("ClassicalExtrasOptionsPage", "album_soloists"))
        self.cea_source_5.setItemText(4, _translate("ClassicalExtrasOptionsPage", "album_conductors"))
        self.cea_source_5.setItemText(5, _translate("ClassicalExtrasOptionsPage", "album_ensembles"))
        self.cea_source_5.setItemText(6, _translate("ClassicalExtrasOptionsPage", "album_composers"))
        self.cea_source_5.setItemText(7, _translate("ClassicalExtrasOptionsPage", "album_composer_lastnames"))
        self.cea_source_5.setItemText(8, _translate("ClassicalExtrasOptionsPage", "soloists"))
        self.cea_source_5.setItemText(9, _translate("ClassicalExtrasOptionsPage", "soloist_names"))
        self.cea_source_5.setItemText(10, _translate("ClassicalExtrasOptionsPage", "ensembles"))
        self.cea_source_5.setItemText(11, _translate("ClassicalExtrasOptionsPage", "ensemble_names"))
        self.cea_source_5.setItemText(12, _translate("ClassicalExtrasOptionsPage", "composers"))
        self.cea_source_5.setItemText(13, _translate("ClassicalExtrasOptionsPage", "arrangers"))
        self.cea_source_5.setItemText(14, _translate("ClassicalExtrasOptionsPage", "orchestrators"))
        self.cea_source_5.setItemText(15, _translate("ClassicalExtrasOptionsPage", "conductors"))
        self.cea_source_5.setItemText(16, _translate("ClassicalExtrasOptionsPage", "chorusmasters"))
        self.cea_source_5.setItemText(17, _translate("ClassicalExtrasOptionsPage", "leaders"))
        self.cea_source_5.setItemText(18, _translate("ClassicalExtrasOptionsPage", "support_performers"))
        self.cea_source_5.setItemText(19, _translate("ClassicalExtrasOptionsPage", "work_type"))
        self.cea_source_5.setItemText(20, _translate("ClassicalExtrasOptionsPage", "release"))
        self.label_29.setText(_translate("ClassicalExtrasOptionsPage", "into tags:"))
        self.cea_tag_5.setToolTip(_translate("ClassicalExtrasOptionsPage", "Enter comma-separated list of tags"))
        self.cea_cond_5.setText(_translate("ClassicalExtrasOptionsPage", "Conditional?"))
        self.toolButton_6.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click to edit sources"))
        self.toolButton_6.setText(_translate("ClassicalExtrasOptionsPage", "Source from:"))
        self.cea_source_6.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click button to edit. See notes above."))
        self.cea_source_6.setItemText(1, _translate("ClassicalExtrasOptionsPage", "album_soloists, album_conductors, album_ensembles"))
        self.cea_source_6.setItemText(2, _translate("ClassicalExtrasOptionsPage", "soloists, conductors, ensembles, album_composers, composers"))
        self.cea_source_6.setItemText(3, _translate("ClassicalExtrasOptionsPage", "album_soloists"))
        self.cea_source_6.setItemText(4, _translate("ClassicalExtrasOptionsPage", "album_conductors"))
        self.cea_source_6.setItemText(5, _translate("ClassicalExtrasOptionsPage", "album_ensembles"))
        self.cea_source_6.setItemText(6, _translate("ClassicalExtrasOptionsPage", "album_composers"))
        self.cea_source_6.setItemText(7, _translate("ClassicalExtrasOptionsPage", "album_composer_lastnames"))
        self.cea_source_6.setItemText(8, _translate("ClassicalExtrasOptionsPage", "soloists"))
        self.cea_source_6.setItemText(9, _translate("ClassicalExtrasOptionsPage", "soloist_names"))
        self.cea_source_6.setItemText(10, _translate("ClassicalExtrasOptionsPage", "ensembles"))
        self.cea_source_6.setItemText(11, _translate("ClassicalExtrasOptionsPage", "ensemble_names"))
        self.cea_source_6.setItemText(12, _translate("ClassicalExtrasOptionsPage", "composers"))
        self.cea_source_6.setItemText(13, _translate("ClassicalExtrasOptionsPage", "arrangers"))
        self.cea_source_6.setItemText(14, _translate("ClassicalExtrasOptionsPage", "orchestrators"))
        self.cea_source_6.setItemText(15, _translate("ClassicalExtrasOptionsPage", "conductors"))
        self.cea_source_6.setItemText(16, _translate("ClassicalExtrasOptionsPage", "chorusmasters"))
        self.cea_source_6.setItemText(17, _translate("ClassicalExtrasOptionsPage", "leaders"))
        self.cea_source_6.setItemText(18, _translate("ClassicalExtrasOptionsPage", "support_performers"))
        self.cea_source_6.setItemText(19, _translate("ClassicalExtrasOptionsPage", "work_type"))
        self.cea_source_6.setItemText(20, _translate("ClassicalExtrasOptionsPage", "release"))
        self.label_31.setText(_translate("ClassicalExtrasOptionsPage", "into tags:"))
        self.cea_tag_6.setToolTip(_translate("ClassicalExtrasOptionsPage", "Enter comma-separated list of tags"))
        self.cea_cond_6.setText(_translate("ClassicalExtrasOptionsPage", "Conditional?"))
        self.toolButton_7.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click to edit sources"))
        self.toolButton_7.setText(_translate("ClassicalExtrasOptionsPage", "Source from:"))
        self.cea_source_7.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click button to edit. See notes above."))
        self.cea_source_7.setItemText(1, _translate("ClassicalExtrasOptionsPage", "album_soloists, album_conductors, album_ensembles"))
        self.cea_source_7.setItemText(2, _translate("ClassicalExtrasOptionsPage", "soloists, conductors, ensembles, album_composers, composers"))
        self.cea_source_7.setItemText(3, _translate("ClassicalExtrasOptionsPage", "album_soloists"))
        self.cea_source_7.setItemText(4, _translate("ClassicalExtrasOptionsPage", "album_conductors"))
        self.cea_source_7.setItemText(5, _translate("ClassicalExtrasOptionsPage", "album_ensembles"))
        self.cea_source_7.setItemText(6, _translate("ClassicalExtrasOptionsPage", "album_composers"))
        self.cea_source_7.setItemText(7, _translate("ClassicalExtrasOptionsPage", "album_composer_lastnames"))
        self.cea_source_7.setItemText(8, _translate("ClassicalExtrasOptionsPage", "soloists"))
        self.cea_source_7.setItemText(9, _translate("ClassicalExtrasOptionsPage", "soloist_names"))
        self.cea_source_7.setItemText(10, _translate("ClassicalExtrasOptionsPage", "ensembles"))
        self.cea_source_7.setItemText(11, _translate("ClassicalExtrasOptionsPage", "ensemble_names"))
        self.cea_source_7.setItemText(12, _translate("ClassicalExtrasOptionsPage", "composers"))
        self.cea_source_7.setItemText(13, _translate("ClassicalExtrasOptionsPage", "arrangers"))
        self.cea_source_7.setItemText(14, _translate("ClassicalExtrasOptionsPage", "orchestrators"))
        self.cea_source_7.setItemText(15, _translate("ClassicalExtrasOptionsPage", "conductors"))
        self.cea_source_7.setItemText(16, _translate("ClassicalExtrasOptionsPage", "chorusmasters"))
        self.cea_source_7.setItemText(17, _translate("ClassicalExtrasOptionsPage", "leaders"))
        self.cea_source_7.setItemText(18, _translate("ClassicalExtrasOptionsPage", "support_performers"))
        self.cea_source_7.setItemText(19, _translate("ClassicalExtrasOptionsPage", "work_type"))
        self.cea_source_7.setItemText(20, _translate("ClassicalExtrasOptionsPage", "release"))
        self.label_33.setText(_translate("ClassicalExtrasOptionsPage", "into tags:"))
        self.cea_tag_7.setToolTip(_translate("ClassicalExtrasOptionsPage", "Enter comma-separated list of tags"))
        self.cea_cond_7.setText(_translate("ClassicalExtrasOptionsPage", "Conditional?"))
        self.toolButton_8.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click to edit sources"))
        self.toolButton_8.setText(_translate("ClassicalExtrasOptionsPage", "Source from:"))
        self.cea_source_8.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click button to edit. See notes above."))
        self.cea_source_8.setItemText(1, _translate("ClassicalExtrasOptionsPage", "album_soloists, album_conductors, album_ensembles"))
        self.cea_source_8.setItemText(2, _translate("ClassicalExtrasOptionsPage", "soloists, conductors, ensembles, album_composers, composers"))
        self.cea_source_8.setItemText(3, _translate("ClassicalExtrasOptionsPage", "album_soloists"))
        self.cea_source_8.setItemText(4, _translate("ClassicalExtrasOptionsPage", "album_conductors"))
        self.cea_source_8.setItemText(5, _translate("ClassicalExtrasOptionsPage", "album_ensembles"))
        self.cea_source_8.setItemText(6, _translate("ClassicalExtrasOptionsPage", "album_composers"))
        self.cea_source_8.setItemText(7, _translate("ClassicalExtrasOptionsPage", "album_composer_lastnames"))
        self.cea_source_8.setItemText(8, _translate("ClassicalExtrasOptionsPage", "soloists"))
        self.cea_source_8.setItemText(9, _translate("ClassicalExtrasOptionsPage", "soloist_names"))
        self.cea_source_8.setItemText(10, _translate("ClassicalExtrasOptionsPage", "ensembles"))
        self.cea_source_8.setItemText(11, _translate("ClassicalExtrasOptionsPage", "ensemble_names"))
        self.cea_source_8.setItemText(12, _translate("ClassicalExtrasOptionsPage", "composers"))
        self.cea_source_8.setItemText(13, _translate("ClassicalExtrasOptionsPage", "arrangers"))
        self.cea_source_8.setItemText(14, _translate("ClassicalExtrasOptionsPage", "orchestrators"))
        self.cea_source_8.setItemText(15, _translate("ClassicalExtrasOptionsPage", "conductors"))
        self.cea_source_8.setItemText(16, _translate("ClassicalExtrasOptionsPage", "chorusmasters"))
        self.cea_source_8.setItemText(17, _translate("ClassicalExtrasOptionsPage", "leaders"))
        self.cea_source_8.setItemText(18, _translate("ClassicalExtrasOptionsPage", "support_performers"))
        self.cea_source_8.setItemText(19, _translate("ClassicalExtrasOptionsPage", "work_type"))
        self.cea_source_8.setItemText(20, _translate("ClassicalExtrasOptionsPage", "release"))
        self.label_35.setText(_translate("ClassicalExtrasOptionsPage", "into tags:"))
        self.cea_tag_8.setToolTip(_translate("ClassicalExtrasOptionsPage", "Enter comma-separated list of tags"))
        self.cea_cond_8.setText(_translate("ClassicalExtrasOptionsPage", "Conditional?"))
        self.toolButton_9.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click to edit sources"))
        self.toolButton_9.setText(_translate("ClassicalExtrasOptionsPage", "Source from:"))
        self.cea_source_9.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click button to edit. See notes above."))
        self.cea_source_9.setItemText(1, _translate("ClassicalExtrasOptionsPage", "album_soloists, album_conductors, album_ensembles"))
        self.cea_source_9.setItemText(2, _translate("ClassicalExtrasOptionsPage", "soloists, conductors, ensembles, album_composers, composers"))
        self.cea_source_9.setItemText(3, _translate("ClassicalExtrasOptionsPage", "album_soloists"))
        self.cea_source_9.setItemText(4, _translate("ClassicalExtrasOptionsPage", "album_conductors"))
        self.cea_source_9.setItemText(5, _translate("ClassicalExtrasOptionsPage", "album_ensembles"))
        self.cea_source_9.setItemText(6, _translate("ClassicalExtrasOptionsPage", "album_composers"))
        self.cea_source_9.setItemText(7, _translate("ClassicalExtrasOptionsPage", "album_composer_lastnames"))
        self.cea_source_9.setItemText(8, _translate("ClassicalExtrasOptionsPage", "soloists"))
        self.cea_source_9.setItemText(9, _translate("ClassicalExtrasOptionsPage", "soloist_names"))
        self.cea_source_9.setItemText(10, _translate("ClassicalExtrasOptionsPage", "ensembles"))
        self.cea_source_9.setItemText(11, _translate("ClassicalExtrasOptionsPage", "ensemble_names"))
        self.cea_source_9.setItemText(12, _translate("ClassicalExtrasOptionsPage", "composers"))
        self.cea_source_9.setItemText(13, _translate("ClassicalExtrasOptionsPage", "arrangers"))
        self.cea_source_9.setItemText(14, _translate("ClassicalExtrasOptionsPage", "orchestrators"))
        self.cea_source_9.setItemText(15, _translate("ClassicalExtrasOptionsPage", "conductors"))
        self.cea_source_9.setItemText(16, _translate("ClassicalExtrasOptionsPage", "chorusmasters"))
        self.cea_source_9.setItemText(17, _translate("ClassicalExtrasOptionsPage", "leaders"))
        self.cea_source_9.setItemText(18, _translate("ClassicalExtrasOptionsPage", "support_performers"))
        self.cea_source_9.setItemText(19, _translate("ClassicalExtrasOptionsPage", "work_type"))
        self.cea_source_9.setItemText(20, _translate("ClassicalExtrasOptionsPage", "release"))
        self.label_53.setText(_translate("ClassicalExtrasOptionsPage", "into tags:"))
        self.cea_tag_9.setToolTip(_translate("ClassicalExtrasOptionsPage", "Enter comma-separated list of tags"))
        self.cea_cond_9.setText(_translate("ClassicalExtrasOptionsPage", "Conditional?"))
        self.toolButton_10.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click to edit sources"))
        self.toolButton_10.setText(_translate("ClassicalExtrasOptionsPage", "Source from:"))
        self.cea_source_10.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click button to edit. See notes above."))
        self.cea_source_10.setItemText(1, _translate("ClassicalExtrasOptionsPage", "album_soloists, album_conductors, album_ensembles"))
        self.cea_source_10.setItemText(2, _translate("ClassicalExtrasOptionsPage", "soloists, conductors, ensembles, album_composers, composers"))
        self.cea_source_10.setItemText(3, _translate("ClassicalExtrasOptionsPage", "album_soloists"))
        self.cea_source_10.setItemText(4, _translate("ClassicalExtrasOptionsPage", "album_conductors"))
        self.cea_source_10.setItemText(5, _translate("ClassicalExtrasOptionsPage", "album_ensembles"))
        self.cea_source_10.setItemText(6, _translate("ClassicalExtrasOptionsPage", "album_composers"))
        self.cea_source_10.setItemText(7, _translate("ClassicalExtrasOptionsPage", "album_composer_lastnames"))
        self.cea_source_10.setItemText(8, _translate("ClassicalExtrasOptionsPage", "soloists"))
        self.cea_source_10.setItemText(9, _translate("ClassicalExtrasOptionsPage", "soloist_names"))
        self.cea_source_10.setItemText(10, _translate("ClassicalExtrasOptionsPage", "ensembles"))
        self.cea_source_10.setItemText(11, _translate("ClassicalExtrasOptionsPage", "ensemble_names"))
        self.cea_source_10.setItemText(12, _translate("ClassicalExtrasOptionsPage", "composers"))
        self.cea_source_10.setItemText(13, _translate("ClassicalExtrasOptionsPage", "arrangers"))
        self.cea_source_10.setItemText(14, _translate("ClassicalExtrasOptionsPage", "orchestrators"))
        self.cea_source_10.setItemText(15, _translate("ClassicalExtrasOptionsPage", "conductors"))
        self.cea_source_10.setItemText(16, _translate("ClassicalExtrasOptionsPage", "chorusmasters"))
        self.cea_source_10.setItemText(17, _translate("ClassicalExtrasOptionsPage", "leaders"))
        self.cea_source_10.setItemText(18, _translate("ClassicalExtrasOptionsPage", "support_performers"))
        self.cea_source_10.setItemText(19, _translate("ClassicalExtrasOptionsPage", "work_type"))
        self.cea_source_10.setItemText(20, _translate("ClassicalExtrasOptionsPage", "release"))
        self.label_55.setText(_translate("ClassicalExtrasOptionsPage", "into tags:"))
        self.cea_tag_10.setToolTip(_translate("ClassicalExtrasOptionsPage", "Enter comma-separated list of tags"))
        self.cea_cond_10.setText(_translate("ClassicalExtrasOptionsPage", "Conditional?"))
        self.toolButton_11.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click to edit sources"))
        self.toolButton_11.setText(_translate("ClassicalExtrasOptionsPage", "Source from:"))
        self.cea_source_11.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click button to edit. See notes above."))
        self.cea_source_11.setItemText(1, _translate("ClassicalExtrasOptionsPage", "album_soloists, album_conductors, album_ensembles"))
        self.cea_source_11.setItemText(2, _translate("ClassicalExtrasOptionsPage", "soloists, conductors, ensembles, album_composers, composers"))
        self.cea_source_11.setItemText(3, _translate("ClassicalExtrasOptionsPage", "album_soloists"))
        self.cea_source_11.setItemText(4, _translate("ClassicalExtrasOptionsPage", "album_conductors"))
        self.cea_source_11.setItemText(5, _translate("ClassicalExtrasOptionsPage", "album_ensembles"))
        self.cea_source_11.setItemText(6, _translate("ClassicalExtrasOptionsPage", "album_composers"))
        self.cea_source_11.setItemText(7, _translate("ClassicalExtrasOptionsPage", "album_composer_lastnames"))
        self.cea_source_11.setItemText(8, _translate("ClassicalExtrasOptionsPage", "soloists"))
        self.cea_source_11.setItemText(9, _translate("ClassicalExtrasOptionsPage", "soloist_names"))
        self.cea_source_11.setItemText(10, _translate("ClassicalExtrasOptionsPage", "ensembles"))
        self.cea_source_11.setItemText(11, _translate("ClassicalExtrasOptionsPage", "ensemble_names"))
        self.cea_source_11.setItemText(12, _translate("ClassicalExtrasOptionsPage", "composers"))
        self.cea_source_11.setItemText(13, _translate("ClassicalExtrasOptionsPage", "arrangers"))
        self.cea_source_11.setItemText(14, _translate("ClassicalExtrasOptionsPage", "orchestrators"))
        self.cea_source_11.setItemText(15, _translate("ClassicalExtrasOptionsPage", "conductors"))
        self.cea_source_11.setItemText(16, _translate("ClassicalExtrasOptionsPage", "chorusmasters"))
        self.cea_source_11.setItemText(17, _translate("ClassicalExtrasOptionsPage", "leaders"))
        self.cea_source_11.setItemText(18, _translate("ClassicalExtrasOptionsPage", "support_performers"))
        self.cea_source_11.setItemText(19, _translate("ClassicalExtrasOptionsPage", "work_type"))
        self.cea_source_11.setItemText(20, _translate("ClassicalExtrasOptionsPage", "release"))
        self.label_57.setText(_translate("ClassicalExtrasOptionsPage", "into tags:"))
        self.cea_tag_11.setToolTip(_translate("ClassicalExtrasOptionsPage", "Enter comma-separated list of tags"))
        self.cea_cond_11.setText(_translate("ClassicalExtrasOptionsPage", "Conditional?"))
        self.toolButton_12.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click to edit sources"))
        self.toolButton_12.setText(_translate("ClassicalExtrasOptionsPage", "Source from:"))
        self.cea_source_12.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click button to edit. See notes above."))
        self.cea_source_12.setItemText(1, _translate("ClassicalExtrasOptionsPage", "album_soloists, album_conductors, album_ensembles"))
        self.cea_source_12.setItemText(2, _translate("ClassicalExtrasOptionsPage", "soloists, conductors, ensembles, album_composers, composers"))
        self.cea_source_12.setItemText(3, _translate("ClassicalExtrasOptionsPage", "album_soloists"))
        self.cea_source_12.setItemText(4, _translate("ClassicalExtrasOptionsPage", "album_conductors"))
        self.cea_source_12.setItemText(5, _translate("ClassicalExtrasOptionsPage", "album_ensembles"))
        self.cea_source_12.setItemText(6, _translate("ClassicalExtrasOptionsPage", "album_composers"))
        self.cea_source_12.setItemText(7, _translate("ClassicalExtrasOptionsPage", "album_composer_lastnames"))
        self.cea_source_12.setItemText(8, _translate("ClassicalExtrasOptionsPage", "soloists"))
        self.cea_source_12.setItemText(9, _translate("ClassicalExtrasOptionsPage", "soloist_names"))
        self.cea_source_12.setItemText(10, _translate("ClassicalExtrasOptionsPage", "ensembles"))
        self.cea_source_12.setItemText(11, _translate("ClassicalExtrasOptionsPage", "ensemble_names"))
        self.cea_source_12.setItemText(12, _translate("ClassicalExtrasOptionsPage", "composers"))
        self.cea_source_12.setItemText(13, _translate("ClassicalExtrasOptionsPage", "arrangers"))
        self.cea_source_12.setItemText(14, _translate("ClassicalExtrasOptionsPage", "orchestrators"))
        self.cea_source_12.setItemText(15, _translate("ClassicalExtrasOptionsPage", "conductors"))
        self.cea_source_12.setItemText(16, _translate("ClassicalExtrasOptionsPage", "chorusmasters"))
        self.cea_source_12.setItemText(17, _translate("ClassicalExtrasOptionsPage", "leaders"))
        self.cea_source_12.setItemText(18, _translate("ClassicalExtrasOptionsPage", "support_performers"))
        self.cea_source_12.setItemText(19, _translate("ClassicalExtrasOptionsPage", "work_type"))
        self.cea_source_12.setItemText(20, _translate("ClassicalExtrasOptionsPage", "release"))
        self.label_59.setText(_translate("ClassicalExtrasOptionsPage", "into tags:"))
        self.cea_tag_12.setToolTip(_translate("ClassicalExtrasOptionsPage", "Enter comma-separated list of tags"))
        self.cea_cond_12.setText(_translate("ClassicalExtrasOptionsPage", "Conditional?"))
        self.toolButton_13.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click to edit sources"))
        self.toolButton_13.setText(_translate("ClassicalExtrasOptionsPage", "Source from:"))
        self.cea_source_13.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click button to edit. See notes above."))
        self.cea_source_13.setItemText(1, _translate("ClassicalExtrasOptionsPage", "album_soloists, album_conductors, album_ensembles"))
        self.cea_source_13.setItemText(2, _translate("ClassicalExtrasOptionsPage", "soloists, conductors, ensembles, album_composers, composers"))
        self.cea_source_13.setItemText(3, _translate("ClassicalExtrasOptionsPage", "album_soloists"))
        self.cea_source_13.setItemText(4, _translate("ClassicalExtrasOptionsPage", "album_conductors"))
        self.cea_source_13.setItemText(5, _translate("ClassicalExtrasOptionsPage", "album_ensembles"))
        self.cea_source_13.setItemText(6, _translate("ClassicalExtrasOptionsPage", "album_composers"))
        self.cea_source_13.setItemText(7, _translate("ClassicalExtrasOptionsPage", "album_composer_lastnames"))
        self.cea_source_13.setItemText(8, _translate("ClassicalExtrasOptionsPage", "soloists"))
        self.cea_source_13.setItemText(9, _translate("ClassicalExtrasOptionsPage", "soloist_names"))
        self.cea_source_13.setItemText(10, _translate("ClassicalExtrasOptionsPage", "ensembles"))
        self.cea_source_13.setItemText(11, _translate("ClassicalExtrasOptionsPage", "ensemble_names"))
        self.cea_source_13.setItemText(12, _translate("ClassicalExtrasOptionsPage", "composers"))
        self.cea_source_13.setItemText(13, _translate("ClassicalExtrasOptionsPage", "arrangers"))
        self.cea_source_13.setItemText(14, _translate("ClassicalExtrasOptionsPage", "orchestrators"))
        self.cea_source_13.setItemText(15, _translate("ClassicalExtrasOptionsPage", "conductors"))
        self.cea_source_13.setItemText(16, _translate("ClassicalExtrasOptionsPage", "chorusmasters"))
        self.cea_source_13.setItemText(17, _translate("ClassicalExtrasOptionsPage", "leaders"))
        self.cea_source_13.setItemText(18, _translate("ClassicalExtrasOptionsPage", "support_performers"))
        self.cea_source_13.setItemText(19, _translate("ClassicalExtrasOptionsPage", "work_type"))
        self.cea_source_13.setItemText(20, _translate("ClassicalExtrasOptionsPage", "release"))
        self.label_61.setText(_translate("ClassicalExtrasOptionsPage", "into tags:"))
        self.cea_tag_13.setToolTip(_translate("ClassicalExtrasOptionsPage", "Enter comma-separated list of tags"))
        self.cea_cond_13.setText(_translate("ClassicalExtrasOptionsPage", "Conditional?"))
        self.toolButton_14.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click to edit sources"))
        self.toolButton_14.setText(_translate("ClassicalExtrasOptionsPage", "Source from:"))
        self.cea_source_14.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click button to edit. See notes above."))
        self.cea_source_14.setItemText(1, _translate("ClassicalExtrasOptionsPage", "album_soloists, album_conductors, album_ensembles"))
        self.cea_source_14.setItemText(2, _translate("ClassicalExtrasOptionsPage", "soloists, conductors, ensembles, album_composers, composers"))
        self.cea_source_14.setItemText(3, _translate("ClassicalExtrasOptionsPage", "album_soloists"))
        self.cea_source_14.setItemText(4, _translate("ClassicalExtrasOptionsPage", "album_conductors"))
        self.cea_source_14.setItemText(5, _translate("ClassicalExtrasOptionsPage", "album_ensembles"))
        self.cea_source_14.setItemText(6, _translate("ClassicalExtrasOptionsPage", "album_composers"))
        self.cea_source_14.setItemText(7, _translate("ClassicalExtrasOptionsPage", "album_composer_lastnames"))
        self.cea_source_14.setItemText(8, _translate("ClassicalExtrasOptionsPage", "soloists"))
        self.cea_source_14.setItemText(9, _translate("ClassicalExtrasOptionsPage", "soloist_names"))
        self.cea_source_14.setItemText(10, _translate("ClassicalExtrasOptionsPage", "ensembles"))
        self.cea_source_14.setItemText(11, _translate("ClassicalExtrasOptionsPage", "ensemble_names"))
        self.cea_source_14.setItemText(12, _translate("ClassicalExtrasOptionsPage", "composers"))
        self.cea_source_14.setItemText(13, _translate("ClassicalExtrasOptionsPage", "arrangers"))
        self.cea_source_14.setItemText(14, _translate("ClassicalExtrasOptionsPage", "orchestrators"))
        self.cea_source_14.setItemText(15, _translate("ClassicalExtrasOptionsPage", "conductors"))
        self.cea_source_14.setItemText(16, _translate("ClassicalExtrasOptionsPage", "chorusmasters"))
        self.cea_source_14.setItemText(17, _translate("ClassicalExtrasOptionsPage", "leaders"))
        self.cea_source_14.setItemText(18, _translate("ClassicalExtrasOptionsPage", "support_performers"))
        self.cea_source_14.setItemText(19, _translate("ClassicalExtrasOptionsPage", "work_type"))
        self.cea_source_14.setItemText(20, _translate("ClassicalExtrasOptionsPage", "release"))
        self.label_63.setText(_translate("ClassicalExtrasOptionsPage", "into tags:"))
        self.cea_tag_14.setToolTip(_translate("ClassicalExtrasOptionsPage", "Enter comma-separated list of tags"))
        self.cea_cond_14.setText(_translate("ClassicalExtrasOptionsPage", "Conditional?"))
        self.toolButton_15.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click to edit sources"))
        self.toolButton_15.setText(_translate("ClassicalExtrasOptionsPage", "Source from:"))
        self.cea_source_15.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click button to edit. See notes above."))
        self.cea_source_15.setItemText(1, _translate("ClassicalExtrasOptionsPage", "album_soloists, album_conductors, album_ensembles"))
        self.cea_source_15.setItemText(2, _translate("ClassicalExtrasOptionsPage", "soloists, conductors, ensembles, album_composers, composers"))
        self.cea_source_15.setItemText(3, _translate("ClassicalExtrasOptionsPage", "album_soloists"))
        self.cea_source_15.setItemText(4, _translate("ClassicalExtrasOptionsPage", "album_conductors"))
        self.cea_source_15.setItemText(5, _translate("ClassicalExtrasOptionsPage", "album_ensembles"))
        self.cea_source_15.setItemText(6, _translate("ClassicalExtrasOptionsPage", "album_composers"))
        self.cea_source_15.setItemText(7, _translate("ClassicalExtrasOptionsPage", "album_composer_lastnames"))
        self.cea_source_15.setItemText(8, _translate("ClassicalExtrasOptionsPage", "soloists"))
        self.cea_source_15.setItemText(9, _translate("ClassicalExtrasOptionsPage", "soloist_names"))
        self.cea_source_15.setItemText(10, _translate("ClassicalExtrasOptionsPage", "ensembles"))
        self.cea_source_15.setItemText(11, _translate("ClassicalExtrasOptionsPage", "ensemble_names"))
        self.cea_source_15.setItemText(12, _translate("ClassicalExtrasOptionsPage", "composers"))
        self.cea_source_15.setItemText(13, _translate("ClassicalExtrasOptionsPage", "arrangers"))
        self.cea_source_15.setItemText(14, _translate("ClassicalExtrasOptionsPage", "orchestrators"))
        self.cea_source_15.setItemText(15, _translate("ClassicalExtrasOptionsPage", "conductors"))
        self.cea_source_15.setItemText(16, _translate("ClassicalExtrasOptionsPage", "chorusmasters"))
        self.cea_source_15.setItemText(17, _translate("ClassicalExtrasOptionsPage", "leaders"))
        self.cea_source_15.setItemText(18, _translate("ClassicalExtrasOptionsPage", "support_performers"))
        self.cea_source_15.setItemText(19, _translate("ClassicalExtrasOptionsPage", "work_type"))
        self.cea_source_15.setItemText(20, _translate("ClassicalExtrasOptionsPage", "release"))
        self.label_65.setText(_translate("ClassicalExtrasOptionsPage", "into tags:"))
        self.cea_tag_15.setToolTip(_translate("ClassicalExtrasOptionsPage", "Enter comma-separated list of tags"))
        self.cea_cond_15.setText(_translate("ClassicalExtrasOptionsPage", "Conditional?"))
        self.toolButton_16.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click to edit sources"))
        self.toolButton_16.setText(_translate("ClassicalExtrasOptionsPage", "Source from:"))
        self.cea_source_16.setToolTip(_translate("ClassicalExtrasOptionsPage", "Click button to edit. See notes above."))
        self.cea_source_16.setItemText(1, _translate("ClassicalExtrasOptionsPage", "album_soloists, album_conductors, album_ensembles"))
        self.cea_source_16.setItemText(2, _translate("ClassicalExtrasOptionsPage", "soloists, conductors, ensembles, album_composers, composers"))
        self.cea_source_16.setItemText(3, _translate("ClassicalExtrasOptionsPage", "album_soloists"))
        self.cea_source_16.setItemText(4, _translate("ClassicalExtrasOptionsPage", "album_conductors"))
        self.cea_source_16.setItemText(5, _translate("ClassicalExtrasOptionsPage", "album_ensembles"))
        self.cea_source_16.setItemText(6, _translate("ClassicalExtrasOptionsPage", "album_composers"))
        self.cea_source_16.setItemText(7, _translate("ClassicalExtrasOptionsPage", "album_composer_lastnames"))
        self.cea_source_16.setItemText(8, _translate("ClassicalExtrasOptionsPage", "soloists"))
        self.cea_source_16.setItemText(9, _translate("ClassicalExtrasOptionsPage", "soloist_names"))
        self.cea_source_16.setItemText(10, _translate("ClassicalExtrasOptionsPage", "ensembles"))
        self.cea_source_16.setItemText(11, _translate("ClassicalExtrasOptionsPage", "ensemble_names"))
        self.cea_source_16.setItemText(12, _translate("ClassicalExtrasOptionsPage", "composers"))
        self.cea_source_16.setItemText(13, _translate("ClassicalExtrasOptionsPage", "arrangers"))
        self.cea_source_16.setItemText(14, _translate("ClassicalExtrasOptionsPage", "orchestrators"))
        self.cea_source_16.setItemText(15, _translate("ClassicalExtrasOptionsPage", "conductors"))
        self.cea_source_16.setItemText(16, _translate("ClassicalExtrasOptionsPage", "chorusmasters"))
        self.cea_source_16.setItemText(17, _translate("ClassicalExtrasOptionsPage", "leaders"))
        self.cea_source_16.setItemText(18, _translate("ClassicalExtrasOptionsPage", "support_performers"))
        self.cea_source_16.setItemText(19, _translate("ClassicalExtrasOptionsPage", "work_type"))
        self.cea_source_16.setItemText(20, _translate("ClassicalExtrasOptionsPage", "release"))
        self.label_67.setText(_translate("ClassicalExtrasOptionsPage", "into tags:"))
        self.cea_tag_16.setToolTip(_translate("ClassicalExtrasOptionsPage", "Enter comma-separated list of tags"))
        self.cea_cond_16.setText(_translate("ClassicalExtrasOptionsPage", "Conditional?"))
        self.label_42.setText(_translate("ClassicalExtrasOptionsPage", "(If source is empty, tag will be left unchanged)                                                                                                                                        "))
        self.label_17.setText(_translate("ClassicalExtrasOptionsPage", "(Conditional tags will only be filled if previously empty)"))
        self.cea_tag_sort.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Select to include sort-tags, where available. See<span style=\" font-style:italic;\"> &quot;What\'s this?&quot;</span>  for more details.</p></body></html>"))
        self.cea_tag_sort.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>If a sort tag is associated with the source tag then the sort names will be placed in a sort tag corresponding to the destination tag. Note that the only explicit sort tags written by Picard are for artist, albumartist and composer. Piacrd also writes hidden variables \'_artists_sort\' and \'albumartists_sort\' (note the plurals - these are the sort tags for multi-valued alternatives \'artists\' and \'_albumartists\'). To be consistent with this approach, the plugin writes hidden variables for other tags - e.g. \'_arranger_sort\'. The plugin also writes hidden sort variables for the various hidden artist variables - e.g. \'_cwp_librettists\' has a matching sort variable \'_cwp_librettists_sort\'. Therefore most artist-type sources <span style=\" font-weight:600;\">will</span> have a sort tag/variable associated with them and these will be placed in a destination sort tag if this option is selected -<span style=\" font-weight:600;\"> in other words, selecting this option will cause most destination tags to have associated sort tags</span>.<span style=\" font-weight:600;\"> Furthermore, any hidden sort variables associated with tags which are not listed explicitly in the tag mapping section will also be written out as tags</span> (i.e. even if the related tags are not included as destination tags). Note, however, that composite sources (e.g. &quot; ensemble_names + \\;  + conductors&quot;) do not have sort tags associated with them.</p><p><br/></p><p>If this option is not selected, no additional sort tags will be written, but the hidden variables will still be available, so if a sort tag is required explicitly, just map the sort tag directly - e.g. map \'conductors_sort\' to \'conductor_sort\'.</p></body></html>"))
        self.cea_tag_sort.setText(_translate("ClassicalExtrasOptionsPage", "Also populate sort tags"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Tag_mapping), _translate("ClassicalExtrasOptionsPage", "Tag mapping"))
        self.use_cwp.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>&quot;Include all work levels&quot; should be selected otherwise this section will not run.</p></body></html>"))
        self.use_cwp.setText(_translate("ClassicalExtrasOptionsPage", "Include all work levels (MUST BE TICKED FOR THIS SECTION TO RUN)*"))
        self.cwp_collections.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>This will include parent works where the relationship has the attribute \'part of collection\'.<br/>PLEASE BE CONSISTENT and do not use different options on albums with the same works, or the results may be unexpected.</p></body></html>"))
        self.cwp_collections.setText(_translate("ClassicalExtrasOptionsPage", "Include collection relationships (but not \"series\")"))
        self.use_cache.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Select to use cached works. Deselect to refesh from MusicBrainz.</p></body></html>"))
        self.use_cache.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>&quot;Use cache&quot; prevents excessive look-ups of the MB database. Every look-up of a parent work needs to be performed separately (hopefully the MB database might make this easier some day). Network usage constraints by MB means that each look-up takes a minimum of 1 second. Once a release has been looked-up, the works are retained in cache, significantly reducing the time required if, say, the options are changed and the data refreshed. However, if the user edits the works in the MB database then the cache will need to be turned off temporarily for the refresh to find the new/changed works. Also some types of work (e.g. arrangements) will require a full look-up if options have been changed.</p></body></html>"))
        self.use_cache.setText(_translate("ClassicalExtrasOptionsPage", "Use cache (if available)*"))
        self.Style.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Tagging style&quot;. This section determines how the hierarchy of works will be sourced. </p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Works source</span>: There are 3 options for determing the principal source of the works metadata </p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Use only metadata from title text&quot;. The plugin will attempt to extract the hierarchy of works from the track title by looking for repetitions and patterns. If the title does not contain all the work names in the hierarchy then obviously this will limit what can be provided. </p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Use only metadata from canonical works&quot;. The hierarchy in the MB database will be used. Assuming the work is correctly entered in MB, this should provide all the data. However the text may differ from the track titles and will be the same for all recordings. It may also be in the language of the composer whereas the titles will probably be in the language of the release. (This language issue can also be addressed by using aliases - see below). </p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Use canonical work metadata enhanced with title text&quot;. This supplements the canonical data with text from the titles <span style=\" font-weight:600;\">where it is significantly different</span>. The supplementary title data will be in curly brackets. This is clearly the most complete metadata style of the three but may lead to long descriptions. It is particularly useful for providing translations.</p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Source of canonical work text</span>. Where either of the second two options above are chosen, there is a further choice to be made: </p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Full MusicBrainz work hierarchy&quot;. The names of each level of work are used to populate the relevant tags. E.g. if &quot;Má vlast: I. Vyšehrad, JB 1:112/1&quot; (level 0) is part of &quot;Má vlast, JB 1:112&quot; (level 1) then the parent work will be tagged as &quot;Má vlast, JB 1:112&quot;, not &quot;Má vlast&quot;. So, while accurate, this option might be more verbose. </p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Consistent with lowest level work description&quot;. The names of the level 0 work are used to populate the relevant tags. I.e. if &quot;Má vlast: I. Vyšehrad, JB 1:112/1&quot; (level 0) is part of &quot;Má vlast, JB 1:112&quot; (level 1) then the parent work will be tagged as &quot;Má vlast&quot;, not &quot;Má vlast, JB 1:112&quot;. This frequently looks better, but not always, <span style=\" font-weight:600;\">particularly if the level 0 work name does not contain all the parent work detail</span>. If the full structure is not implicit in the level 0 name then a warning will be logged and written to the &quot;warning&quot; tag. </p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Strategy for setting style:</span> <span style=\" font-style:italic;\">It is suggested that you start with &quot;extended/enhanced&quot; style and the &quot;Consistent with lowest level work description&quot; as the source (this is the default). If this does not give acceptable results, try switching to &quot;Full MusicBrainz work hierarchy&quot;. If the &quot;enhanced&quot; details in curly brackets (from the track title) give odd results then switch the style to &quot;canonical works&quot; only. Any remaining oddities are then probably in the MusicBrainz data, which may require editing.</span> </p></body></html>"))
        self.Style.setTitle(_translate("ClassicalExtrasOptionsPage", "Tagging style"))
        self.groupBox_4.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>There are 3 options for determing the principal source of the works metadata</p><p>      - &quot;Use only metadata from title text&quot;. The plugin will attempt to extract the hierarchy of works from the track title by looking for repetitions and patterns. If the title does not contain all the work names in the hierarchy then obviously this will limit what can be provided.</p><p>      - &quot;Use only metadata from canonical works&quot;. The hierarchy in the MB database will be used. Assuming the work is correctly entered in MB, this should provide all the data. However the text may differ from the track titles and will be the same for all recordings. It may also be in the language of the composer whereas the titles will be in the language of the release.</p><p>      - &quot;Use canonical work metadata enhanced with title text&quot;. This supplements the canonical data with text from the titles <span style=\" font-weight:600;\">where it is significantly different</span>. The supplementary data will be in curly brackets. This is clearly the most complete metadata style of the three but may lead to long descriptions. It is particularly useful for providing translations - see image below for an example (using the Muso library manager).</p></body></html>"))
        self.groupBox_4.setTitle(_translate("ClassicalExtrasOptionsPage", "Works source"))
        self.cwp_titles.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>&quot;Use only metadata from title text&quot;. The plugin will attempt to extract the hierarchy of works from the track title by looking for repetitions and patterns. If the title does not contain all the work names in the hierarchy then obviously this will limit what can be provided.</p></body></html>"))
        self.cwp_titles.setText(_translate("ClassicalExtrasOptionsPage", "Use only metadata from title text"))
        self.cwp_works.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>&quot;Use only metadata from canonical works&quot;. The hierarchy in the MB database will be used. Assuming the work is correctly entered in MB, this should provide all the data. However the text may differ from the track titles and will be the same for all recordings. It may also be in the language of the composer whereas the titles will probably be in the language of the release. (This language issue can also be addressed by using aliases - see below).</p></body></html>"))
        self.cwp_works.setText(_translate("ClassicalExtrasOptionsPage", "Use only metadata from canonical works"))
        self.cwp_extended.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>&quot;Use canonical work metadata enhanced with title text&quot;. This supplements the canonical data with text from the titles **where it is significantly different**. The supplementary title data will be in curly brackets. This is clearly the most complete metadata style of the three but may lead to long descriptions. It is particularly useful for providing translations</p></body></html>"))
        self.cwp_extended.setText(_translate("ClassicalExtrasOptionsPage", "Use canonical work metadata enhanced with title text"))
        self.groupBox_16.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Where either of the second two options above are chosen, there is a further choice to be made:</p><p>      - &quot;Full MusicBrainz work hierarchy&quot;. The names of each level of work are used to populate the relevant tags. I.e. if &quot;Má vlast: I. Vyšehrad, JB 1:112/1&quot; (level 0) is part of &quot;Má vlast, JB 1:112&quot; (level 1) then the parent work will be tagged as &quot;Má vlast, JB 1:112&quot;, not &quot;Má vlast&quot;. So, while accurate, this option might be more verbose.</p><p>      - &quot;Consistent with lowest level work description&quot;. The names of the level 0 work are used to populate the relevant tags. I.e. if &quot;Má vlast: I. Vyšehrad, JB 1:112/1&quot; (level 0) is part of &quot;Má vlast, JB 1:112&quot; (level 1) then the parent work will be tagged as &quot;Má vlast&quot;, not &quot;Má vlast, JB 1:112&quot;. This frequently looks better, but not always, <span style=\" font-weight:600;\">particularly if the level 0 work name does not contain all the parent work detail</span>. If the full structure is not implicit in the level 0 name then a warning will be logged and written to the &quot;warning&quot; tag.</p></body></html>"))
        self.groupBox_16.setTitle(_translate("ClassicalExtrasOptionsPage", "Source of canonical work text (if applicable)"))
        self.cwp_hierarchical_works.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>&quot;Full MusicBrainz work hierarchy&quot;. The names of each level of work are used to populate the relevant tags. E.g. if &quot;Má vlast: I. Vyšehrad, JB 1:112/1&quot; (level 0) is part of &quot;Má vlast, JB 1:112&quot; (level 1) then the parent work will be tagged as &quot;Má vlast, JB 1:112&quot;, not &quot;Má vlast&quot;. So, while accurate, this option might be more verbose.</p></body></html>"))
        self.cwp_hierarchical_works.setText(_translate("ClassicalExtrasOptionsPage", "Full MusicBrainz work hierarchy (may be more verbose)"))
        self.cwp_level0_works.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>&quot;Consistent with lowest level work description&quot;. The names of the level 0 work are used to populate the relevant tags. I.e. if &quot;Má vlast: I. Vyšehrad, JB 1:112/1&quot; (level 0) is part of &quot;Má vlast, JB 1:112&quot; (level 1) then the parent work will be tagged as &quot;Má vlast&quot;, not &quot;Má vlast, JB 1:112&quot;. This frequently looks better, but not always, <span style=\" font-weight:600;\">particularly if the level 0 work name does not contain all the parent work detail</span>. If the full structure is not implicit in the level 0 name then a warning will be logged and written to the &quot;warning&quot; tag.</p></body></html>"))
        self.cwp_level0_works.setText(_translate("ClassicalExtrasOptionsPage", "Consistent with lowest level work description (may be less verbose, but not always complete)"))
        self.groupBox_18.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>&quot;Replace work names by aliases&quot; will use <span style=\" font-weight:600;\">primary</span> aliases for the chosen locale instead of standard MusicBrainz work names. To choose the locale, use the drop-down under &quot;translate artist names&quot; in the main Picard Options--&gt;Metadata page. Note that this option is not saved as a file tag since, if different choices are made for different releases, different work names may be stored and therefore cannot be grouped together in your player/library manager. </p><p>The sub-options allow either the replacement of all work names, where a primary alias exists, just the replacement of work names which are in non-Latin script, or only replace those which are flagged with user &quot;Folksonomy&quot; tags. The tag text needs to be included in the text box, in which case flagged works will be \'aliased\' as well as non-Latin script works, if the second sub-option is chosen. Note that the tags may either be anyone\'s tags (&quot;Look in all tags&quot;) or the user\'s own tags. If selecting &quot;Look in user\'s own tags only&quot; you <span style=\" font-weight:600;\">must</span> be logged in to your MusicBrainz user account (in the Picard Options-&gt;General page), otherwise repeated dialogue boxes may be generated and you may need to force restart Picard.</p></body></html>"))
        self.groupBox_18.setTitle(_translate("ClassicalExtrasOptionsPage", "Aliases (NB Use a consistent approach throughout the library otherwise duplicate works may occur - see the Readme)*"))
        self.groupBox_19.setTitle(_translate("ClassicalExtrasOptionsPage", "Replace MB work names?"))
        self.cwp_aliases.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Use primary aliases for the chosen locale instead of standard MusicBrainz work names.</p></body></html>"))
        self.cwp_aliases.setText(_translate("ClassicalExtrasOptionsPage", "Replace work names by aliases. Select method -->"))
        self.cwp_no_aliases.setText(_translate("ClassicalExtrasOptionsPage", "Do not replace work names"))
        self.groupBox_20.setTitle(_translate("ClassicalExtrasOptionsPage", "What to replace?"))
        self.cwp_aliases_all.setText(_translate("ClassicalExtrasOptionsPage", "All work names"))
        self.cwp_aliases_greek.setText(_translate("ClassicalExtrasOptionsPage", "Non-latin work names"))
        self.cwp_aliases_tagged.setText(_translate("ClassicalExtrasOptionsPage", "Only tagged works"))
        self.groupBox_21.setTitle(_translate("ClassicalExtrasOptionsPage", "Tags (\"Folksonomy\") identifying works to be replaced by aliases"))
        self.cwp_aliases_tags_all.setText(_translate("ClassicalExtrasOptionsPage", "Look in all tags"))
        self.cwp_aliases_tags_user.setText(_translate("ClassicalExtrasOptionsPage", "Look in user\'s own tags only (MUST BE LOGGED IN!)"))
        self.cwp_aliases_tag_text.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Separate multiple tags by commas</p></body></html>"))
        self.Tags.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Separate multiple tags by commas.</p></body></html>"))
        self.Tags.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>&quot;Tags to create&quot; sets the names of the tags that will be created from the sources described above. All these tags will be blanked before filling as specified. Tags specified against more than one source will have later sources appended in the sequence specified, separated by separators as specified.</p></body></html>"))
        self.Tags.setTitle(_translate("ClassicalExtrasOptionsPage", "Tags to create - Use commas to separate multiple tags or leave blank to omit"))
        self.groupBox_2.setTitle(_translate("ClassicalExtrasOptionsPage", "Work tags"))
        self.label_40.setText(_translate("ClassicalExtrasOptionsPage", "Separator"))
        self.label_11.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Some software (notably Muso) can display a 2-level work hierarchy as well as the work-movement hierarchy. This tag can be use to store the 2-level work name (a double colon :: is used to separate the levels within the tag).</p></body></html>"))
        self.label_11.setText(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Tags for Work - for software with 2-level capability (e.g. Muso)</p></body></html>"))
        self.cwp_multi_work_sep.setItemText(1, _translate("ClassicalExtrasOptionsPage", "; "))
        self.cwp_multi_work_sep.setItemText(2, _translate("ClassicalExtrasOptionsPage", ": "))
        self.cwp_multi_work_sep.setItemText(3, _translate("ClassicalExtrasOptionsPage", ". "))
        self.cwp_multi_work_sep.setItemText(4, _translate("ClassicalExtrasOptionsPage", ", "))
        self.cwp_multi_work_sep.setItemText(5, _translate("ClassicalExtrasOptionsPage", "- "))
        self.label.setText(_translate("ClassicalExtrasOptionsPage", "(In this format, intermediate works will be displayed after a double colon  :: )"))
        self.label_15.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Software which can display a movement and work (but no higher levels) could use any tags specified here. Note that if there are multiple work levels, the intermediate levels will not be tagged. Users wanting all the information should use the tags from the previous option (but it may cause some breaks in the display if levels change) - alternatively the missing work levels can be included in a movement tag (see below).</p></body></html>"))
        self.label_15.setText(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Tags for Work - for software with 1-level capability (e.g. iTunes)</p></body></html>"))
        self.cwp_single_work_sep.setItemText(1, _translate("ClassicalExtrasOptionsPage", "; "))
        self.cwp_single_work_sep.setItemText(2, _translate("ClassicalExtrasOptionsPage", ": "))
        self.cwp_single_work_sep.setItemText(3, _translate("ClassicalExtrasOptionsPage", ". "))
        self.cwp_single_work_sep.setItemText(4, _translate("ClassicalExtrasOptionsPage", ", "))
        self.cwp_single_work_sep.setItemText(5, _translate("ClassicalExtrasOptionsPage", "- "))
        self.label_2.setText(_translate("ClassicalExtrasOptionsPage", "(Intermediate works will not be displayed:- Either 1. use the 2-level format if you wish to display them, but note that this will ceate new work, or 2. include them in the movement [see below])"))
        self.label_12.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>This is the top-level work held in MB. This can be useful for cataloguing and searching (if the library software is capable). Note that this will always be the &quot;canonical&quot; MB name, not one derived from titles or the lowest level work name and that no annotations (e.g. key or work year) will be added. However, if &quot;replace work names by aliases&quot; has been selected and is applicable, the relevant alias will be used.</p></body></html>"))
        self.label_12.setText(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Tags for top-level (canonical) work (for capable library managers)</p></body></html>"))
        self.label_10.setText(_translate("ClassicalExtrasOptionsPage", "  N/A    "))
        self.groupBox.setTitle(_translate("ClassicalExtrasOptionsPage", "Movement/Part tags"))
        self.label_13.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>This is not necessarily the embedded movt/part number, but is the sequence number of the movement within its parent work <span style=\" font-weight:600;\">on the current release</span>.</p></body></html>"))
        self.label_13.setText(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Tags for(computed) movement number</p></body></html>"))
        self.cwp_movt_no_sep.setItemText(1, _translate("ClassicalExtrasOptionsPage", "; "))
        self.cwp_movt_no_sep.setItemText(2, _translate("ClassicalExtrasOptionsPage", ": "))
        self.cwp_movt_no_sep.setItemText(3, _translate("ClassicalExtrasOptionsPage", ". "))
        self.cwp_movt_no_sep.setItemText(4, _translate("ClassicalExtrasOptionsPage", ", "))
        self.cwp_movt_no_sep.setItemText(5, _translate("ClassicalExtrasOptionsPage", "- "))
        self.label_49.setText(_translate("ClassicalExtrasOptionsPage", "Use different movement tags if required..."))
        self.label_47.setText(_translate("ClassicalExtrasOptionsPage", "for use with multi-level work tags"))
        self.label_48.setText(_translate("ClassicalExtrasOptionsPage", "for use with1-level work tags (intermediate works will prefix movement)"))
        self.label_14.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>As below, but without the movement part/number prefix (if applicable)</p></body></html>"))
        self.label_14.setText(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Tags for Movement - excluding embedded movt/part numbers</p></body></html>"))
        self.label_39.setText(_translate("ClassicalExtrasOptionsPage", "  N/A    "))
        self.label_9.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>This tag(s) will contain the full lowest-level part name extracted from the lowest-level work name, according to the chosen tagging style.</p></body></html>"))
        self.label_9.setText(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Tags for Movement - including embedded movt/part numbers</p></body></html>"))
        self.label_37.setText(_translate("ClassicalExtrasOptionsPage", "  N/A    "))
        self.groupBox_12.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Enter text - do not use any quotation marks</p></body></html>"))
        self.groupBox_12.setTitle(_translate("ClassicalExtrasOptionsPage", "Partial recordings, arrangements and medleys"))
        self.label_20.setText(_translate("ClassicalExtrasOptionsPage", "N.B. If these options are selected or deselected, quit and restart Picard before proceeding"))
        self.groupBox_13.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>If this option is selected, partial recordings will be treated as a sub-part of the whole recording and will have the related text included in its name. Note that this text is at the end of the canonical name, but the latter will probably be stripped from the sub-part as it duplicates the recording work name; any title text will be appended to the whole. Note that, if &quot;Consistent with lowest level work description&quot; is chosen in section 2, the text may be treated as a &quot;prefix&quot; similar to those in the &quot;Advanced&quot; tab. If this eliminates other similar prefixes and has unwanted effects, then either change the desired text slightly (e.g. surround with brackets) or use the &quot;Full MusicBrainz work hierarchy&quot; option in section 2.</p></body></html>"))
        self.groupBox_13.setTitle(_translate("ClassicalExtrasOptionsPage", "Partial recordings"))
        self.cwp_partial.setText(_translate("ClassicalExtrasOptionsPage", "Show partial recordings as separate sub-part, labelled with ->"))
        self.groupBox_14.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>If this option is selected, works which are arrangements of other works will have the latter treated in the same manner as &quot;parent&quot; works, except that the arrangement work name will be prefixed by the text provided.</p></body></html>"))
        self.groupBox_14.setTitle(_translate("ClassicalExtrasOptionsPage", "Arrangements"))
        self.cwp_arrangements.setText(_translate("ClassicalExtrasOptionsPage", "Show arrangements as parts of original works, labelled with ->"))
        self.groupBox_15.setTitle(_translate("ClassicalExtrasOptionsPage", "Medleys"))
        self.cwp_medley.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p><span style=\" font-weight:600;\">Medleys</span></p><p>      These can occur in two ways in MusicBrainz: (a) the recording is described as a &quot;medley of&quot; a number of works and (b) the track is described as (more than one) &quot;medley including a recording of&quot; a work. In the first case, the specified text will be included in brackets after the work name, whereas in the second case, the track will be treated as a recording of multiple works and the specified text will appear in the parent work name.</p><p><br/></p></body></html>"))
        self.cwp_medley.setText(_translate("ClassicalExtrasOptionsPage", "Include medley list, labelled with ->"))
        self.groupBox_17.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>See &quot;What\'s this&quot;</p></body></html>"))
        self.groupBox_17.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p> &quot;Use work tags on file (no look up on MB) if Use Cache selected&quot;: This will enable the existing work tags on the file to be used in preference to looking up on MusicBrainz, if those tags are SongKong-compatible (which should be the case if SongKong has been used or if the SongKong tags have been previously written by this plugin). If present, this can speed up processing considerably, but obviously any new data on MusicBrainz will be missed. For the option to operate, &quot;Use cache&quot; also needs to be selected. Although faster, some of the subtleties of a full look-up will be missed - for example, parent works which are arrangements will not be highlighted as such, some arrangers or composers of original works may be omitted and some medley information may be missed. **In general, therefore, the use of this option will result in poorer metadata than allowing the full database look-up to run. It is not recommended unless speed is more important than quality.**</p><p><br/></p><p>    &quot;Write SongKong-compatible work tags&quot; does what it says. These can then be used by the previous option, if the release is subsequently reloaded into Picard, to speed things up (assuming the reload was not to pick up new work data).</p><p><br/></p><p>Note that Picard and SongKong use the tag musicbrainz_workid to mean different things. If Picard has overwritten the SongKong tag (not a problem if this plugin is used) then a warning will be given and the works will be looked up on MusicBrainz. Also note that once a release is loaded, subsequent refreshes will use the cache (if option is ticked) in preference to the file tags.</p></body></html>"))
        self.groupBox_17.setTitle(_translate("ClassicalExtrasOptionsPage", "SongKong-compatible tag usage"))
        self.cwp_use_sk.setText(_translate("ClassicalExtrasOptionsPage", "Use work tags on file (no look up on MB) if Use Cache selected* (NOT RECOMMENDED - SEE README)"))
        self.cwp_write_sk.setText(_translate("ClassicalExtrasOptionsPage", "Write SongKong-compatible work tags*"))
        self.label_82.setText(_translate("ClassicalExtrasOptionsPage", "* ASTERISKED OPTIONS ARE NOT SAVED IN FILE TAGS"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Works), _translate("ClassicalExtrasOptionsPage", "Works and parts"))
        self.groupBox_41.setTitle(_translate("ClassicalExtrasOptionsPage", "Periods and dates"))
        self.groupBox_48.setTitle(_translate("ClassicalExtrasOptionsPage", "Work dates"))
        self.groupBox_42.setTitle(_translate("ClassicalExtrasOptionsPage", "Source of work dates for above tag"))
        self.cwp_workdate_source_composed.setText(_translate("ClassicalExtrasOptionsPage", "Composed date (or parent composed date)"))
        self.cwp_workdate_source_published.setText(_translate("ClassicalExtrasOptionsPage", "Published date"))
        self.cwp_workdate_source_premiered.setText(_translate("ClassicalExtrasOptionsPage", "Premiered date"))
        self.cwp_workdate_use_first.setText(_translate("ClassicalExtrasOptionsPage", "Use first available of above (in listed order)"))
        self.cwp_workdate_use_all.setText(_translate("ClassicalExtrasOptionsPage", "Include all sources"))
        self.cwp_workdate_annotate.setText(_translate("ClassicalExtrasOptionsPage", "Annotate dates using source name"))
        self.label_68.setText(_translate("ClassicalExtrasOptionsPage", "Tag name for work date"))
        self.cwp_workdate_include.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>&quot;Includeworkdate in work names&quot; gives the option to include the \'work year\' for a work in brackets after the name of the work in the metadata. Dates (years) will be added in the appropriate levels: e.g. Smetana\'s \'Má vlast\' will get (1874-1879) at the work level, but the movements with different dates will be annotated viz. &quot;Vyšehrad, JB 1:112/1 (1874)&quot;. If the dates are the same, there should be no repitetion at the movement level. (Work dates will be used in preference order, i.e. composed - published - premiered, with only the first available date being shown).</p></body></html>"))
        self.cwp_workdate_include.setText(_translate("ClassicalExtrasOptionsPage", "Include workdate in work name (in preference order listed above, with no annotation)"))
        self.groupBox_49.setTitle(_translate("ClassicalExtrasOptionsPage", "Periods"))
        self.label_69.setText(_translate("ClassicalExtrasOptionsPage", "Tag name for period"))
        self.cwp_muso_periods.setText(_translate("ClassicalExtrasOptionsPage", "Use Muso map*"))
        self.cwp_muso_dates.setText(_translate("ClassicalExtrasOptionsPage", "Use Muso composer dates (if no work date) to determine period*"))
        self.label_70.setText(_translate("ClassicalExtrasOptionsPage", "Period map:"))
        self.label_87.setText(_translate("ClassicalExtrasOptionsPage", " (Period name, Start year, End year; Period name2, ... etc.) - periods may overlap [Do not use commas or semi-colons within period name]"))
        self.cwp_periods_arranger_as_composer.setText(_translate("ClassicalExtrasOptionsPage", "(Treat arrangers as for composers)"))
        self.cwp_use_muso_refdb.setText(_translate("ClassicalExtrasOptionsPage", "Use Muso reference database (default path is set on \"advanced\" tab)*"))
        self.label_81.setText(_translate("ClassicalExtrasOptionsPage", "* ASTERISKED OPTIONS ARE NOT SAVED IN FILE TAGS"))
        self.groupBox_35.setTitle(_translate("ClassicalExtrasOptionsPage", "Genres"))
        self.groupBox_38.setTitle(_translate("ClassicalExtrasOptionsPage", "\"Classical\" genre "))
        self.cwp_genres_classical_exclude.setText(_translate("ClassicalExtrasOptionsPage", "Exclude \"classical\" from main genre tag even if listed above"))
        self.cwp_genres_classical_selective.setText(_translate("ClassicalExtrasOptionsPage", "Make track \"classical\" only if there is a classical-specific genre"))
        self.cwp_muso_classical.setText(_translate("ClassicalExtrasOptionsPage", "Use Muso composer list to determine if classical*"))
        self.cwp_genres_classical_all.setText(_translate("ClassicalExtrasOptionsPage", "Make all tracks \"classical\""))
        self.label_64.setText(_translate("ClassicalExtrasOptionsPage", "Write a flag with text ="))
        self.label_71.setText(_translate("ClassicalExtrasOptionsPage", " in the following tag if the track is classical"))
        self.cwp_genres_arranger_as_composer.setText(_translate("ClassicalExtrasOptionsPage", "(Treat arrangers as for composers)"))
        self.label_73.setText(_translate("ClassicalExtrasOptionsPage", "Name of genre tag"))
        self.label_74.setText(_translate("ClassicalExtrasOptionsPage", "Name of sub-genre tag"))
        self.groupBox_36.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p><span style=\" font-weight:600;\">Detailed explanation of genre-matching:</span></p><p>If none of the boxes are filled, then all genres found will be included.</p><p>If one box is filled (e.g. &quot;classical main genres&quot;) and there is a matching genre found, then remaining genres will only be included if they match genres in that box or the related sub-genre box. So in this case if &quot;classical sub-genres&quot; is filled and &quot;general sub-genres&quot; is not, then only matching genres will be included.</p><p>If both &quot;classical&quot; and &quot;general&quot; main genre boxes are filled, then only genres matching those boxes or &quot;classical sub-genres&quot; will be included.</p></body></html>"))
        self.groupBox_36.setTitle(_translate("ClassicalExtrasOptionsPage", "Allowed genres"))
        self.groupBox_43.setTitle(_translate("ClassicalExtrasOptionsPage", "Classical genres (i.e. specific to classical music) - List separated by commas"))
        self.label_60.setText(_translate("ClassicalExtrasOptionsPage", "Main genres:"))
        self.label_75.setText(_translate("ClassicalExtrasOptionsPage", "Sub-genres:"))
        self.cwp_muso_genres.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Select this to use the &quot;classical genres&quot; in Muso options as the &quot;Main classical genres&quot; here.</p></body></html>"))
        self.cwp_muso_genres.setText(_translate("ClassicalExtrasOptionsPage", "Use Muso classical genres*"))
        self.groupBox_44.setTitle(_translate("ClassicalExtrasOptionsPage", "General genres (may be associated with classical music, but not necessarily, e.g. \"instrumental\") - List separated by commas"))
        self.label_62.setText(_translate("ClassicalExtrasOptionsPage", "Main genres"))
        self.label_76.setText(_translate("ClassicalExtrasOptionsPage", "Sub-genres"))
        self.label_80.setText(_translate("ClassicalExtrasOptionsPage", "Genre name to use if none of the above main genres apply (leave blank if not required)"))
        self.label_77.setText(_translate("ClassicalExtrasOptionsPage", "List genres, separated by commas. Only those genres listed will be included in tags. If no genres are listed in a box, then any genres found will be included."))
        self.label_78.setText(_translate("ClassicalExtrasOptionsPage", "See \"what\'s this\" for more details."))
        self.groupBox_37.setTitle(_translate("ClassicalExtrasOptionsPage", "Source of genres - Note: if \"existing file tag\" is selected, information from the tag \"genre\" and the genre tag name specified above (if different) will be used"))
        self.cwp_genres_use_file.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>NB: This will use the contents of the file tag with the name given above (usually \'genre\').</p></body></html>"))
        self.cwp_genres_use_file.setText(_translate("ClassicalExtrasOptionsPage", "Existing file tag (see note above)"))
        self.cwp_genres_use_folks.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>This will use the folksonomy tags for <span style=\" font-weight:600;\">works</span> as a possible source of genres (if they match one of the lists below).</p><p><br/></p><p>To use the folksonomy tags for <span style=\" font-weight:600;\">releases/tracks</span>, select the main Picard option in Options-&gt;Metadata-&gt;&quot;Use folksonomy tags as genre&quot;. Again (unlike vanilla Picard) they will only be used by this plugin if they match one of the lists below.</p></body></html>"))
        self.cwp_genres_use_folks.setText(_translate("ClassicalExtrasOptionsPage", "Folksonomy work tags"))
        self.cwp_genres_use_worktype.setText(_translate("ClassicalExtrasOptionsPage", "Work-type"))
        self.cwp_genres_infer.setText(_translate("ClassicalExtrasOptionsPage", "Infer from artist metadata"))
        self.groupBox_39.setTitle(_translate("ClassicalExtrasOptionsPage", "Instruments and keys"))
        self.groupBox_45.setTitle(_translate("ClassicalExtrasOptionsPage", "Instruments"))
        self.label_66.setText(_translate("ClassicalExtrasOptionsPage", "Tag name for instruments (will hold all instruments for a track)"))
        self.groupBox_40.setTitle(_translate("ClassicalExtrasOptionsPage", "Name sources to use for instruments (select at least one, otherwise no instruments will be included in tag)"))
        self.cwp_instruments_MB_names.setText(_translate("ClassicalExtrasOptionsPage", "MusicBrainz standard names"))
        self.cwp_instruments_credited_names.setText(_translate("ClassicalExtrasOptionsPage", "\"Credited-as\" names"))
        self.groupBox_47.setTitle(_translate("ClassicalExtrasOptionsPage", "Keys"))
        self.label_72.setText(_translate("ClassicalExtrasOptionsPage", "Tag name for key(s)"))
        self.groupBox_52.setTitle(_translate("ClassicalExtrasOptionsPage", "Include key(s) in work name?"))
        self.cwp_key_never_include.setText(_translate("ClassicalExtrasOptionsPage", "Never"))
        self.cwp_key_contingent_include.setText(_translate("ClassicalExtrasOptionsPage", "Only if key not already mentioned in work name"))
        self.cwp_key_include.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>&quot;Include key(s) in work names&quot; gives the option to include the key signature for a work in brackets after the name of the work in the metadata. Keys will be added in the appropriate levels: e.g. Dvořák\'s New World Symphony will get (E minor) at the work level, but only movements with different keys will be annotated viz. &quot;II. Largo (D-flat major, C-Sharp minor)&quot;</p></body></html>"))
        self.cwp_key_include.setText(_translate("ClassicalExtrasOptionsPage", "Always"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Genres), _translate("ClassicalExtrasOptionsPage", "Genres etc."))
        self.groupBox_3.setTitle(_translate("ClassicalExtrasOptionsPage", "General"))
        self.ce_no_run.setText(_translate("ClassicalExtrasOptionsPage", "Do not run Classical Extras for tracks where no pre-existing file is detected (warning tag will be written)"))
        self.advanced_artists.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Separate multiple names by commas. Do not use any quotation marks.</p></body></html>"))
        self.advanced_artists.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Permits the listing of strings by which ensembles of different types may be identified. This is used by the plugin to place performer details in the relevant hidden variables and thus make them available for use in the &quot;Tag mapping&quot; tab as sources for any required tags. </p><p>If it is important that only whole words are to be matched, be sure to include a space after the string.</p></body></html>"))
        self.advanced_artists.setTitle(_translate("ClassicalExtrasOptionsPage", "Artists"))
        self.run_options_2.setTitle(_translate("ClassicalExtrasOptionsPage", "Ensemble strings (separate names by commas)"))
        self.cea_orchestras_2.setText(_translate("ClassicalExtrasOptionsPage", "Orchestras"))
        self.cea_choirs_2.setText(_translate("ClassicalExtrasOptionsPage", "Choirs"))
        self.cea_groups_2.setText(_translate("ClassicalExtrasOptionsPage", "Groups (i.e. other ensembles such as quartets etc.)"))
        self.advanced_works.setTitle(_translate("ClassicalExtrasOptionsPage", "Work levels"))
        self.label_4.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Sometimes MB lookups fail. Unfortunately Picard (currently) has no automatic &quot;retry&quot; function. The plugin will attempt to retry for the specified number of attempts. If it still fails, the hidden variable _cwp_error will be set with a message; if error logging is checked in section 4, an error message will be written to the log and the contents of _cwp_error will be written out to a special tag called &quot;An_error_has_occurred&quot; which should appear prominently in the bottom pane of Picard. The problem may be resolved by refreshing, otherwise there may be a problem with the MB database availability. It is unlikely to be a software problem with the plugin.</p></body></html>"))
        self.label_4.setText(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Max number of re-tries to access works (in case of server errors)*</p></body></html>"))
        self.groupBox_51.setTitle(_translate("ClassicalExtrasOptionsPage", "Removal of common text between parent and child works"))
        self.label_90.setText(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Minimum number of similar words required before eliminating. Use zero for no elimination.<br/>(Punctuation and accents etc. will be ignored in word comparison)</p></body></html>"))
        self.label_89.setText(_translate("ClassicalExtrasOptionsPage", "NB Parent name text at the start of a work which is followed by punctuation in the work name will always be stripped regardless of this setting."))
        self.run_options_3a.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>This subsection contains various parameters affecting the processing of strings in titles. Because titles are free-form, not all circumstances can be anticipated. Detailed documentation of these is beyond the scope of this Readme as the effects can be quite complex and subtle and may require an understanding of the plugin code (which is of course open-source) to acsertain them. If pure canonical works are used (&quot;Use only metadata from canonical works&quot; and, if necessary, &quot;Full MusicBrainz work hierarchy&quot; on the Works and parts tab, section 2) then this processing should be irrelevant, but no text from titles will be included. Some explanations are given below:</p><p>    &quot;Proximity of new words&quot;. When using extended metadata - i.e. &quot;metadata enhanced with title text&quot;, the plugin will attempt to remove similar words between the canonical work name (in MusicBrainz) and the title before extending the canonical name. After removing such words, a rather &quot;bitty&quot; result may occur. To avoid this, any new words with the specified proximity will have the words between them (or up to the end) included even if they repeat words in the work name.</p><p>    &quot;Prefixes&quot;. When using &quot;metadata from titles&quot; or extended metadata, the structure of the works in MusicBrainz is used to infer the structure in the title text, so strings that are repeated between tracks which are part of the same MusicBrainz work will be treated as &quot;higher level&quot;. This can lead to anomolies if, for instance, the titles are &quot;Work name: Part 1&quot;, &quot;Work name: Part 2&quot;, &quot;Part&quot; will be treated as part of the parent work name. Specifying such words in &quot;Prefixes&quot; will prevent this.</p><p>    &quot;Synonyms&quot;. These words will be considered equivalent when comparing work name and title text. Thus if one word appears in the work name, that and its synonym will be removed from the title in extending the metadata (subject to the proximity setting above).</p><p>    &quot;Replacements&quot;. These words/phrases will be replaced in the title text in extended metadata, regardless of the text in the work name.</p></body></html>"))
        self.run_options_3a.setTitle(_translate("ClassicalExtrasOptionsPage", "How title metadata should be included in extended metadata (use cautiously - read documentation)"))
        self.label_6.setText(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Proximity of new words (to each other) to trigger in-fill with existing words (default = 2)</p></body></html>"))
        self.label_7.setText(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Proximity of new words (to start or end) to trigger in-fill with existing words (default =1)</p></body></html>"))
        self.label_5.setText(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Treat hyphenated words as two words for comparison purposes</p></body></html>"))
        self.label_8.setText(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Proportion of a string to be matched to a (usually larger) string for it to be considered essentially similar (default = 66%)</p></body></html>"))
        self.cwp_substring_match.setSuffix(_translate("ClassicalExtrasOptionsPage", "%"))
        self.cwp_removewords_2.setText(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Prefixes to be ignored in comparison (case insensitive, comma separated)<br/>To prevent a prefix from being ignored when extending metadata with title info, precede it with a space. <br/>To ensure only whole words are removed, follow with a space.</p></body></html>"))
        self.cwp_removewords.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Separate multiple names by commas. Do not use any quotation marks.</p></body></html>"))
        self.cwp_synonyms_2.setText(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p><span style=\" font-weight:600;\">Synonyms and replacements</span> - must be written as tuples separated by forward slashes - e.g (a,b) / (c,d)</p><p>DO NOT USE COMMAS, BRACKETS or FORWARD SLASHES IN ANY PHRASE. <br/>N.B. The matching of \'a\' is case-sensitive</p><p>As SYNONYMS \'a\' and \'b\' will be treated as similar when comparing works/parts and titles. The text in tags will be unaltered.<br/>Both a and b must be single words with no punctuation. No word may appear in more than one synonym (case sensitive):-</p></body></html>"))
        self.cwp_synonyms.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Separate multiple names by forward slash. Entries must be 2-tuples, e.g. (Replace_this, with_this). Do not use any quotation marks or spaces.</p></body></html>"))
        self.label_16.setText(_translate("ClassicalExtrasOptionsPage", "<html><p>For REMOVALS/REPLACEMENTS - These will result in the \"extended\" text in tags being changed<br/>Put the word or phrase in the first part of the tuple and leave the second blank - e.g. (I don\'t want to see this phrase, ) <br/>or put the replacement word(s) in the second part:-</p></html>"))
        self.cwp_replacements.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Entries must be 2-tuples, e.g. (Replace this, with this). Separate multiple tuples by forward slash. Do not use any quotation marks. Spaces are acceptable. The first item of a tuple may be a regular expression - enclose it with double exclamation marks - e.g.(!!regex here!!, replacement text here).</p></body></html>"))
        self.groupBox_46.setTitle(_translate("ClassicalExtrasOptionsPage", "Genres etc. (only required if Muso-specific options are used for genres/periods)"))
        self.label_85.setText(_translate("ClassicalExtrasOptionsPage", "Path to Muso reference database:"))
        self.label_84.setText(_translate("ClassicalExtrasOptionsPage", "Name of Muso reference database"))
        self.label_86.setText(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p><span style=\" font-weight:600;\">RESTART PICARD AFTER CHANGING THESE</span></p></body></html>"))
        self.groupBox_6.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>These options are in addition to the options chosen in Picard\'s &quot;Help-&gt;View error/debug log&quot; settings. They only affect messages written by this plugin. To enable debug messages to be shown, the flag needs to be set here and &quot;Debug mode&quot; needs to be turned on in the log. It is strongly advised to keep the &quot;debug&quot; and &quot;info&quot; flags unchecked unless debugging is required as they slow up processing significantly and may even cause Picard to crash on large releases. The &quot;error&quot; and &quot;warning&quot; flags should be left checked, unless it is required to suppress messages written out to tags (the default is to write messages to the tags 001_errors and 002_warnings).</p></body></html>"))
        self.groupBox_6.setTitle(_translate("ClassicalExtrasOptionsPage", "Logging options*"))
        self.log_error.setText(_translate("ClassicalExtrasOptionsPage", "Error"))
        self.log_warning.setText(_translate("ClassicalExtrasOptionsPage", "Warning"))
        self.log_debug.setText(_translate("ClassicalExtrasOptionsPage", "Debug"))
        self.groupBox_50.setTitle(_translate("ClassicalExtrasOptionsPage", "Custom logging"))
        self.log_basic.setText(_translate("ClassicalExtrasOptionsPage", "Basic"))
        self.log_info.setText(_translate("ClassicalExtrasOptionsPage", "Full"))
        self.groupBox_33.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>This can be used so that the user has a record of the version of Classical Extras which generated the tags and which options were selected to achieve the resulting tags. Note that the tags will be blanked first so this will only show the last options used on a particular file. The same tag can be used for both sets of options, resulting in a multi-valued tag. </p></body></html>"))
        self.groupBox_33.setTitle(_translate("ClassicalExtrasOptionsPage", "Save plugin details and options in a tag?*"))
        self.label_41.setText(_translate("ClassicalExtrasOptionsPage", "Tag name for plugin version"))
        self.label_36.setText(_translate("ClassicalExtrasOptionsPage", "Tag name for artist/mapping/misc. options"))
        self.label_38.setText(_translate("ClassicalExtrasOptionsPage", "Tag name for work/genre options"))
        self.groupBox_10.setWhatsThis(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>If options have previously been saved (see above), selecting these will cause the saved options to be used in preference to the displayed options. The displayed options will not be affected and will be used if no saved options are present. The default is for no over-ride. If artist options over-ride is chosen, then tag map detail options may be included or not in the override.</p><p><br/></p><p>The last checkbox, &quot;Overwrite options in Options Pages&quot;, is for <span style=\" font-weight:600;\">VERY CAREFUL USE ONLY</span>. It will cause any options read from the saved tags (if the relevant box has been ticked) to over-write the options on the plugin Options Page UI. The intended use of this is if for some reason the user\'s preferred options have been erased/reverted to default - by using this option, the previously-used choices from a reliable filed album can be used to populate the Options Page. The box will automatically be unticked after loading/refreshing one album, to prevent inadvertant use. Far better is to make a <span style=\" font-weight:600;\">backup copy</span> of the picard.ini file.</p></body></html>"))
        self.groupBox_10.setTitle(_translate("ClassicalExtrasOptionsPage", "Over-ride plugin options displayed in Options Pages with options from local file tags (previously saved using method in box above)?*"))
        self.cea_override.setText(_translate("ClassicalExtrasOptionsPage", "Artist options"))
        self.ce_tagmap_override.setToolTip(_translate("ClassicalExtrasOptionsPage", "<html><head/><body><p>Will not over-ride displayed options unless artist options over-ride is also selected</p></body></html>"))
        self.ce_tagmap_override.setText(_translate("ClassicalExtrasOptionsPage", "Tag map detail options"))
        self.cwp_override.setText(_translate("ClassicalExtrasOptionsPage", "Work options"))
        self.ce_genres_override.setText(_translate("ClassicalExtrasOptionsPage", "Genres etc. options"))
        self.ce_options_overwrite.setText(_translate("ClassicalExtrasOptionsPage", "Overwrite options in Options Pages (READ WARNINGS in Readme)"))
        self.label_83.setText(_translate("ClassicalExtrasOptionsPage", "* ASTERISKED OPTIONS ARE NOT SAVED IN FILE TAGS"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Advanced), _translate("ClassicalExtrasOptionsPage", "Advanced"))
        self.textBrowser_2.setHtml(_translate("ClassicalExtrasOptionsPage", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><a name=\"generalinformation\"></a><span style=\" font-size:8pt; font-weight:600;\">G</span><span style=\" font-size:8pt; font-weight:600;\">eneral Information</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">This is the documentation for version 0.9.3 of &quot;classical_extras&quot;. There may be beta versions later than this - check </span><a href=\"https://github.com/MetaTunes/picard-plugins/releases\"><span style=\" font-size:8pt; text-decoration: underline; color:#0000ff;\">my github site</span></a><span style=\" font-size:8pt;\"> for newer releases. For further help, please review </span><a href=\"https://community.metabrainz.org/t/classical-extras-plugin/300217\"><span style=\" font-size:8pt; text-decoration: underline; color:#0000ff;\">the forum thread</span></a><span style=\" font-size:8pt;\"> or post any new questions there. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">This version has only been tested with FLAC and mp3 files. It does work with m4a files, but Picard does not write all m4a tags (see further notes for iTunes users at the end of the &quot;works and parts tab&quot; section). It populates hidden variables in Picard with information from the MusicBrainz database about the recording, artists and work(s), and of any containing works, passing up through mutiple work-part levels until the top is reached. The &quot;Options&quot; page (Options-&gt;Options-&gt;Plugins-&gt;Classical Extras) allows the user to determine how these hidden variables are written to file tags, as well as a variety of other options. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">This plugin is particularly designed to assist with tagging of classical music so that player or library manager software which can display multiple work levels, different artist types and custom tags can have access to these details. <br />It has two main components &quot;Extra Artists&quot; and &quot;Work Parts&quot; which can be used independently or together. &quot;Work Parts&quot; will take at least as many seconds to process as there are works to look up (owing to MB throttling) so users who only want the extra artist information and not the work details may turn it off (e.g. perhaps for \'popular\' music). </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Hidden metadata variables produced by this plugin are (mostly) prefixed with &quot;_cwp_&quot; or &quot;_cea_&quot; depending on which component of the plugin created them. Full details of these variables are given in a later section. Tags are output depending on the choices specified by the user in the Options Page. Defaults are provided for these tags which can be added to / modified / deleted according to user requirements. If the Options Page does not provide sufficient flexibility, users familiar with scripting can write Tagger Scripts to access the hidden variables directly. </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><a name=\"updates\"></a><span style=\" font-size:8pt; font-weight:600;\">U</span><span style=\" font-size:8pt; font-weight:600;\">pdates</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Version 0.9.3: Custom logging if enabled on &quot;Advanced&quot; tab - writes one log file per album in addition to standard Picard log. Also a session log with basic data is written. Performance improvements (especially for lyrics processing) and various bug fixes. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Version 0.9.2: A new tab in the options page has been created - &quot;Genres etc.&quot; This includes special processing for genres, instruments, keys, work dates and periods. The &quot;Infer work types&quot; option on the &quot;Artists&quot; tab has been moved to this tab (but will be reset to the default of &quot;False&quot; and will need to be reset as required, because it operates slightly differently now that there is more control over the setting of genres). A separate section has ben added to this readme giving more details on the options in this tab. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">For a list of previous version changes, see the end of this document. </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><a name=\"installation\"></a><span style=\" font-size:8pt; font-weight:600;\">I</span><span style=\" font-size:8pt; font-weight:600;\">nstallation</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Install the zip file in your plugins folder in the usual fashion </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><a name=\"usage\"></a><span style=\" font-size:8pt; font-weight:600;\">U</span><span style=\" font-size:8pt; font-weight:600;\">sage</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">After installation, go to the Options Page and modify choices as required. There are 4 tabs - &quot;Artists&quot;, &quot;Tag mapping&quot;, Works and parts&quot; and &quot;Advanced&quot;. The sections below describe each of these. If the options provided do not allow sufficient flexibility for a user\'s need (hopefully unlikely!) then Tagger Scripts may be used to process the hidden variables or other tags. Alternatively, it may be possible to achieve the required result by running and saving twice (or more!) with different options each time. This is not recommended for more than a one-off - a script would be better. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; font-weight:600;\">Important</span><span style=\" font-size:8pt;\">: </span></p>\n"
"<ol style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The plugin <span style=\" font-weight:600;\">will not work fully unless</span> &quot;Use release relationships&quot; and &quot;Use track relationships&quot; are enabled in Picard-&gt;Options-&gt;Metadata. The plugin will enable these options by default when starting Picard. However, it may be that the MusicBrainz database has conflicting data between track and release relationships, in which case you may wish to temporarily turn off one of these options, but it is better to fix the incorrect data using &quot;Edit relationships&quot; in MusicBrainz. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">It is recommended only to use the plugin on one or a few release(s) at a time, particularly for initial tagging if the &quot;Works and parts&quot; function is being used. The plugin is not designed to do &quot;bulk tagging&quot; of untagged files - it may be better to use a tool such as SongKong for that and then use the plugin to enhance the results as required. However, once you have tagged files (either in Picard or another tool) such that they all have MusicBrainz IDs, you should be able to re-tag multiple releases by dragging the containing folder into Picard; this is useful to pick up changed MusicBrainz data or if you change the Classical Extras version or options (but bear in mind that the &quot;Works and parts&quot; function will still take at least 1 second per track. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Check for error messages before saving a release</span>. The plugin will write out special &quot;error message&quot; tags which should appear prominently in the bottom Picard pane. In particular, look for &quot;000_major_warning&quot; and &quot;001_errors&quot;. If you get &quot;000_major_warning&quot; with the message &quot;WARNING: Classical Extras not run for this track as no file present - deselect the option on the advanced tab to run. If there is a file, then try \'Refresh\'.&quot; then do what it says (this will only occur if you have opted to not run Classical Extras for tracks where no pre-existing file is detected)! </li>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt; font-weight:600;\">Also, watch out for &quot;002_important_warning&quot; - &quot;No file with matching trackid - IF THERE SHOULD BE ONE, TRY \'REFRESH\' - (unable to process any saved options, lyrics or \'keep\' tags)&quot;; this will always occur if you load a file without MusicBrainz ids - just refresh it to pick up any existing file tags such as lyrics, if required.</span><span style=\" font-size:8pt;\"> This will occur if you have manually matched files rather than used Picard\'s &quot;lookup&quot; or &quot;scan&quot; functions. It may also be due to Picard processing issues - more likely if the files are on a network server; if you are getting it a lot then it may be better to move the files onto local storage to do the updates. </span></p>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If you are just changing option settings then you can usually &quot;use cache&quot; (see &quot;work and parts&quot; tab section 1) to avoid the 1-second per work delay. However, if the works data in MusicBrainz has been changed then obviously you will need to do a full look-up, so disable cache. If the work structure has been fundamentally changed (i.e. a different hierarchy of existing works) - either within the MusicBrainz database or by selecting/deselecting the &quot;include collection relations&quot;, partial&quot; or &quot;arrangements&quot; options - then you will need to quit and restart Picard to correctly pick up the new structure. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Keep a backup of your picard.ini file (AppData-&gt;Roaming-&gt;MusicBrainz in Windows) in case you erase your settings or Picard crashes and loses them for you. </li></ol>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><a name=\"artiststab\"></a><span style=\" font-size:8pt; font-weight:600;\">A</span><span style=\" font-size:8pt; font-weight:600;\">rtists tab</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">There are five coloured sections as shown in the screen image below: </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><img src=\"http://music.highmossergate.co.uk/images/artist_options%20v0.9.2.jpg\" /><span style=\" font-size:8pt;\"> </span></p>\n"
"<ol style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Create extra artist metadata&quot; should be selected otherwise this section (and the tag mapping section) will not run. This is the default. </li>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">(Note that the option &quot;Infer work types...&quot; in version 0.9.1 and prior has moved to the Genres tab and change somewhat.) </span></p>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Work-artist/performer naming options&quot;. This section deals primarily with the application of aliases and credited_as names to replace the MusicBrainz standard names. The first box allows you to choose whether to replace MusicBrainz standard names by aliases - either for all work-artists/performers or only work-artists (writers, composers, arrangers, lyricists etc.). The second box sets the usage of &quot;as-credited&quot; names: the first part of this lists all the places where as-credited names can occur (really!) and the second part allows you to apply these to performing artists and/or work-artists. </li>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">Please note that, in the current version of this plugin, only aliases and credited_as names which are in the &quot;release XML node&quot; are available (i.e. roughly those relating to the metadata shown in the release overview page in MusicBrainz). So, for example, if a recording is an arrangement of another work and that other work (but not the arrangement) has a composer linked to it, then the composer\'s alias will not be available (nor is the composer shown on the MB release overview page). In some cases (if appropriate) this can be remedied by adding the relevant link to the lowest-level work. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:40px; margin-right:40px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">Note regarding aliases and credited-as names: <br />In a MB release, an artist can appear in one of seven contexts. Each of these is accessible in releaseXmlNode and the track and recording contexts are also accessible in trackXmlNode. <br />The seven contexts are: <br />Release-group: credited-as and alias <br />Release: credited-as and alias <br />Release relationship: credited-as only <br />Recording: credited-as and alias <br />Recording relationship (direct): credited-as only <br />Recording relationship (via work): credited-as only <br />Track: credited-as and alias <br />(The above are applied in sequence - e.g. track artist credit will over-ride release artist credit) </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">N.B. if more than one release is loaded in Picard, any available alias names loaded so far will be available and used. However, as-credited names will only be used from the current release. If you do not want these names to be available then you may need to restart Picard after changing the option settings (otherwise they will still be cached). </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">In addition to the above, the main Picard options have an effect on how \'track artists\' (or any tags derived from them through tag-mapping) are displayed. In Options-&gt;Metadata, if &quot;Translate artist names...&quot; is selected then the alias will be used for the track artist (or failing that, a name based on the sort-name), rather than the \'as-credited\' name. If &quot;Use standardized artist names&quot; is selected then neither the alis nor the \'as-credited\' name will be used. In order to facilitate consistency, Classical Extras will save these Picard options along with its own options in specific tags (see &quot;Advanced options&quot; section 5). </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">The bottom box then (a) allows a choice as to whether aliases will over-ride as-credited names or vice versa and (b) whether if there are still some names in non-Latin script, whether these should be replaced (this will always remove middle [patronymic] names from Cyrillic-script names [but does not deal fully with other non-Latin scripts]; it is based on the sort names wherever possible). </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">Note that </span><span style=\" font-size:8pt; font-weight:600;\">none of this processing affects the contents of the &quot;artist or &quot;album_artist&quot; tags</span><span style=\" font-size:8pt;\">. These tags may be either work-artists or performing artists. Their contents are determined by the standard Picard options &quot;translate artist names&quot; and &quot;use standardized artist names&quot; in Options--&gt;Metadata. If &quot;translate name&quot; is selected, the name will be the alias or (if no alias) the \'unsorted\' sort-name; otherwise the name will be the MusicBrainz name if &quot;use standardized artist names&quot; is selected or the as-credited name (if available) if it is not selected. </span></p>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Recording artist options&quot;. In MusicBrainz, the recording artist may be different from the track artist. For classical music, the MusicBrainz guidelines state that the track artist should be the composer; however the recording artist(s) is/are usually the principal performer(s). <br />Because, in classical music (in MusicBrainz), recording artists will usually be performers whereas track artists are composers, by default, the naming convention for performers (set in the previous section) will be used (although only the as-credited name set for the recording artist will be applied). Alternatively, the naming convention for track artists can be used - which is determined by the main Picard metadata options. </li>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">Classical Extras puts the recording artists into \'hidden variables\' (as a minimum) using the chosen naming convention. There is also option to allow you to replace the track artist by the recording artist (or to merge them). The chosen action will be applied to the \'artist\', \'artists\', \'artistsort\' and \'artists_sort\' tags. Note that \'artist\' is a single-valued string whereas \'artists\' is a list and may be multi-valued. Lists are properly merged, but because the \'artist\' string may have different join-phrases etc, a merged tag may have the recording artist(s) in brackets after the track artist(s). Obviously, for classical music, if you use &quot;merge&quot; then the artist tag will have both the composer and the recording artists: this may be desirable for simple players (with no composer recognition) but otherwise may look odd. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">Note that, if the original track artist is required in tag mapping (i.e. as it was before replacement/merge with recording artist), it is available through the hidden variable _cea_MB_artists. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">Note also that, if @loujin\'s browser script has been used to fill the recording artist data, this will be the same as the performing artists in the Recording-Artist relationship - i.e. it may be a lengthy list rather than the principal artist for the track. </span></p>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Other artist options&quot;: </li>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">&quot;Modify host tags and include annotations&quot; (Previously called &quot;Include arrangers from all work levels&quot;). This will gather together, for example, any arranger-type information from the recording, work or parent works and place it in the &quot;arranger&quot; tag (\'host\' tag), with the annotation (see below) in brackets. All arranger types will also be put in a hidden variable, e.g. _cwp_orchestrators. The table below shows the artist types, host tag and hidden variable for each artist type. </span></p>\n"
"<table border=\"0\" style=\" margin-top:0px; margin-bottom:0px; margin-left:240px; margin-right:0px;\" cellspacing=\"2\" cellpadding=\"0\">\n"
"<tr>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Artist type</span></p></td>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Host tag</span></p></td>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Hidden variable</span></p></td></tr>\n"
"<tr>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">writer</span></p></td>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">composer</span></p></td>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">writers</span></p></td></tr>\n"
"<tr>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">lyricist</span></p></td>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">lyricist</span></p></td>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">lyricists</span></p></td></tr>\n"
"<tr>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">revised by</span></p></td>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">arranger</span></p></td>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">revisors</span></p></td></tr>\n"
"<tr>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">translator</span></p></td>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">lyricist</span></p></td>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">translators</span></p></td></tr>\n"
"<tr>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">arranger</span></p></td>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">arranger</span></p></td>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">arrangers</span></p></td></tr>\n"
"<tr>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">reconstructed by</span></p></td>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">arranger</span></p></td>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">reconstructors</span></p></td></tr>\n"
"<tr>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">orchestrator</span></p></td>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">arranger</span></p></td>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">orchestrators</span></p></td></tr>\n"
"<tr>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">instrument arranger</span></p></td>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">arranger</span></p></td>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">arrangers (with instrument type in brackets)</span></p></td></tr>\n"
"<tr>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">vocal arranger</span></p></td>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">arranger</span></p></td>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">arrangers (with voice type in brackets)</span></p></td></tr>\n"
"<tr>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">chorus master</span></p></td>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">conductor</span></p></td>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">chorusmasters</span></p></td></tr>\n"
"<tr>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">concertmaster</span></p></td>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">performer (with annotation as a sub-key)</span></p></td>\n"
"<td>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">leaders</span></p></td></tr></table>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">If you want to be more selective in what is included in host tags, then disable this option and use the tag mapping section to get the data from the hidden variables. If you want to add arrangers as composers, do so in the tag mapping section also. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">(Note that Picard does not natively pick up all arrangers, but that the plugin will do so, provided the &quot;Works and parts&quot; section is run.) </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">&quot;Name album as \'Composer Last Name(s): Album Name\'&quot; will add the composer(s) last name(s) before the album name, if they are listed as album artists. If there is more than one composer, they will be listed in the descending order of the length of their music on the release. MusicBrainz style is to exclude the composer name unless it is actually part of the album name, but it can be useful to add it for library organisation. The default is checked. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">&quot;Do not write \'lyricist\' tag if no vocal performers&quot;. Hopefully self-evident. This applies to both the Picard \'lyricist\' tag and the related internal plugin hidden variables \'_cwp_lyricists\' etc. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">Note that the plugin will search for lyricists at all work levels (bottom up), but will stop after finding the first one (unless that was just a translator). </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">&quot;Do not include attributes in an instrument type&quot; (previously just referred to the attribute \'solo\'). MusicBrainz permits the use of &quot;solo&quot;, &quot;guest&quot; and &quot;additional&quot; as instrument attributes although, for classical music, its use should be fairly rare - usually only if explicitly stated as a &quot;solo&quot; on the the sleevenotes. Classical Extras provides the option to exclude these attributes (the default), but you may wish to enable them for certain releases or non-Classical / cross-over releases. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">&quot;Annotations&quot;: The chosen text will be used to annotate the artist type within the host tag (see table above for host tags), but only if &quot;Modify host tags&quot; is selected. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">Please note that the use of the word &quot;master&quot; is the MusicBrainz term and is not intended to be gender-specific. Users can specify whatever text they please. </span></p>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Lyrics&quot;. <span style=\" font-weight:600;\">Please note that this section operates on the underlying input file tags, not the Picard-generated tags (MusicBrainz does not have lyrics)</span> Sometimes &quot;lyrics&quot; tags can contain album notes (repeated for every track in an album) as well as track notes and lyrics. This section will filter out the common text for a release and place it in a different tag from the text which is unique to each track. </li></ol>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">&quot;Split lyrics tag&quot;: enables this section. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">&quot;Incoming lyrics tag&quot;: The name of the lyrics file tag in the input file (normally just \'lyrics\'). </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">&quot;Tag for album notes&quot;: The name of the tag where common text should be placed. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">&quot;Tag for track notes&quot;: The name of the tag where notes/lyrics unique to a track should be placed. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">Note that if the \'output\' tags are not specified, then internal \'hidden\' variables will still be available for use in the tag-mapping section (called album_notes and track_notes). </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><a name=\"tagmappingtab\"></a><span style=\" font-size:8pt; font-weight:600;\">T</span><span style=\" font-size:8pt; font-weight:600;\">ag mapping tab</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">There are two coloured sections as shown in the screen image below: </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><img src=\"http://music.highmossergate.co.uk/images/tag_mapping%20v0.9.jpg\" /><span style=\" font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Note that the &quot;Create extra artist metadata&quot; option needs to be selected on the Artist tab for these sections to run. </span></p>\n"
"<ol style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Initial tag processing&quot;: This takes place before any of the detailed tag mapping in the second section. </li>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">&quot;Remove Picard-generated tags before applying subsequent actions?&quot;. Any tags specified in the next two rows will be blanked before applying the tag sources described in the following section. NB this applies only to Picard-generated tags, not to other tags which might pre-exist on the file: to blank those, use the main Options-&gt;Tags page. Comma-separate the tag names within the rows and note that these names are case-sensitive. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">&quot;List existing file tags which will be appended ...&quot;: This refers to the tags which already exist on files which have been matched to MusicBrainz, not the tags generated by Picard from the MusicBrainz database. Normally, Picard cannot process these tags - either it will overwrite them (if it creates a similarly named tag), clear them (if \'Clear existing tags\' is specified in the main Options-&gt;Tags screen) or keep them (if \'Preserve these tags...\' is specified after the \'Clear existing tags\' option). Classical Extras allows a further option - for the tags to be appended to in the tag mapping section (see below) or otherwise used. List file tags which will be appended to rather than over-written by tag mapping (NB this will keep tags even if &quot;Clear existing tags&quot; is selected on main options). In addition, certain existing tags may be used by Classical Extras - in particular &quot;is_classical&quot; (which is set by SongKong to \'1\' if the track is deemed to be classical, based on an extensive database) is used to add \'classical\' to the variable &quot;_cea_worktype&quot;, if &quot;Infer work types&quot; is selected in the first section of the Artists tab. If you include &quot;is_classical&quot; in this list then any files which have &quot;is_classical&quot; = 1 will be treated as being classical, regardless of genre. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">Note that if &quot;Split lyrics tag&quot; is specified (see the Artists tab), then the tag named there will be included in the &quot;...existing file tags...&quot; list and does not need to be added in this section. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">&quot;Clear any previous file tags...&quot;: This operates in an almost similar way to the main Picard option (Options-&gt;Tags-&gt;&quot;Clear existing tags&quot;). All existing file tags will be cleared </span><span style=\" font-size:8pt; font-weight:600;\">unless</span><span style=\" font-size:8pt;\"> they are in the main Picard &quot;Preserve tags...&quot; option or the &quot;...existing file tags...&quot; list. The main differences from the basic Picard option are that (a) artwork is always preseved - i.e. this largely addresses </span><a href=\"https://tickets.metabrainz.org/browse/PICARD-257\"><span style=\" font-size:8pt; text-decoration: underline; color:#0000ff;\">PICARD-257</span></a><span style=\" font-size:8pt;\"> and (b) the tags that are not kept are </span><span style=\" font-size:8pt; font-weight:600;\">not shown as deleted</span><span style=\" font-size:8pt;\"> in the bottom pane of Picard; however, a warning tag is written. </span></p>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Tag map details&quot;. This section permits the contents of any hidden variable or tag to be written to one or more tags. </li></ol>\n"
"<ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 2;\"><li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Sources</span>: Some of the most useful sources are available from the drop-down list. Otherwise they can simply be typed in the box. Click on the &quot;source from&quot; button to enable entry. Some useful names are: </li>\n"
"<ul type=\"circle\" style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 3;\"><li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">soloists : List of performers (with instruments in brackets), who are NOT ensembles or conductors, separated by semi-colons. Note they may not strictly be &quot;soloists&quot; in that they may be part of an ensemble. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">soloist_names : Names of the above (i.e. no instruments). </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">vocalists / instrumentalists / other_soloists : Soloists who are vocalists, instrumentalists or not specified respectively. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">vocalist_names / instrumentalist_names : Names of vocalists / instrumentalists (i.e. no instrument / voice). </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">ensembles : List of performers who are ensembles (with type / instruments - e.g. &quot;orchestra&quot; - in brackets), separated by semi-colons. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">ensemble_names : Names of the above (i.e. no instruments). </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">album_soloists : Sub-list of soloist_names who are also album artists. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">album_conductors : List of conductors who are also album artists. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">album_ensembles: Sub-list of ensemble_names who are also album artists. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">album_composers : List of composers who are also album artists. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">album_composer_lastnames : Last names of composers of ANY track on the album who are also album artists. This is the source used to prefix the album name (when that option is selected). </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">support_performers : Sub-list of soloist_names who are NOT album artists. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">composers : Note that, if &quot;Fix cyrillic names&quot; in the last section is checked, this is based on sort name, to avoid non-latin language problems (if translation is not already made via locale choices). </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">conductors : Note that, if &quot;Fix cyrillic names&quot; in the last section is checked, this is based on sort name, to avoid non-latin language problems (if translation is not already made via locale choices). </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">arrangers : Includes all arrangers and instrument arrangers (except orchestrators) - if option above selected - standard Picard tag omits some. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">orchestrators : Arrangers who are orchestrators. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">leaders : AKA concertmasters. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">chorusmasters : as distinct from conductors (chorus masters may rehearse the choir but not conduct the performance). </li></ul>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:2; text-indent:0px;\"><span style=\" font-size:8pt;\">Note that the Classical Extras sources for all artist types are spelled in the plural (to differentiate from the native Picard tags). Most of the names are for artist data and are sourced from hidden variables (prefixed with &quot;_cea_&quot; or &quot;_cwp_&quot;). In specifying the source, the prefix is not necessary - e.g. &quot;arrangers&quot; will pick up all data in _cea_arrangers and _cwp_arrangers (covering those with recording and work relationships respectively). Using the prefix will only get the specific variable. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:2; text-indent:0px;\"><span style=\" font-size:8pt;\">In addition, the drop-down contains some typical combinations of multiple sources (see note on multiple sources below). </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:2; text-indent:0px;\"><span style=\" font-size:8pt;\">Any Picard tag names can also be typed in as sources. Any hidden variables may also be used. Any source names which are prefixed by a backslash will be treated as string constants; blanks may also be used. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:2; text-indent:0px;\"><span style=\" font-size:8pt;\">It is possible to specify multiple sources. If these are separated by a comma, then each will be appended to the mapped tag(s) (if not already filled or if not &quot;conditional&quot;). So, for example, a source of &quot;album_soloists, album_conductors, album_ensembles&quot; mapped to a tag of &quot;artist&quot; with &quot;conditional&quot; ticked will fill artist (if blanked) by album_soloists, if any, otherwise album_conductors etc. Sources separated by a + will be concatenated before being used to fill the mapped tags. The concatenated result </span><span style=\" font-size:8pt; font-weight:600;\">will only be applied if the contents of each of the sources to be concatenated is non-blank</span><span style=\" font-size:8pt;\"> (note that this constraint only applies to </span><span style=\" font-size:8pt; font-weight:600;\">concatenation</span><span style=\" font-size:8pt;\"> of multiple sources). No spaces will be added on concatenation, so these have to be added explicitly by concatenating &quot;\\ &quot;. So, for example &quot;ensemble_names + \\ (conducted by + conductors +\\), ensemble_names&quot;, with &quot;Conditional&quot; selected, will yield something like &quot;BBC Symphony Orchestra (conducted by Walter Weller)&quot; or just &quot;BBC Symphony Orchestra&quot; if there is no conductor. </span><span style=\" font-size:8pt; font-weight:600;\">Do not use any commas in text strings</span><span style=\" font-size:8pt;\">. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:2; text-indent:0px;\"><span style=\" font-size:8pt;\">Another example: to add the leader\'s name in brackets to the tag with the performing orchestra, put &quot;\\ (leader +leaders+\\)&quot; in the source box and the tag containing the orchestra in the tag box. If there is no leader, the text will not be appended. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:2; text-indent:0px;\"><span style=\" font-size:8pt;\">The tag mapping section is not restricted to artist metadata. For example, in the default drop-down list are &quot;work_type&quot; which only has content if the &quot;Infer work types&quot; box in the first section of the Artists tab is checked, and &quot;release&quot; which contains the album name before prefixing with composer last names if that option was chosen. </span></p>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Tags</span>: Enter the (comma-separated) &quot;destination&quot; tag names into which the sources should be written (case sensitive). Note that this will result in the source data being APPENDED in the tag - it will not overwrite the existing contents. Check &quot;Conditional?&quot; if the tag is only to be updated if it is previously blank (all non-empty sources in the current line will be applied). The lines will be applied in the order shown. Users should be able to achieve most requirements via a combination of blanking tags, using the right source order and &quot;conditional&quot; flags. For example, to overwrite a tag sourced from &quot;composer&quot; with &quot;conductor&quot;, specify &quot;conductor&quot; first, then &quot;composer&quot; as conditional. Note that, for example, to demote the MB-supplied artist to only appear if no other listed choices are present, blank the artist tag and then add it as a conditional source at the end of the list. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">&quot;Also populate sort tags&quot;</span>: If a sort tag is associated with the source tag then the sort names will be placed in a sort tag corresponding to the destination tag. Note that the only explicit sort tags written by Picard are for artist, albumartist and composer. Piacrd also writes hidden variables \'_artists_sort\' and \'albumartists_sort\' (note the plurals - these are the sort tags for multi-valued alternatives \'artists\' and \'_albumartists\'). To be consistent with this approach, the plugin writes hidden variables for other tags - e.g. \'_arranger_sort\'. The plugin also writes hidden sort variables for the various hidden artist variables - e.g. \'_cwp_librettists\' has a matching sort variable \'_cwp_librettists_sort\'. Therefore most artist-type sources <span style=\" font-weight:600;\">will</span> have a sort tag/variable associated with them and these will be placed in a destination sort tag if this option is selected - <span style=\" font-weight:600;\">in other words, selecting this option will cause most destination tags to have associated sort tags. Furthermore, any hidden sort variables associated with tags which are not listed explicitly in the tag mapping section will also be written out as tags</span> (i.e. even if the related tags are not included as destination tags). Note, however, that composite sources (e.g. &quot; ensemble_names + \\; + conductors&quot;) do not have sort tags associated with them. </li></ul>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:2; text-indent:0px;\"><span style=\" font-size:8pt;\">If this option is not selected, no additional sort tags will be written, but the hidden variables will still be available, so if a sort tag is required explicitly, just map the sort tag directly - e.g. map \'conductors_sort\' to \'conductor_sort\'. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">More complex operations can be built using tagger scripts. If required, these can be set to run conditionally by setting a tag or hidden variable in this section and then testing it in the script. </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><a name=\"workandpartstab\"></a><span style=\" font-size:8pt; font-weight:600;\">W</span><span style=\" font-size:8pt; font-weight:600;\">ork and parts tab</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">There six coloured sections as shown in the screen print below: </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><img src=\"http://music.highmossergate.co.uk/images/work_parts_options%20v0.9.jpg\" /><span style=\" font-size:8pt;\"> </span></p>\n"
"<ol style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Include all work levels&quot; should be selected otherwise this section will not run. This is the default. </li>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">&quot;Include collection relationships&quot; (selected by default) will include parent works where the relationship has the attribute \'part of collection\'. See </span><a href=\"https://community.metabrainz.org/t/levels-in-the-structure-of-works/293047/109\"><span style=\" font-size:8pt; text-decoration: underline; color:#0000ff;\">Discussion</span></a><span style=\" font-size:8pt;\"> for the background to this. Note that only &quot;work&quot; entity types will be included, not &quot;series&quot; entities. If this option is changed, it will not take effect on releases already loaded in Picard - you will need to quit and restart. PLEASE BE CONSISTENT and do not use different options on albums with the same works, or the results may be unexpected. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">&quot;Use cache (if available)&quot; prevents excessive look-ups of the MB database. Every look-up of a parent work needs to be performed separately (hopefully the MB database might make this easier some day). Network usage constraints by MB means that each look-up takes a minimum of 1 second. Once a release has been looked-up, the works are retained in cache, significantly reducing the time required if, say, the options are changed and the data refreshed. However, if the user edits the works in the MB database then the cache will need to be turned off temporarily for the refresh to find the new/changed works. Also some types of work (e.g. arrangements) will require a full look-up if options have been changed. </span><span style=\" font-size:8pt; font-weight:600;\">Do not leave this option turned off</span><span style=\" font-size:8pt;\"> as it will make the plugin slower and may cause problems. This option will always be set on when Picard is started, regardless of how it was left when it was last closed. </span></p>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Tagging style&quot;. This section determines how the hierarchy of works will be sourced. </li>\n"
"<ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 2;\"><li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Works source</span>: There are 3 options for determing the principal source of the works metadata </li>\n"
"<ul type=\"circle\" style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 3;\"><li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Use only metadata from title text&quot;. The plugin will attempt to extract the hierarchy of works from the track title by looking for repetitions and patterns. If the title does not contain all the work names in the hierarchy then obviously this will limit what can be provided. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Use only metadata from canonical works&quot;. The hierarchy in the MB database will be used. Assuming the work is correctly entered in MB, this should provide all the data. However the text may differ from the track titles and will be the same for all recordings. It may also be in the language of the composer whereas the titles will probably be in the language of the release. (This language issue can also be addressed by using aliases - see below). </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Use canonical work metadata enhanced with title text&quot;. This supplements the canonical data with text from the titles <span style=\" font-weight:600;\">where it is significantly different</span>. The supplementary title data will be in curly brackets. This is clearly the most complete metadata style of the three but may lead to long descriptions. It is particularly useful for providing translations - see image below for an example (using the Muso library manager). </li></ul>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:2; text-indent:0px;\"><img src=\"http://music.highmossergate.co.uk/images/Respighi.jpg\" /><span style=\" font-size:8pt;\"> </span></p>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Source of canonical work text</span>. Where either of the second two options above are chosen, there is a further choice to be made: </li>\n"
"<ul type=\"circle\" style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 3;\"><li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Full MusicBrainz work hierarchy&quot;. The names of each level of work are used to populate the relevant tags. E.g. if &quot;Má vlast: I. Vyšehrad, JB 1:112/1&quot; (level 0) is part of &quot;Má vlast, JB 1:112&quot; (level 1) then the parent work will be tagged as &quot;Má vlast, JB 1:112&quot;, not &quot;Má vlast&quot;. So, while accurate, this option might be more verbose. </li></ul>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Consistent with lowest level work description&quot;. The names of the level 0 work are used to populate the relevant tags. I.e. if &quot;Má vlast: I. Vyšehrad, JB 1:112/1&quot; (level 0) is part of &quot;Má vlast, JB 1:112&quot; (level 1) then the parent work will be tagged as &quot;Má vlast&quot;, not &quot;Má vlast, JB 1:112&quot;. This frequently looks better, but not always, <span style=\" font-weight:600;\">particularly if the level 0 work name does not contain all the parent work detail</span>. If the full structure is not implicit in the level 0 name then a warning will be logged and written to the &quot;warning&quot; tag. </li></ul>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt; font-weight:600;\">Strategy for setting style:</span><span style=\" font-size:8pt;\"> </span><span style=\" font-size:8pt; font-style:italic;\">It is suggested that you start with &quot;extended/enhanced&quot; style and the &quot;Consistent with lowest level work description&quot; as the source (this is the default). If this does not give acceptable results, try switching to &quot;Full MusicBrainz work hierarchy&quot;. If the &quot;enhanced&quot; details in curly brackets (from the track title) give odd results then switch the style to &quot;canonical works&quot; only. Any remaining oddities are then probably in the MusicBrainz data, which may require editing.</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Aliases&quot; </li>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">&quot;Replace work names by aliases&quot; will use </span><span style=\" font-size:8pt; font-weight:600;\">primary</span><span style=\" font-size:8pt;\"> aliases for the chosen locale instead of standard MusicBrainz work names. To choose the locale, use the drop-down under &quot;translate artist names&quot; in the main Picard Options--&gt;Metadata page. Note that this option is not saved as a file tag since, if different choices are made for different releases, different work names may be stored and therefore cannot be grouped together in your player/library manager. The sub-options then allow either the replacement of all work names, where a primary alias exists, just the replacement of work names which are in non-Latin script, or only replace those which are flagged with user &quot;Folksonomy&quot; tags. The tag text needs to be included in the text box, in which case flagged works will be \'aliased\' as well as non-Latin script works, if the second sub-option is chosen. Note that the tags may either be anyone\'s tags (&quot;Look in all tags&quot;) or the user\'s own tags. If selecting &quot;Look in user\'s own tags only&quot; you </span><span style=\" font-size:8pt; font-weight:600;\">must</span><span style=\" font-size:8pt;\"> be logged in to your MusicBrainz user account (in the Picard Options-&gt;General page), otherwise repeated dialogue boxes may be generated and you may need to force restart Picard. </span></p>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Tags to create&quot; sets the names of the tags that will be created from the sources described above. All these tags will be blanked before filling as specified. Tags specified against more than one source will have later sources appended in the sequence specified, separated by separators as specified. </li>\n"
"<ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 2;\"><li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Work tags</span>: </li>\n"
"<ul type=\"circle\" style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 3;\"><li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Tags for Work - for software with 2-level capability&quot;. Some software (notably Muso) can display a 2-level work hierarchy as well as the work-movement hierarchy. This tag can be use to store the 2-level work name (a double colon :: is used to separate the levels within the tag). </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Tags for Work - for software with 1-level capability&quot;. Software which can display a movement and work (but no higher levels) could use any tags specified here. Note that if there are multiple work levels, the intermediate levels will not be tagged. Users wanting all the information should use the tags from the previous option (but it may cause some breaks in the display if levels change) - alternatively the missing work levels can be included in a movement tag (see below). </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Tags for top-level (canonical) work&quot;. This is the top-level work held in MB. This can be useful for cataloguing and searching (if the library software is capable). </li></ul>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Movement/Part tags</span>: (a) &quot;Tags for(computed) movement number&quot;. This is not necessarily the embedded movt/part number, but is the sequence number of the movement within its parent work <span style=\" font-weight:600;\">on the current release</span>. <br />(b) &quot;Tags for Movement - excluding embedded movt/part numbers&quot;. As below, but without the movement part/number prefix (if applicable) <br />(c) &quot;Tags for Movement - including embedded movt/part numbers&quot;. This tag(s) will contain the full lowest-level part name extracted from the lowest-level work name, according to the chosen tagging style. <br />For options (b) and (c), the tags can either be filled &quot;for use with multi-level work tags&quot; or &quot;for use with 1-level work tags (intermediate works will prefix movement)&quot; - or different tags for each column. The latter option will include any intermediate work levels which are missing from a single-level work tag. Use different tag names for these, from the multi-level version, otherwise both versions will be appended, creating a multi-valued tag (a warning will be given). <br />Note that if a tag is included in (a) and either of (b) or (c), the movement number will be prepended at the beginning of the tag, followed by the selected separator. </li></ul>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt; font-weight:600;\">Strategy for setting tags:</span><span style=\" font-size:8pt;\"> </span><span style=\" font-size:8pt; font-style:italic;\">It is suggested that initially you just use the multi-level work tag and related movement tags, even if your software only has a single-level work capability. This may result in work names being repeated in work headings, but may look better than the alternative of having work names repeated in movement names. This is the default.</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt; font-style:italic;\">If this does not look good you can then compare it with the alternative approach and change as required for specific releases. If your software does not have any &quot;work&quot; capability, then you can still get the full work details by, for example, specifying &quot;title&quot; as both a work and a movement tag.</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Partial recordings, arrangements and medleys&quot; gives various options where recordings are not just simply of a named complete work. </li>\n"
"<ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 2;\"><li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Partial recordings</span>: If this option is selected, partial recordings will be treated as a sub-part of the whole recording and will have the related text (in the adjacent box) included in its name. Note that this text is at the end of the canonical name, but the latter will probably be stripped from the sub-part as it duplicates the recording work name; any title text will be appended to the whole. Note that, if &quot;Consistent with lowest level work description&quot; is chosen in section 2, the text may be treated as a &quot;prefix&quot; similar to those in the &quot;Advanced&quot; tab. If this eliminates other similar prefixes and has unwanted effects, then either change the desired text slightly (e.g. surround with brackets) or use the &quot;Full MusicBrainz work hierarchy&quot; option in section 2. Note that similar text between the partial work and its \'parent\' will be removed which will frequently result in no text other than the specified \'partial text\', unless extended metadata is used resulting in appended text in {}. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Arrangements</span>: If this option is selected, works which are arrangements of other works will have the latter treated in the same manner as &quot;parent&quot; works, except that the arrangement work name will be prefixed by the text provided. Note that similar text between the arranged work and its parent will be removed unless this results in no text, in which case a stricter comparison (as for the derivation of \'part\' names from works) will be used. </li></ul>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt; font-weight:600;\">Important note:</span><span style=\" font-size:8pt;\"> </span><span style=\" font-size:8pt; font-style:italic;\">If the Partial or Arrangement options are changed (i.e. selected/deselected) then quit and restart Picard as the work structure is fundamentally different. If the related text (only) is changed then the release can simply be refreshed.</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 2;\"><li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Medleys</span> These can occur in two ways in MusicBrainz: (a) the recording is described as a &quot;medley of&quot; a number of works and (b) the track is described as (more than one) &quot;medley including a recording of&quot; a work. See <a href=\"https://musicbrainz.org/release/393913a2-7fde-4ed5-8be6-ca5c2c0ccf0d\"><span style=\" text-decoration: underline; color:#0000ff;\">Homecoming</span></a> for examples of both (tracks 8, 9 and 11). In the first case, the specified text will be included in brackets after the work name, whereas in the second case, the track will be treated as a recording of multiple works and the specified text will appear in the parent work name. </li></ul>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;SongKong-compatible tag usage&quot;. </li></ol>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">&quot;Use work tags on file (no look up on MB) if Use Cache selected&quot;: This will enable the existing work tags on the file to be used in preference to looking up on MusicBrainz, if those tags are SongKong-compatible (which should be the case if SongKong has been used or if the SongKong tags have been previously written by this plugin). If present, this can speed up processing considerably, but obviously any new data on MusicBrainz will be missed. For the option to operate, &quot;Use cache&quot; also needs to be selected. Although faster, some of the subtleties of a full look-up will be missed - for example, parent works which are arrangements will not be highlighted as such, some arrangers or composers of original works may be omitted and some medley information may be missed. </span><span style=\" font-size:8pt; font-weight:600;\">In general, therefore, the use of this option will result in poorer metadata than allowing the full database look-up to run. It is not recommended unless speed is more important than quality.</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">&quot;Write SongKong-compatible work tags&quot; does what it says. These can then be used by the previous option, if the release is subsequently reloaded into Picard, to speed things up (assuming the reload was not to pick up new work data). </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">The default for both these options is unchecked. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">Note that Picard and SongKong use the tag musicbrainz_workid to mean different things. If Picard has overwritten the SongKong tag (not a problem if this plugin is used) then a warning will be given and the works will be looked up on MusicBrainz. Also note that once a release is loaded, subsequent refreshes will use the cache (if option is ticked) in preference to the file tags. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; font-weight:600;\">Note for iTunes users:</span><span style=\" font-size:8pt;\"> </span><span style=\" font-size:8pt; font-style:italic;\">iTunes and Picard do not work well together. iTunes can display work and movement for m4a(mp4) files, but Picard does not write the movement tag. To work round this, write the movement to the &quot;subtitle&quot; tag assuming that is not otherwise used, and use a simple Mp3tag action to convert it to MOVEMENTNAME before importing to iTunes. If you are writing to a FLAC file which will subsequently be converted to m4a then different tag names may be required; e.g. using dBpoweramp, write the movement to &quot;movement name&quot;. In both cases use &quot;work&quot; for the work. To store the top_work, use &quot;grouping&quot; if writing directly to m4a, but &quot;style&quot; if writing to FLAC followed by dBpoweramp conversion. You can put multiple tags into the boxes described above so that your options are multi-purpose. N.B. if work tags are specified and the work has at least one level (i.e. at least work: movement), then the tag &quot;show work movement&quot; will be set to 1. This is used by iTunes to trigger the hierarchical display and should work both directly with m4a files and indirectly via files which are subsequently converted.</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><a name=\"genresetctab\"></a><span style=\" font-size:8pt; font-weight:600;\">G</span><span style=\" font-size:8pt; font-weight:600;\">enres etc. tab</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">This section is dependent on both the artists and workparts sections. If either of those sections are not run then this section will not operate correctly. At the very top of the tab is a checkbox &quot;Use Muso reference database...&quot;. For Muso users, selecting this enables you to use reference data for genres, composers and periods which have been entered in Muso\'s &quot;Options-&gt;Classical Music&quot; section. Regardless as to whether this is selected, there are then three main coloured sections, each with a number of subsections. The details in each section differ depending on whether the &quot;Muso&quot; option is selected. The screen print below shows the options assuming it is not selected (differences occurring when &quot;Muso&quot; is selected are discussed later): </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><img src=\"http://music.highmossergate.co.uk/images/genre_options_plain%20v0.9.2.jpg\" /><span style=\" font-size:8pt;\"> </span></p>\n"
"<ol style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Genres&quot;. Two separate tags may be used to store genre information, a main genre tage (usually just &quot;genre&quot;) and a sub-genre tag. These need to be specified at the top of the section. If either is left blank then the related processing will not run. </li>\n"
"<ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 2;\"><li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Source of genres</span> Any or all of four sources may be selected. In each case, any values found are treated as &quot;candidate genres&quot; - they will only be applied to the specified genre and sub-genre tags in accordance with the criteria in the &quot;allowed genres&quot; section (see below). </li>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:2; text-indent:0px;\"><span style=\" font-size:8pt;\">(a) &quot;Existing file tag&quot;. The contents of the existing file tag (as specified above - main genre tag only) will be included as candidate genres. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:2; text-indent:0px;\"><span style=\" font-size:8pt;\">(b) &quot;Folksonomy work tags&quot;. This will use the folksonomy tags for </span><span style=\" font-size:8pt; font-weight:600;\">works</span><span style=\" font-size:8pt;\"> (including parent works) as a possible source of genres. To use the folksonomy tags for </span><span style=\" font-size:8pt; font-weight:600;\">releases/tracks</span><span style=\" font-size:8pt;\">, select the main Picard option in Options-&gt;Metadata-&gt;&quot;Use folksonomy tags as genre&quot;. Again (unlike vanilla Picard) these are candidate genres, subject to matching allowed genres. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:2; text-indent:0px;\"><span style=\" font-size:8pt;\">(c) &quot;Work-type&quot;. The work-type attribute of works or parent works will be used. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:2; text-indent:0px;\"><span style=\" font-size:8pt;\">(d) &quot;Infer from artist metadata&quot;. This option was on the artist tab in version 0.9.1 and prior. Owing to the additional genre processing now available, the operation of this option is slightly restricted compared to the earlier versions. It attempts to create candidate genres based on information in the artist-related tags. Values provided are: Orchestral, Concerto, Choral, Opera, Duet, ,Trio, Quartet, Chamber music, Aria (\'classical values\') and Vocal, Song, Instrumental (\'generic values\'). If the track is a recorded work and the track artist is the composer (i.e. MusicBrainz \'classical style\'), the candidate genre values will also include &quot;Classical&quot;. The \'classical values\' will only be included as candidate genres if the track is deemed to be \'classical\' by some part of the genre processing section. </span></p>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Allowed genres</span> Four boxes are provided for lists of genres which are &quot;allowed&quot; to appear in the specified tags. Each list should be comma-separated (and no commas in any genre name). Candidate genres matching those in a &quot;main genre&quot; box will be added to the specified main genre tag. Similarly for sub-genres. If a candidate genre matches a \'classical genre\' (in one of the top two boxes), then the track will be deemed to be &quot;Classical&quot; (see next part for more details). </li></ul>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:2; text-indent:0px;\"><span style=\" font-size:8pt;\">If none of the boxes are filled, then all genres found will be included. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:2; text-indent:0px;\"><span style=\" font-size:8pt;\">If one box is filled (e.g. &quot;classical main genres&quot;) and there is a matching genre found, then remaining genres will only be included if they match genres in that box or the related sub-genre box. So in this case if &quot;classical sub-genres&quot; is filled and &quot;general sub-genres&quot; is not, then only matching genres will be included. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:2; text-indent:0px;\"><span style=\" font-size:8pt;\">If both &quot;classical&quot; and &quot;general&quot; main genre boxes are filled, then only genres matching those boxes or &quot;classical sub-genres&quot; will be included. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:2; text-indent:0px;\"><span style=\" font-size:8pt;\">You may also enter a genre name to be used if no matching main genre is found (otherwise the tag will be blank). </span></p>\n"
"<ul type=\"circle\" style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 3;\"><li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">&quot;Classical&quot; genre</span> Normally (i.e. the default) a work will only be deemed to be \'classical\' if it is inferred from the MusicBrainz style (see &quot;source of genres&quot;) or if a candidate genre matches a &quot;Classical&quot; genre or sub-genre list. However, you may select that all tracks are \'classical\' regardless. There is also an option to exclude the word &quot;Classical&quot; from any genre tag, but still treat the work as classical. If a work is deemed to be classical, a tag may be written with a specified value as set out in the last two boxes of this section. For example, to be consistent with SonKong/Jaikoz, you could set &quot;is_classical&quot; to &quot;1&quot;. </li></ul>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Instruments and keys&quot;. </li>\n"
"<ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 2;\"><li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Instruments</span> Specify the tag name you wish instrument names to appear in. Instruments will be sourced from performer relationships. Instrument names may either be the standard MusicBrainz names or the &quot;credited as&quot; names in the performer relationship, or both. Vocal types are treated similarly to instruments. (Note that, in v0.9.1 and prior, instruments were written to the same tag as inferred genres. If you wish to continue this, then you may use the same tag name here as for the genre tag.) </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Keys</span> Specify the tag name in which you wish the key signatures of works to appear. Keys will be obtained from all work levels (assuming these have been looked up): for example, Dvořák\'s Largo From the New World will be shown as D♭ major, C# minor (the main keys of the movement) and E minor (the home key of the overall work). </li></ul>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">&quot;Include key(s) in work names&quot; gives the option to include the key signature for a work in brackets after the name of the work in the metadata. Keys will be added in the appropriate levels: e.g. Dvořák\'s New World Symphony will get (E minor) at the work level, but only movements with different keys will be annotated viz. &quot;II. Largo (D-flat major, C-Sharp minor)&quot;. </span></p>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Periods and dates&quot;. </li></ol>\n"
"<ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 2;\"><li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Work dates</span> Specify the tag name to hold work dates. Work dates will be given as a &quot;year&quot; value only, e.g. &quot;1808&quot; or a range: &quot;1808-1810&quot;. The sources of these dates is specified in the next part. Only work dates for the lowest-level work will be used - i.e. if the movement has a composed date(s), this will be used, otherwise the the dates from the parent work will be used (if available). </li></ul>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">&quot;Source of work dates&quot;. Select which sources to use - from composed, published and premiered, then decide whether to use them in preferential order (e.g. if &quot;composed date&quot; exists, then the others will not be used) or to show them all. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">&quot;Include workdate in work name ...&quot; operates analogously to &quot;Include key(s) in work names&quot; described above. (Work dates will be used in preference order, i.e. composed - published - premiered, with only the first available date being shown). </span></p>\n"
"<ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 2;\"><li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Periods</span> This section will use work dates, where available, to determine the &quot;classical period&quot; to which it belongs, by means of a &quot;period map&quot; (Muso users can also use composer dates - see below). </li></ul>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">Specify the tag name to hold the period data. The period map should then be entered in the format &quot;Period name, Start_year, End_year; Period name2, Start_year, End_year;&quot; etc. Periods may overlap. Do not use commas or semi-colons within period names. Start and end years must be integers. </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><a name=\"genresetctabmusospecificprocessing\"></a><span style=\" font-size:8pt; font-weight:600;\">G</span><span style=\" font-size:8pt; font-weight:600;\">enres etc. tab - Muso-specific processing</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Users of </span><a href=\"http://klarita.net/muso.html\"><span style=\" font-size:8pt; text-decoration: underline; color:#0000ff;\">Muso</span></a><span style=\" font-size:8pt;\"> have additional capabilities, illustrated in the following screen, which appear when the option &quot;Use Muso reference database ...&quot; is selected at the top of the tab. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><img src=\"http://music.highmossergate.co.uk/images/genre_options%20v0.9.2.jpg\" /><span style=\" font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">For these options to work, the path/name of the Muso reference database needs to be specified on the advanced tab. The default path is &quot;C:\\Users\\Public\\Music\\muso\\database&quot; and the default filename is &quot;Reference.xml&quot;. The additional options are as follows. </span></p>\n"
"<ol style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Use Muso classical genres&quot;. If this is selected, the box for classical main genres is eliminated and the genre list from Muso\'s &quot;Tools-&gt;Options-&gt;Classical Music-&gt;Classical Music Genres&quot; is used instead. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Use Muso composer list to determine if classical&quot;. If the composer name is in Muso\'s list &quot;Tools-&gt;Options-&gt;Classical Music-&gt;Composer Roster&quot;, then the work will be deemed to be classical. If this option is selected, a further option appears to &quot;Treat arrangers as for composers&quot; - if selected then arrangers will also be looked up in the roster. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Use Muso composer dates (if no work date) to determine period&quot;. The birth date + 20 -&gt; death dates of Muso\'s composer roster will be used to assign periods if no work date is available. If this option is selected, a further option appears to &quot;Treat arrangers as for composers&quot; - if selected then arrangers\' working lives will also be used to determine periods. </li>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">(This might be replaced / supplemented by MusicBrainz in the future, but would involve another 1-second lookup per composer). </span></p>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Use Muso map&quot;. Replace the period map with the one in Muso at &quot;Tools-&gt;Options-&gt;Classical Music-&gt;Classical Music Periods&quot; </li></ol>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Note that non-Muso users may also use this functionality, if they wish, by manually creating a reference xml file with the relevant tags, e.g.: </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Courier New,courier\'; font-size:8pt;\">&amp;lt;ClassicalGenre&amp;gt;  </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Courier New,courier\'; font-size:8pt;\">&amp;lt;Name&amp;gt;Cantata&amp;lt;/Name&amp;gt;  </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Courier New,courier\'; font-size:8pt;\">&amp;lt;/ClassicalGenre&amp;gt;   </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Courier New,courier\'; font-size:8pt;\">&amp;lt;Composer&amp;gt;  </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Courier New,courier\'; font-size:8pt;\">&amp;lt;Name&amp;gt;Max REGER&amp;lt;/Name&amp;gt;  </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Courier New,courier\'; font-size:8pt;\">&amp;lt;Birth&amp;gt;1873&amp;lt;/Birth&amp;gt;  </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Courier New,courier\'; font-size:8pt;\">&amp;lt;Death&amp;gt;1916&amp;lt;/Death&amp;gt;  </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Courier New,courier\'; font-size:8pt;\">&amp;lt;/Composer&amp;gt;  </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Courier New,courier\'; font-size:8pt;\">&amp;lt;ClassicalPeriod&amp;gt;  </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Courier New,courier\'; font-size:8pt;\">&amp;lt;Name&amp;gt;Early Romantic&amp;lt;/Name&amp;gt;  </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Courier New,courier\'; font-size:8pt;\">&amp;lt;Start_x0020_Date&amp;gt;1800&amp;lt;/Start_x0020_Date&amp;gt;  </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Courier New,courier\'; font-size:8pt;\">&amp;lt;End_x0020_Date&amp;gt;1850&amp;lt;/End_x0020_Date&amp;gt;  </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Courier New,courier\'; font-size:8pt;\">&amp;lt;/ClassicalPeriod&amp;gt;  </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Courier New,courier\'; font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><a name=\"advancedtab\"></a><span style=\" font-size:8pt; font-weight:600;\">A</span><span style=\" font-size:8pt; font-weight:600;\">dvanced tab</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Hopefully, this tab should not be much used. In any case, it should not need to be changed frequently. There are seven sections as shown in the sceeen print below: </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><img src=\"http://music.highmossergate.co.uk/images/advanced_options%20v0.9.2.jpg\" /><span style=\" font-size:8pt;\"> </span></p>\n"
"<ol style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;General&quot;. There is only one checkbox - &quot;Do not run Classical Extras for tracks where no pre-existing file is detected (warning tag will be written)&quot;. This option will disable Classical Extras processing if no file is present; this means (for example) that single discs from box sets can be loaded without incurring the additional processing overhead (work look-ups etc.) for all the other discs. Also if a compilation album is loaded, where the tracks are on multiple releases, the plugin will only process the release tracks which match. If a file is present but it does not yet have a MusicBrainz trackid tag, then it will initally be treated in the same way as a non-existent file; however, after the initial loading it will (if matched by Picard) be given a MB trackid and &quot;refreshing&quot; the release will result in any such tracks being processed by Classical Extras, while the unmatched tracks are left untouched. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Artists&quot;. This has only one subsection - &quot;Ensemble strings&quot; - which permits the listing of strings by which ensembles of different types may be identified. This is used by the plugin to place performer details in the relevant hidden variables and thus make them available for use in the &quot;Tag mapping&quot; tab as sources for any required tags. If it is important that only whole words are to be matched, be sure to include a space after the string. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Work levels&quot;. This section has parameters applicable to the &quot;works and parts&quot; functions. </li>\n"
"<ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 2;\"><li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Max number of re-tries to access works (in case of server errors)</span>. Sometimes MB lookups fail. Unfortunately Picard (currently) has no automatic &quot;retry&quot; function. The plugin will attempt to retry for the specified number of attempts. If it still fails, the hidden variable _cwp_error will be set with a message; if error logging is checked in section 4, an error message will be written to the log and the contents of _cwp_error will be written out to a special tag called &quot;001_errors&quot; which should appear prominently in the bottom pane of Picard. The problem may be resolved by refreshing, otherwise there may be a problem with the MB database availability. It is unlikely to be a software problem with the plugin. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">How title metadata should be included in extended metadata</span>. This subsection contains various parameters affecting the processing of strings in titles. Because titles are free-form, not all circumstances can be anticipated. Detailed documentation of these is beyond the scope of this Readme as the effects can be quite complex and subtle and may require an understanding of the plugin code (which is of course open-source) to acsertain them. If pure canonical works are used (&quot;Use only metadata from canonical works&quot; and, if necessary, &quot;Full MusicBrainz work hierarchy&quot; on the Works and parts tab, section 2) then this processing should be irrelevant, but no text from titles will be included. Some explanations are given below: </li></ul>\n"
"<ul type=\"circle\" style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 3;\"><li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Proximity of new words&quot;. When using extended metadata - i.e. &quot;metadata enhanced with title text&quot;, the plugin will attempt to remove similar words in the canonical work name (in MusicBrainz) and the title before extending the canonical name. After removing such words, a rather &quot;bitty&quot; result may occur. To avoid this, any new words with the specified proximity will have the words between them (or up to the end) included even if they repeat words in the work name. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Prefixes&quot;. When using &quot;metadata from titles&quot; or extended metadata, the structure of the works in MusicBrainz is used to infer the structure in the title text, so strings that are repeated between tracks which are part of the same MusicBrainz work will be treated as &quot;higher level&quot;. This can lead to anomalies if, for instance, the titles are &quot;Work name: Part 1&quot;, &quot;Work name: Part 2&quot;, &quot;Part&quot; will be treated as part of the parent work name. Specifying such words in &quot;Prefixes&quot; will prevent this. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Synonyms&quot;. These words will be considered equivalent when comparing work name and title text. Thus if one word appears in the work name, that and its synonym will be removed from the title in extending the metadata (subject to the proximity setting above). </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Replacements&quot;. These words/phrases will be replaced in the title text in extended metadata, regardless of the text in the work name. Each entry should be a pair (2-tuple) in the form <span style=\" font-style:italic;\">(original text, replacement text)</span> - no quote marks are necessary. Each pair should be separated by a forward slash - /. If required the original text (to be replaced) can be a regular expression, in which case it must be surrounded by double exclamation marks, thus: <span style=\" font-style:italic;\">(!!regex here!!, replacement text here)</span> </li></ul>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Genres etc. ...&quot;. This is only required if Muso-specific options are used for genres/periods. Specify the path and file name for the reference database (the default is the Muso default for a shared database). Note that the database is only loaded when Picard starts so you will need to restart Picard is these options are changed. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Logging options&quot;. These options are in addition to the options chosen in Picard\'s &quot;Help-&gt;View error/debug log&quot; settings. They only affect messages written by this plugin. To enable debug messages to be shown in the Picard log, the flag needs to be set here and &quot;Debug mode&quot; needs to be turned on in the log. <span style=\" font-weight:600;\">It is strongly advised to keep the &quot;debug&quot; flag unchecked unless debugging is required</span> as it slows up processing and may even cause Picard to hang if there is a large number of files (better to use the \'info\' option - see below). The &quot;error&quot; and &quot;warning&quot; flags should be left checked, unless it is required to suppress messages (the messages are also written to the tags 001_errors and 002_warnings). </li>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">As well as the main Picard log, a custom logging function is provided. This may be either &quot;basic&quot; or &quot;full&quot;. If &quot;basic&quot; is selected, a file &quot;session.log&quot; will be written (over-written each session) to a &quot;Classical Extras&quot; directory inside the same directory as the main Picard log. This gives a processing summary for each release and includes errors, warnings and debug messages if those options have been selected. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">If &quot;full&quot; is selected, all errors, warnings and debugs will be written, along with additional debugging messages, to a custom log file for each release processed. These files are stored in the &quot;Classical Extras&quot; directory inside the same directory as the main Picard log. The log file for a release is named using the release MBID. Debugging from these files requires an understanding of the source code. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">Selecting &quot;full&quot; will slow Picard, but should not normally result in hanging or crashing. </span></p>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Save plugin details and options in a tag?&quot; can be used so that the user has a record of the version of Classical Extras which generated the tags and which options were selected to achieve the resulting tags. Note that the tags will be blanked first so this will only show the last options used on a particular file. The same tag can be used for both sets of options, resulting in a multi-valued tag. All the options in the Classical Extras UI are saved <span style=\" font-weight:600;\">except</span> those which are asterisked. </li>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">The tag contents are in dict format. The options in these tags can then be used to over-ride the displayed options subsequently (see below). </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">N.B. The &quot;Tag name for artist/misc. options&quot; also saves the Picard options for \'translate_artist_names\' and \'standardize_artists\' as these interact with the Classical Extras options. </span></p>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">&quot;Over-ride plugin options displayed in UI with options from local file tags&quot;. If options have previously been saved (see above), selecting these will cause the saved options to be used in preference to the displayed options. The displayed options will not be affected and will be used if no saved options are present. The default is for no over-ride. If &quot;Artists options&quot; over-ride is selected then a sub-option to over-ride (or not) the &quot;Tag details options&quot; is available; this refers to just the detailed tag map in the second box in the tag-mapping tab. </li></ol>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt; font-weight:600; font-style:italic;\">Note that</span><span style=\" font-size:8pt; font-weight:600;\"> </span><span style=\" font-size:8pt; font-weight:600; font-style:italic;\">very occasionally (if the tag containing the options has been corrupted) use of this option may cause an error. In such a case you will need to deselect the &quot;over-ride&quot; option and set the required options manually; then save the resulting tags and the corrupted tag should be over-written</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\"><span style=\" font-size:8pt;\">The last checkbox, &quot;Overwrite options in Options Pages&quot;, is for </span><span style=\" font-size:8pt; font-weight:600;\">VERY CAREFUL USE ONLY</span><span style=\" font-size:8pt;\">. It will cause any options read from the saved tags (if the relevant box has been ticked) to over-write the options on the plugin Options Page UI. The intended use of this is if for some reason the user\'s preferred options have been erased/reverted to default - by using this option, the previously-used choices from a reliable filed album can be used to populate the Options Page. The box will automatically be unticked after loading/refreshing one album, and will always be turned off when starting Picard, to prevent inadvertant use. Far better is to make a </span><span style=\" font-size:8pt; font-weight:600;\">backup copy</span><span style=\" font-size:8pt;\"> of the picard.ini file. </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><a name=\"informationonhiddenvariables\"></a><span style=\" font-size:8pt; font-weight:600;\">I</span><span style=\" font-size:8pt; font-weight:600;\">nformation on hidden variables</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">This section is for users who want to write their own scripts, or add additional tags (in the tag mapping section) based on hidden variables. The definition and source of each hidden variable is listed. Apologies if there are errors and omissions in this section - to double check the actual hidden variables fgr any track, use the plugin &quot;View script variables&quot;. </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><a name=\"worksandparts\"></a><span style=\" font-size:8pt; font-weight:600;\">W</span><span style=\" font-size:8pt; font-weight:600;\">orks and parts</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_work_n, where n is an integer &gt;=0 : The MB work name at level n. For n=0, the tag is the same as the current standard Picard tag &quot;work&quot; </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_work_top : The top work name (i.e. for maximal n). Thus, if max n = N, _cwp_work_top will be equivalent to _cwp_work_N. Note, however, that this will always be the &quot;canonical&quot; MB name, not one derived from titles or the lowest level work name and that no annotations (e.g. key or work year) will be added (whereas they will be added to _cwp_work_N). Nevertheless, if &quot;replace work names by aliases&quot; has been selected and is applicable, the relevant alias will be used. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_workid_n : The matching work id for each work name. For n=0, the tag is the same as the standard Picard tag &quot;MusicBrainz Work Id&quot; </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_workid_top : The matching work id for the top work name. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_part_n : A &quot;stripped&quot; version of _cwp_work_n, where higher-level work text has been removed wherever possible, to avoid duplication on display. Thus in theory, _cwp_work_0 will be the same as &quot;_cwp_work_top: _cwp_part_(N-1): ...: _cwp_part_0&quot; (punctuation excepted), but may differ in more complex situations where there is not an exact hierarchy of text as the work levels are traversed. (See below for the &quot;_X0&quot; series which attempts to address any such inconsistencies) </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_part_levels : The number of work levels attached to THIS TRACK. Should be equal to N = max(n) referred to above. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_work_part_levels : The maximum number of levels for ANY TRACK in the album which has the same top work as this track. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_single_work_album : A flag = 1 if there is only one top work in this album, else = 0. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_work : the level selected by the plugin to be the source of the single-level work name if &quot;Use only metadata from canonical works&quot; is selected (usually the top level, but one lower in the case of a single work album). </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_groupheading : the level selected by the plugin to be the source of the multi-level work name if &quot;Use only metadata from canonical works&quot; is selected. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_part : The movement name derived from the MB work names (generally = _cwp_part_0) and used as the source for the movement name used for &quot;Tags for Movement - including embedded movt/part numbers&quot;. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_inter_work : Intermediate works between _cwp_part and _cwp_work (if any). </li></ul>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">If there is more than one work any level, then _cwp_work_n and _cwp_workid_n will have multiple entries. Another common situation is that a &quot;bottom level&quot; work is spread across more than one track. Rather than artificially split the work into sub-parts, this is often shown in MusicBrainz as a track being a &quot;partial recording of&quot; a work. The plugin deals with this by creating a notional lowest-level with the suffix &quot; (part)&quot; appended to the work it is a partial recording of. In order that this notional part can be separately identified from the full work, the musicbrainz_recordingid is used as the identifier rather than the workid. If there is more than one &quot;parent&quot; work of a lower level work, multi-valued tags are generated. </span></p>\n"
"<ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_X0_part_0 : A &quot;stripped&quot; version of _cwp_work_0 (see above), where elements of _cwp_work_0 which repeat within level 1 have been stripped. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_X0_work_n : The elements of _cwp_work_0 which repeat within level n </li></ul>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">As well as variables derived from MB\'s work structure, some variables are produced which are derived from the track title. Typically titles may be in the format &quot;Work: Movement&quot;, but not always. Sometimes the title is prefixed by the name of the composer; in this case the variable </span></p>\n"
"<ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_title is provided which excludes the composer name and subsequent processing is carried out using this rather than the full title. </li></ul>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">The plugin uses a number of methods attempt to extract the works and movement from the title. The resulting variables are: </span></p>\n"
"<ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_title_work_n, and </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_title_part_n which mirror those for the ones based on MB works described above. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_title_part_levels which similarly mirrors _cwp_part_levels </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_title_work_levels which similarly mirrors _cwp_work_part_levels </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_title_work is the level selected by the plugin to be the source of the single-level work name if &quot;Use only metadata from title text&quot; is selected (usually the top level, but one lower in the case of a single work album). </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_title_groupheading is similarly the level selected by the plugin to be the source of the multi-level work name if &quot;Use only metadata from title text&quot; is selected. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_extended_part : = _cwp_part with additional movement information from the title - given in {}. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_extended_groupheading : = _cwp_groupheading with additional work information from the title - given in {}. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_extended_work : = _cwp_work with additional work information from the title - given in {}. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_extended_inter_work : = _cwp_inter_work with additional work information from the title - given in {}. The &quot;extended&quot; variables can be useful where the &quot;canonical&quot; work names in MB are in the original language and the titles are in English (say). Various heuristics are used to try and add (and only add) meaningful additional information, but oddities may occur which require manual editing. </li></ul>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Artist tags which derive from work-artist relationships are also set in this section: </span></p>\n"
"<ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_composers </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_writers </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_arrangers : This is for arrangers of the work and also &quot;instrument arrangers&quot; and &quot;vocal arrangers&quot; with appropriate annotation for instrument and voice types. (Picard does not currently write the latter to the Arranger tag if they are part of the work-artists relationship, despite style guidance saying to use specific instrument types instead of generic arranger.) </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_arranger_names : Just the names of the above (no annotations) </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_orchestrators </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_reconstructors - \'reconstructed by\' relationships </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_revisors - \'revised by\' relationships </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_lyricists </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_librettists </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_translators </li></ul>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Finally, the tags _cwp_error and_cwp_warning are provided to supply warnings and error messages to the user. </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><a name=\"artists\"></a><span style=\" font-size:8pt; font-weight:600;\">A</span><span style=\" font-size:8pt; font-weight:600;\">rtists</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">All the additional hidden variables for artists written by Classical Extras are prefixed by _cea_. Note that these are generally in the plural, whereas the standard tags are singular. If the user blanks a tag then the original value is stored in the singular with the _cea_ prefix. Thus _cea_arranger would be the contents of the Picard tag &quot;arranger&quot; before blanking, whereas _cea_arrangers is hidden variable created by Classical Extras. </span></p>\n"
"<ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_recording_artist : The artist credited with the recording (not necessarily the track artist). Note that this is the only &quot;_cea_&quot; tag which is singular, because it is in the same format as the \'artist\' tag, whereas... </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_recording_artists : The list/multiple value version of the above. (This follows the approach in Picard for \'artist\' and \'artists\', being the track artists.) </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_MB_artists: The original track artists per MusicBrainz before any replacement by / merging with recording artists. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_soloists : List of performers (with instruments in brackets), who are NOT ensembles or conductors, separated by semi-colons. Note they may not strictly be &quot;soloists&quot; in that they may be part of an ensemble. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_recording_artistsort : Sort names of _cea_recording_artist </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_recording_artists_sort : Sort names of _cea_recording_artists </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_soloist_names : Names of the above (i.e. no instruments). </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_soloists_sort : Sort_names of the above. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_vocalists : Soloists who are vocalists (with voice in brackets). </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_vocalist_names : Names of the above (no voice). </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_instrumentalists : Soloists who have instruments but are not vocalists. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_instrumentalist_names : Names of the above (no instrument). </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_other_soloists : Soloists who do not have specified instrument/voice. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_ensembles : List of performers which are ensembles (with type / instruments - e.g. &quot;orchestra&quot; - in brackets), separated by semi-colons. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_ensemble_names : Names of the above (i.e. no instruments). </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_ensembles_sort : Sort_names of the above. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_album_soloists : Sub-list of soloist_names who are also album artists </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_album_soloists_sort : Sort_names of the above. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_album_conductors : List of conductors whao are also album artists </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_album_conductors_sort : Sort_names of the above. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_album_ensembles: Sub-list of ensemble_names who are also album artists </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_album_ensembles_sort : Sort_names of the above. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_album_composers : List of composers who are also album artists </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_album_composers_sort : Sort_names of the above. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_album_track_composer_lastnames : Last names of the above. (N.B. This only includes the composers of the current track - compare with _cea_album_composer_lastnames below). </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_album_composer_lastnames : Last names of composers of ANY track on the album who are also album artists. This can be used to prefix the album name if required. (cf _cea_album_track_composer_lastnames) </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_support_performers : Sub-list of soloist_names who are NOT album artists </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_support_performers_sort : Sort_names of the above. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_composers : Alternative composer name, based on sort name, to avoid non-latin language problems. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_conductors : Alternative conductor name, based on sort name, to avoid non-latin language problems. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_performers : An alternative to performer, based on the sort name (see note re non-Latin script below). </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_arrangers : All arrangers for the <span style=\" font-weight:600;\">recording</span> with instrument/voice type in brackets, if provided. If the work and parts functionality has also been selected, the arrangers of works, which Picard also currently omits will be put in _cwp_arrangers. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_orchestrators : Arrangers (per Picard) included in the MB database as type &quot;orchestrator&quot;. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_chorusmasters : A person who (per Picard) is a conductor, but is &quot;chorus master&quot; in the MB database (i.e. not necessarily conducting the performance). </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_leaders : The leader of the orchestra (&quot;concertmaster&quot; in MusicBrainz) - not created by Picard as standard. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_work_type : Although not strictly an artist field, this is derived from artist and performer metadata. This is the variable populated if &quot;Infer work types&quot; is selected on the Artists tab. </li></ul>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><a name=\"genresetc\"></a><span style=\" font-size:8pt; font-weight:600;\">G</span><span style=\" font-size:8pt; font-weight:600;\">enres etc.</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Most of the genres, keys and date information requires the works and parts section to have been run, and so the variables are prefixed _cwp_, but instruments and genres which are derived from artist information and are prefixed _cea_. </span></p>\n"
"<ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_instruments : Names of all instruments on the track (MusicBrainz names) </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_instuments_credited : As above, but MB names replaced by as-credited names, if any </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_instruments_all : MB and as-credited names </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_work_type : The genre(s) inferred from artist information </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cea_work_type_if_classical : As above, but only of relevance if the work is classical </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_candidate_genres : List of all tags, work types etc. found (depending on specified sources) before filtering for &quot;allowed&quot; genres. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_keys : keys associated with this track (from all work levels). </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_composed_dates : Date composed (integer) or range (integer-integer). </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_published_dates : Date published (integer) or range (integer-integer). </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_premiered_dates : Date premiered (integer) or range (integer-integer). </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_untagged_genres : Genres in _cwp_candidate_genres which have been filtered out as they are not in any &quot;allowed&quot; list. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_unrostered_composers : For Muso users: composers who are not in Muso\'s classical composers roster. </li></ul>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><a name=\"softwarespecificnotes\"></a><span style=\" font-size:8pt; font-weight:600;\">S</span><span style=\" font-size:8pt; font-weight:600;\">oftware-specific notes</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Note that _cwp_part_levels &gt; 0 will indicate that the track recording is part of a work and so could be used to set other software-specific flags (e.g. for iTunes &quot;show work movement&quot;) to indicate a multi-level &quot;work: movement&quot;. </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><a name=\"songkong\"></a><span style=\" font-size:8pt; font-weight:600;\">S</span><span style=\" font-size:8pt; font-weight:600;\">ongKong</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">SongKong users may wish to map the _cwp variables to tags produced by SongKong if consistency is desired, in which case the mappings are principally: </span></p>\n"
"<ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_work_0 =&gt; musicbrainz_work_composition </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_workid_0 =&gt; musicbrainz_work_composition_id </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_work_n =&gt; musicbrainz_work_part_leveln, for n = 1..6 </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_workid_n =&gt; musicbrainz_work_part_leveln_id, for n = 1..6 </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">_cwp_work_top =&gt; musicbrainz_work </li></ul>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">These mappings are carried out automatically if the relevant options on the &quot;Work and parts&quot; tab are selected. <br />In addition, _cwp_title_work and _cwp_title_part_0 are intended to be equivalent to SongKong\'s work and part tags. (N.B. Full consistency between SongKong and Picard may also require the modification of Artist and related tags via a script, or the preservation of the related file tags) </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><a name=\"muso\"></a><span style=\" font-size:8pt; font-weight:600;\">M</span><span style=\" font-size:8pt; font-weight:600;\">uso</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">The tag &quot;groupheading&quot; should be set as the &quot;Tags for Work - for software with 2-level capability&quot;. Muso will use this directly and extract the levels from it (split by the double colon). Muso permits a variety of import options which should be capable of combination with the tagging options in this plugin to achieve most desired effects. To avoid the use of import options in Muso, set the output tags from the plugin to be the native ones used by Muso (NB &quot;title&quot; may include or exclude groupheading - Muso should recognise it and extract it). </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">To make use of Muso\'s in-built classical music processing to set explicit tags in Picard, enable the &quot;Use Muso reference database ...&quot; option on the &quot;Genres etc.&quot; tab. </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><a name=\"playerswithnoworkcapability\"></a><span style=\" font-size:8pt; font-weight:600;\">P</span><span style=\" font-size:8pt; font-weight:600;\">layers with no &quot;work&quot; capability</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Leave the &quot;title&quot; tag unchanged or make it a combination of work and movement. </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><a name=\"possibleenhancements\"></a><span style=\" font-size:8pt; font-weight:600;\">P</span><span style=\" font-size:8pt; font-weight:600;\">ossible Enhancements</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Planned enhancements (among others) are </span></p>\n"
"<ol style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Include information regarding dates (e.g. date composed, recording date). </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Improved genre capability, possibly with specific tags for different aspects of genre, e.g. periods. </li></ol>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><a name=\"technicalmatters\"></a><span style=\" font-size:8pt; font-weight:600;\">T</span><span style=\" font-size:8pt; font-weight:600;\">echnical Matters</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Issues were encountered with the Picard API in that there is not a documented way to let Picard know that it is still doing asynchronous tasks in the background and has not finished processing metadata. Many thanks to @dns_server for assistance in dealing with this and to @sophist for the albumartist_website code which I have borrowed from. I have tried to add some more comments to help any others trying the same techniques. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Also, the documentation of the XML lookup (tagger.xmlws) is virtually non-existent. The response is an XmlNode object (not a dict, although it is represented as one). Each node has a name with {attribs, text, children} values. The structure is more clearly understood if the web-based lookup is used (which is well documented at https://musicbrainz.org/doc/Development/XML_Web_Service/Version_2) as this gives an XML response. I wrote a function (parse_data) to parse XmlNode objects, or lists thereof, for a (parameterised) hierarchy of nodes (and optional attribs value tests) in order to extract required data from the response. This may be of use to other plugin authors. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">To get the whole picture, in XML, for a release, use (for example) https://musicbrainz.org/ws/2/release/f3bb4fdd-5db0-43a8-be73-7a1747f6c2ef?inc=release-groups+media+recordings+artist-credits+artists+aliases+labels+isrcs+collections+artist-rels+release-rels+url-rels+recording-rels+work-rels+recording-level-rels+work-level-rels. This simulates the response given by Picard with the &quot;Use release relationships&quot; and &quot;Use track relationships&quot; options selected. Note that the Picard album_metadata_processor returns releaseXmlNode which is everything from the Release node of the XML downwards, whereas track_metadata_processor returns trackXmlNode which is everything from a Track node downwards (release -&gt; medium-list -&gt; medium -&gt; track-list is above track). Replace all hyphens in XML with underscores when parsing the Python object. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">A large variety of releases were used to test this plugin, but there may still be bugs, so further testing is welcome. The following release was particularly complex and useful for testing: https://musicbrainz.org/release/ec519fde-94ee-4812-9717-659d91be11d4. Also this release was a bit tricky - a large box set with some works appearing as originals and in arrangements: https://musicbrainz.org/release/5288f266-bab8-45bd-83e4-555730f02fa0. </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><a name=\"verytechnicalmatters\"></a><span style=\" font-size:8pt; font-weight:600;\">V</span><span style=\" font-size:8pt; font-weight:600;\">ery technical matters</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">I\'ve done a bit of research and observed the following behaviour in Picard when using the </span><span style=\" font-family:\'Courier New,courier\'; font-size:8pt;\">register_track_metadata_processor()</span><span style=\" font-size:8pt;\"> API: </span></p>\n"
"<ol style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If a new album (i.e. not yet tagged by Picard and with no MBIDs) is loaded, clustered and looked-up/scanned, resulting in the matched files being shown in the right-hand pane, then: </li>\n"
"<ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 2;\"><li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Courier New,courier\';\">track.metadata</span> gives the lookup result from MB - i.e. no file information, just the track info. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Courier New,courier\';\">album.tagger.files[xxxx].metadata</span> (where xxxx is the path/filename of the track) gives the file information (dirname etc.) and the tags on the original file. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Courier New,courier\';\">album.tagger.files[xxxx].orig_metadata</span> gives the same as <span style=\" font-family:\'Courier New,courier\';\">album.tagger.files[xxxx].metadata</span> </li></ul>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">However, if the album is then &quot;refreshed&quot;, this does not just carry out a repeat operation, instead: </li>\n"
"<ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 2;\"><li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Courier New,courier\';\">track.metadata</span> gives the same as before </li></ul>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Courier New,courier\';\">album.tagger.files[xxxx].metadata</span> gives the metadata as in <span style=\" font-family:\'Courier New,courier\';\">track.metadata</span> and also includes all the file information as before. </li>\n"
"<li style=\" font-size:8pt;\" style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Courier New,courier\';\">album.tagger.files[xxxx].orig_metadata</span> gives the same as before (i.e. the original tags). </li></ol>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">So, the \'post-refreshment\' metadata is actually usable - by matching the </span><span style=\" font-family:\'Courier New,courier\'; font-size:8pt;\">musicbrainz_trackid</span><span style=\" font-size:8pt;\"> of </span><span style=\" font-family:\'Courier New,courier\'; font-size:8pt;\">track.metadata</span><span style=\" font-size:8pt;\"> and </span><span style=\" font-family:\'Courier New,courier\'; font-size:8pt;\">album.tagger.files[xxxx].metadata</span><span style=\" font-size:8pt;\">, you can get the file details of the track. Not elegant, but it works. But why is it necessary to &quot;refresh&quot; to get what seems like a logical data set? Basically, the metadata process is not complete when the plugin is called, so not all metadata is available to it. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">I don\'t know why </span><span style=\" font-family:\'Courier New,courier\'; font-size:8pt;\">get_files_from_objects(objs)</span><span style=\" font-size:8pt;\"> doesn\'t work in the </span><span style=\" font-family:\'Courier New,courier\'; font-size:8pt;\">register_track_metadata_processor()</span><span style=\" font-size:8pt;\"> API when </span><span style=\" font-family:\'Courier New,courier\'; font-size:8pt;\">objs</span><span style=\" font-size:8pt;\"> is a list of tracks, but does provide a list of file objects when </span><span style=\" font-family:\'Courier New,courier\'; font-size:8pt;\">objs</span><span style=\" font-size:8pt;\"> is a list of albums. Also it does work in the </span><span style=\" font-family:\'Courier New,courier\'; font-size:8pt;\">register_file_action(xxx)</span><span style=\" font-size:8pt;\">/</span><span style=\" font-family:\'Courier New,courier\'; font-size:8pt;\">register_track_action(xxx)</span><span style=\" font-size:8pt;\"> API, but I assume that is because </span><span style=\" font-family:\'Courier New,courier\'; font-size:8pt;\">itemsview.py</span><span style=\" font-size:8pt;\"> can identify that you have clicked on an item that is a track and a file (this is after the metadata processing has run). </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">In order to get round these problems, I have adopted a \'hack\' which looks up the files for an album and finds which file matches the required track on tracknumber and discnumber. This seems to work, but there may be circumstances when it does not. As a consequence, refreshment should only be required if </span><span style=\" font-family:\'Courier New,courier\'; font-size:8pt;\">get_files_from_objects(objs)</span><span style=\" font-size:8pt;\"> doesn\'t get all the album files. </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><a name=\"listofpreviousupdates\"></a><span style=\" font-size:8pt; font-weight:600;\">L</span><span style=\" font-size:8pt; font-weight:600;\">ist of previous updates</span><span style=\" font-size:8pt;\"> </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Version 0.9.1: Bug fixes. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Version 0.9: Additional option to clear previous file tags which are not wanted, without interfering with cover art. Additional option to replace instrument names with as-credited names. Also instrument names are now saved to hidden variables tags (instruments, instruments_credited and instruments_all) which can be mapped to file tags as required. Sub-option added to the \'override artist options\' option on the &quot;advanced&quot; tab - to allow tag map details to be included or not in this over-ride. Minor bug fixes and UI improvements. This is the next \'official\' version after 0.7. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Version 0.8.9: Provide option (in advanced tab) to disable Classical Extras processing if no file is present; this enables (for example) single discs from box sets to be loaded without incurring the additional processing overhead for all the other discs. The settings of the main Picard options &quot;translate_artist_names&quot; and &quot;standardize_artists&quot; is now saved along with the Classical Extras options so that they can be used to over-ride the displayed options. This is because they interact with the Classical Extras options in certain cases. Also:- graceful recovery from authentication failure; improved UI - more scalable; minor bug fixes. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Version 0.8.8: Fixes to allow for (1) disabling of \'use_cache\' across releases which may share works and (2) works which might appear in their own right and also have arrangements. Also, re-set certain important options to defaults on starting Picard, namely: \'use_cache\' set to True, \'log_debug\', \'log_info\' and \'options_overwrite\' set to False; the user will need to deliberately re-set these on starting Picard if required - this is to prevent inadvertently leaving these flags in an abnormal state. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Version 0.8.7: Revised treatment of &quot;conditional&quot; tag mapping. Previously, if multiple sources were specified for a tag mapping and the &quot;conditional&quot; flag set, only the first non-empty source was used. Now all sources will be mapped to a tag if it was empty before executing the current tag mapping line. This is considered to be more intuitive and leads to less complex mapping lines. However, it some cases it may be necessary to split a line from a previous version if the previous behaviour was specifically desired. Improved algorithms for extending metadata with title info. Bug fixes. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Version 0.8.6: More consistent approach to sort tags and hidden variables. Bug fixes. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Version 0.8.5: Improved handling of instruments. Bug fixes. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Version 0.8.4: Improved UI, bug fixes and code improvements. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Version 0.8.3: Ability to use aliases of work names instead of the MusicBrainz standard names. Various options to use aliases and as-credited names for performers and writers (i.e. relationship artists). Option to use recording artists as well as (or instead of) track artists. All relationship artists are now tagged for all work levels (with some special processing for lyricists). New UI layout to separate tag mapping from artist options. Option to split lyrics into common (release) and unique (track) components. Various code improvements as well as bug fixes. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Version 0.8.2: Improved algorithms and a few minor bug fixes. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Version 0.8.1: Bug fixes and minor enhancements - including revison and extension of &quot;synonyms&quot; section on the &quot;advanced&quot; tab. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Version 0.8: Handle multiple recordings and/or multiple parents of a work. Handle multiple albumartist composers for one track. Option to use &quot;credited as&quot; name for artists (inc. performers and composers) who are &quot;release artist&quot; or &quot;track artist&quot;. Option to exclude &quot;solo&quot; from instrument types. Option to over-ride plugin options with those used when the album was last saved. Option to keep (and append to) specified existing file tags - furthermore if &quot;is_classical&quot; is present, the work-type variable will include &quot;Classical&quot;. Option to use (and write) SongKong-compatible work tags (saves processing time if SongKong is used to pre-process large numbers of files). Include the work (and its parents) of which a work is an arrangement (as a &quot;pseudo-parent&quot;). Include medleys in movement/part description (as [Medley of:...] or other descriptor specified in options). Allow for multiple parents of recordings and works (and multiple parents of those) - multiples are given as multiple tag instances, where permitted, otherwise separated by semi-colons. Option as to whether to include parent works where the relationship attribute is &quot;part of collection&quot;. Plus minor enhancements and bug fixes too numerous to mention! (Note that some old versions of the plugin may say v0.8 when they are only v0.7) </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Version 0.7: Bug fixes. Pull request issued for this version. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Version 0.6.6: Bug fixes and algorithm improvements. Allow multiple sources for a tag (each will be appended) and use + as separator for concantenating sources, not a comma, to distinguish from the use of comma to separate multiples. Provide additional hidden variables (&quot;sources&quot;) for vocalists and instrumentalists. Option to include intermediate work levels in a movement tag (for systems which cannot display multiple work levels). </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Version 0.6.5: Include ability to use multiple (concatenated) sources in tag mapping (see notes under &quot;tag mapping&quot;). All artist &quot;sources&quot; using hidden variables (_cea_...) are now consistently in the plural, to distinguish from standard tags. Note that if &quot;album&quot; is used as a source in tag mapping, it will now be the revised name, where composer prefixing is used. To use the original name, use &quot;release&quot; as the source. Also various bug fixes, notably to ensure that all arrangers get picked up for use in tag mapping. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Version 0.6.4: Write out version number to user-specified tag. Provide default comment tags for writing ui options. Provide better m4a and iTunes compatibility (see notes). Added functionality for chorus master, orchestrator and concert master (leader). Re-arranged artist tab in ui. Various bug fixes. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Version 0.6.3: Bug fixes. Modified ui default options. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Version 0.6.2: Bug fixes. More flexible handling of artists (can blank and then add back later). Modified ui default options. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">Version 0.6.1: Amended regex to permit non-Latin characters in work text.</span></p></body></html>"))
        self.textBrowser_3.setHtml(_translate("ClassicalExtrasOptionsPage", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt; font-weight:600;\">Please see the readme at</span><span style=\" font-size:14pt; font-weight:600;\"> </span><a href=\"http://music.highmossergate.co.uk\"><span style=\" font-size:14pt; text-decoration: underline; color:#0000ff;\">my website</span></a><span style=\" font-size:14pt; font-weight:600;\"> </span><span style=\" font-size:12pt; font-weight:600;\">for  a more readable version and also a lot of other help.</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt; font-weight:600;\">The text below may be slightly out of date and lacks images.</span></p></body></html>"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Help), _translate("ClassicalExtrasOptionsPage", "Help"))

